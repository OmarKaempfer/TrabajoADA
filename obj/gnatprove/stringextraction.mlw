(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T1s" defined at stringextraction.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  10
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "vowels" defined at stringextraction.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__vowels
 use import "_gnatprove_standard".Main
 use        Standard__string

 function vowels #"stringextraction.ads" 4 0 0#"model_projected" "model_trace:2797" "name:vowels" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T2s" defined at stringextraction.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__T2s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  42
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "consonants" defined at stringextraction.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__consonants
 use import "_gnatprove_standard".Main
 use        Standard__string

 function consonants #"stringextraction.ads" 5 0 0#"model_projected" "model_trace:2807" "name:consonants" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "given_string" defined at stringextraction.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_vowels__given_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function given_string #"stringextraction.ads" 7 0 0#"model_projected" "model_trace:2824" "name:Given_string" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_string" defined at stringextraction.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__given_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T16s" defined at stringextraction.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L15s__T16s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16s__ref =
  { mutable t16s__content "model_trace:" "name:" : t16s }
 
 function t16s__ref___projection 
   (a : t16s__ref) : t16s =
  a.t16s__content
 
 meta "model_projection" function t16s__ref___projection
 
 meta "inline : no" function t16s__ref___projection
 
 val t16s__havoc 
   (x : t16s__ref) : unit
  writes {x}

end

(* Module for defining the constant "given_string" defined at stringextraction.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__contains__given_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function given_string #"stringextraction.ads" 31 0 0#"model_projected" "model_trace:3001" "name:Given_String" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_string" defined at stringextraction.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__contains__given_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "char" defined at stringextraction.ads:31, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__contains__char
 use import "_gnatprove_standard".Main

 function char #"stringextraction.ads" 31 0 0#"model" "model_trace:3010" "name:char" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "char" defined at stringextraction.ads:31, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__contains__char___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T22s" defined at stringextraction.ads:34, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__contains__L21s__T22s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t22s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t22s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t22s__ref =
  { mutable t22s__content "model_trace:" "name:" : t22s }
 
 function t22s__ref___projection 
   (a : t22s__ref) : t22s =
  a.t22s__content
 
 meta "model_projection" function t22s__ref___projection
 
 meta "inline : no" function t22s__ref___projection
 
 val t22s__havoc 
   (x : t22s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "contains" defined at stringextraction.ads:31, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__contains
 use import "_gnatprove_standard".Main
 use        Standard__string

 function contains 
   (given_string : Standard__string.string) (char : int) : bool
 
 predicate contains__function_guard 
   (result : bool) (given_string : Standard__string.string) (char : int) 

end

(* Module for axiomatizing type "T18s" defined at stringextraction.ads:15, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L15s__L17s__T18s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content "model_trace:" "name:" : t18s }
 
 function t18s__ref___projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref___projection
 
 meta "inline : no" function t18s__ref___projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "extract_vowels" defined at stringextraction.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__extract_vowels
 use import "_gnatprove_standard".Main
 use        Standard__string

 function extract_vowels 
   (given_string : Standard__string.string) : Standard__string.string
 
 predicate extract_vowels__function_guard 
   (result : Standard__string.string) (given_string : Standard__string.string) 

end

(* Module for defining the constant "given_string" defined at stringextraction.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_consonants__given_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function given_string #"stringextraction.ads" 18 0 0#"model_projected" "name:Given_string" "model_trace:2923" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_string" defined at stringextraction.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__given_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T20s" defined at stringextraction.ads:24, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L19s__T20s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20s__ref =
  { mutable t20s__content "model_trace:" "name:" : t20s }
 
 function t20s__ref___projection 
   (a : t20s__ref) : t20s =
  a.t20s__content
 
 meta "model_projection" function t20s__ref___projection
 
 meta "inline : no" function t20s__ref___projection
 
 val t20s__havoc 
   (x : t20s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "extract_consonants" defined at stringextraction.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__extract_consonants
 use import "_gnatprove_standard".Main
 use        Standard__string

 function extract_consonants 
   (given_string : Standard__string.string) : Standard__string.string
 
 predicate extract_consonants__function_guard 
   (result : Standard__string.string) (given_string : Standard__string.string) 

end

(* Module for axiomatizing type "TS1bP1" defined at stringextraction.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at stringextraction.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__TS1bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresultSP1" defined at stringextraction.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__TTresultSP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content "model_trace:" "name:" : tTresultSP1 }
 
 function tTresultSP1__ref___projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref___projection
 
 meta "inline : no" function tTresultSP1__ref___projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at stringextraction.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__TresultS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__TTresultSP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__TTresultSP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresultS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresultS__ref =
  { mutable tresultS__content "model_trace:" "name:" : tresultS }
 
 function tresultS__ref___projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref___projection
 
 meta "inline : no" function tresultS__ref___projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at stringextraction.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at stringextraction.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__T2b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__T2b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t3b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at stringextraction.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  22
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "vowels" defined at stringextraction.adb:8, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_vowels__vowels
 use import "_gnatprove_standard".Main
 use        Standard__string

 function vowels #"stringextraction.adb" 8 0 0#"model_projected" "name:vowels" "model_trace:2360" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T5b" defined at stringextraction.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t5b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content "model_trace:" "name:" : t5b }
 
 function t5b__ref___projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L8b__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t9b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t9b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T17b" defined at stringextraction.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L16b__T17b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t17b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t17b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t17b__ref =
  { mutable t17b__content "model_trace:" "name:" : t17b }
 
 function t17b__ref___projection 
   (a : t17b__ref) : t17b =
  a.t17b__content
 
 meta "model_projection" function t17b__ref___projection
 
 meta "inline : no" function t17b__ref___projection
 
 val t17b__havoc 
   (x : t17b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T19b" defined at stringextraction.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L16b__L18b__T19b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t19b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t19b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t19b__ref =
  { mutable t19b__content "model_trace:" "name:" : t19b }
 
 function t19b__ref___projection 
   (a : t19b__ref) : t19b =
  a.t19b__content
 
 meta "model_projection" function t19b__ref___projection
 
 meta "inline : no" function t19b__ref___projection
 
 val t19b__havoc 
   (x : t19b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13b" defined at stringextraction.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L10b__L12b__T13b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t13b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t13b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t13b__ref =
  { mutable t13b__content "model_trace:" "name:" : t13b }
 
 function t13b__ref___projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref___projection
 
 meta "inline : no" function t13b__ref___projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at stringextraction.adb:25, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L10b__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t11b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T21b" defined at stringextraction.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L16b__L20b__T21b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t21b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t21b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t21b__ref =
  { mutable t21b__content "model_trace:" "name:" : t21b }
 
 function t21b__ref___projection 
   (a : t21b__ref) : t21b =
  a.t21b__content
 
 meta "model_projection" function t21b__ref___projection
 
 meta "inline : no" function t21b__ref___projection
 
 val t21b__havoc 
   (x : t21b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T15b" defined at stringextraction.adb:29, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_1__L10b__L14b__T15b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t15b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t15b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t15b__ref =
  { mutable t15b__content "model_trace:" "name:" : t15b }
 
 function t15b__ref___projection 
   (a : t15b__ref) : t15b =
  a.t15b__content
 
 meta "model_projection" function t15b__ref___projection
 
 meta "inline : no" function t15b__ref___projection
 
 val t15b__havoc 
   (x : t15b__ref) : unit
  writes {x}

end

(* Module for defining the constant "R23b" defined at stringextraction.adb:34, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_vowels__R23b
 use import "_gnatprove_standard".Main

 function r23b #"stringextraction.adb" 34 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T24b" defined at stringextraction.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T24b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t24b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t24b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24b__ref =
  { mutable t24b__content "model_trace:" "name:" : t24b }
 
 function t24b__ref___projection 
   (a : t24b__ref) : t24b =
  a.t24b__content
 
 meta "model_projection" function t24b__ref___projection
 
 meta "inline : no" function t24b__ref___projection
 
 val t24b__havoc 
   (x : t24b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T25b" defined at stringextraction.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T25b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__T24b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__T24b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t25b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t25b__ref =
  { mutable t25b__content "model_trace:" "name:" : t25b }
 
 function t25b__ref___projection 
   (a : t25b__ref) : t25b =
  a.t25b__content
 
 meta "model_projection" function t25b__ref___projection
 
 meta "inline : no" function t25b__ref___projection
 
 val t25b__havoc 
   (x : t25b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS26bP1" defined at stringextraction.adb:40, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__TS26bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS26bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS26bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS26bP1__ref =
  { mutable tS26bP1__content "model_trace:" "name:" : tS26bP1 }
 
 function tS26bP1__ref___projection 
   (a : tS26bP1__ref) : tS26bP1 =
  a.tS26bP1__content
 
 meta "model_projection" function tS26bP1__ref___projection
 
 meta "inline : no" function tS26bP1__ref___projection
 
 val tS26bP1__havoc 
   (x : tS26bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S26b" defined at stringextraction.adb:40, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__S26b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__TS26bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__TS26bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s26b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s26b__ref =
  { mutable s26b__content "model_trace:" "name:" : s26b }
 
 function s26b__ref___projection 
   (a : s26b__ref) : s26b =
  a.s26b__content
 
 meta "model_projection" function s26b__ref___projection
 
 meta "inline : no" function s26b__ref___projection
 
 val s26b__havoc 
   (x : s26b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresultSP1" defined at stringextraction.adb:41, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__TTresultSP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content "model_trace:" "name:" : tTresultSP1 }
 
 function tTresultSP1__ref___2__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref___2__projection
 
 meta "inline : no" function tTresultSP1__ref___2__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at stringextraction.adb:41, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__TresultS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__TTresultSP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__TTresultSP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresultS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresultS__ref =
  { mutable tresultS__content "model_trace:" "name:" : tresultS }
 
 function tresultS__ref___2__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref___2__projection
 
 meta "inline : no" function tresultS__ref___2__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T27b" defined at stringextraction.adb:41, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T27b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t27b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t27b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t27b__ref =
  { mutable t27b__content "model_trace:" "name:" : t27b }
 
 function t27b__ref___projection 
   (a : t27b__ref) : t27b =
  a.t27b__content
 
 meta "model_projection" function t27b__ref___projection
 
 meta "inline : no" function t27b__ref___projection
 
 val t27b__havoc 
   (x : t27b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T28b" defined at stringextraction.adb:41, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T28b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__T27b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__T27b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t28b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t28b__ref =
  { mutable t28b__content "model_trace:" "name:" : t28b }
 
 function t28b__ref___projection 
   (a : t28b__ref) : t28b =
  a.t28b__content
 
 meta "model_projection" function t28b__ref___projection
 
 meta "inline : no" function t28b__ref___projection
 
 val t28b__havoc 
   (x : t28b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T29b" defined at stringextraction.adb:44, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_2__T29b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t29b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t29b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t29b__ref =
  { mutable t29b__content "model_trace:" "name:" : t29b }
 
 function t29b__ref___projection 
   (a : t29b__ref) : t29b =
  a.t29b__content
 
 meta "model_projection" function t29b__ref___projection
 
 meta "inline : no" function t29b__ref___projection
 
 val t29b__havoc 
   (x : t29b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T33b" defined at stringextraction.adb:56, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_2__L32b__T33b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t33b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t33b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t33b__ref =
  { mutable t33b__content "model_trace:" "name:" : t33b }
 
 function t33b__ref___projection 
   (a : t33b__ref) : t33b =
  a.t33b__content
 
 meta "model_projection" function t33b__ref___projection
 
 meta "inline : no" function t33b__ref___projection
 
 val t33b__havoc 
   (x : t33b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T31b" defined at stringextraction.adb:56, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_2__L30b__T31b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t31b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t31b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t31b__ref =
  { mutable t31b__content "model_trace:" "name:" : t31b }
 
 function t31b__ref___projection 
   (a : t31b__ref) : t31b =
  a.t31b__content
 
 meta "model_projection" function t31b__ref___projection
 
 meta "inline : no" function t31b__ref___projection
 
 val t31b__havoc 
   (x : t31b__ref) : unit
  writes {x}

end

(* Module for defining the constant "R35b" defined at stringextraction.adb:60, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_consonants__R35b
 use import "_gnatprove_standard".Main

 function r35b #"stringextraction.adb" 60 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T36b" defined at stringextraction.adb:60, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T36b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t36b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t36b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t36b__ref =
  { mutable t36b__content "model_trace:" "name:" : t36b }
 
 function t36b__ref___projection 
   (a : t36b__ref) : t36b =
  a.t36b__content
 
 meta "model_projection" function t36b__ref___projection
 
 meta "inline : no" function t36b__ref___projection
 
 val t36b__havoc 
   (x : t36b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T37b" defined at stringextraction.adb:60, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T37b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__T36b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__T36b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t37b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t37b__ref =
  { mutable t37b__content "model_trace:" "name:" : t37b }
 
 function t37b__ref___projection 
   (a : t37b__ref) : t37b =
  a.t37b__content
 
 meta "model_projection" function t37b__ref___projection
 
 meta "inline : no" function t37b__ref___projection
 
 val t37b__havoc 
   (x : t37b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS38bP1" defined at stringextraction.adb:66, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__contains__TS38bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS38bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS38bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS38bP1__ref =
  { mutable tS38bP1__content "model_trace:" "name:" : tS38bP1 }
 
 function tS38bP1__ref___projection 
   (a : tS38bP1__ref) : tS38bP1 =
  a.tS38bP1__content
 
 meta "model_projection" function tS38bP1__ref___projection
 
 meta "inline : no" function tS38bP1__ref___projection
 
 val tS38bP1__havoc 
   (x : tS38bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S38b" defined at stringextraction.adb:66, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__contains__S38b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__contains__TS38bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__contains__TS38bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s38b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s38b__ref =
  { mutable s38b__content "model_trace:" "name:" : s38b }
 
 function s38b__ref___projection 
   (a : s38b__ref) : s38b =
  a.s38b__content
 
 meta "model_projection" function s38b__ref___projection
 
 meta "inline : no" function s38b__ref___projection
 
 val s38b__havoc 
   (x : s38b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T39b" defined at stringextraction.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__contains__L_3__T39b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t39b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t39b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t39b__ref =
  { mutable t39b__content "model_trace:" "name:" : t39b }
 
 function t39b__ref___projection 
   (a : t39b__ref) : t39b =
  a.t39b__content
 
 meta "model_projection" function t39b__ref___projection
 
 meta "inline : no" function t39b__ref___projection
 
 val t39b__havoc 
   (x : t39b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T44b" defined at stringextraction.adb:72, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__contains__L_3__L43b__T44b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t44b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t44b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t44b__ref =
  { mutable t44b__content "model_trace:" "name:" : t44b }
 
 function t44b__ref___projection 
   (a : t44b__ref) : t44b =
  a.t44b__content
 
 meta "model_projection" function t44b__ref___projection
 
 meta "inline : no" function t44b__ref___projection
 
 val t44b__havoc 
   (x : t44b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T42b" defined at stringextraction.adb:72, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__contains__L_3__L41b__T42b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t42b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t42b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t42b__ref =
  { mutable t42b__content "model_trace:" "name:" : t42b }
 
 function t42b__ref___projection 
   (a : t42b__ref) : t42b =
  a.t42b__content
 
 meta "model_projection" function t42b__ref___projection
 
 meta "inline : no" function t42b__ref___projection
 
 val t42b__havoc 
   (x : t42b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "result" defined at stringextraction.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val result__ #"stringextraction.adb" 6 0 0#"model_projected" "model_trace:2327" "name:result"  : Array__Int__Standard__character.map__ref 
 
 function result____first #"stringextraction.adb" 6 0 0#"model_projected" "name:result" "model_trace:2327'First" 
   : Standard__integer.integer
 
 function result____last #"stringextraction.adb" 6 0 0#"model_projected" "name:result" "model_trace:2327'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at stringextraction.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result_index" defined at stringextraction.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__result_index
 use import "_gnatprove_standard".Main

 val result_index #"stringextraction.adb" 7 0 0#"model_projected" "model_trace:2350" "name:result_index"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result_index" defined at stringextraction.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__result_index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at stringextraction.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__L_1__j
 use import "_gnatprove_standard".Main

 val j #"stringextraction.adb" 10 0 0#"model_projected" "model_trace:2373" "name:J"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at stringextraction.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__L_1__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at stringextraction.adb:41, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val result__ #"stringextraction.adb" 41 0 0#"model_projected" "name:result" "model_trace:2540"  : Array__Int__Standard__character.map__ref 
 
 function result____first #"stringextraction.adb" 41 0 0#"model_projected" "name:result" "model_trace:2540'First" 
   : Standard__integer.integer
 
 function result____last #"stringextraction.adb" 41 0 0#"model_projected" "name:result" "model_trace:2540'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at stringextraction.adb:41, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result_index" defined at stringextraction.adb:42, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__result_index
 use import "_gnatprove_standard".Main

 val result_index #"stringextraction.adb" 42 0 0#"model_projected" "name:result_index" "model_trace:2563"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result_index" defined at stringextraction.adb:42, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__result_index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at stringextraction.adb:44, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__L_2__j
 use import "_gnatprove_standard".Main

 val j #"stringextraction.adb" 44 0 0#"model_projected" "name:J" "model_trace:2576"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at stringextraction.adb:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__L_2__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at stringextraction.adb:68, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__contains__L_3__j
 use import "_gnatprove_standard".Main

 val j #"stringextraction.adb" 68 0 0#"model_projected" "name:J" "model_trace:2695"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at stringextraction.adb:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__contains__L_3__j___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining a value for string literal  defined at stringextraction.ads:4, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_154
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_154 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_154__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_154 __void_param)].
   ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 1)) = 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 2)) = 69) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 3)) = 73) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 4)) = 79) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 5)) = 85) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 6)) = 97) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 7)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 8)) = 105) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 9)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 10)) = 117) ))

end

(* Module for defining a value for string literal  defined at stringextraction.ads:5, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_155
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_155 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_155__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_155 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 1)) = 81) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 2)) = 87) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 3)) = 82) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 4)) = 84) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 5)) = 89) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 6)) = 80) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 7)) = 83) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 8)) = 68) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 9)) = 70) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 10)) = 71) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 11)) = 72) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 12)) = 74) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 13)) = 75) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 14)) = 76) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 15)) = 90) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 16)) = 88) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 17)) = 67) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 18)) = 86) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 19)) = 66) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 20)) = 78) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 21)) = 77) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 22)) = 113) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 23)) = 119) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 24)) = 114) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 25)) = 116) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 26)) = 121) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 27)) = 112) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 28)) = 115) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 29)) = 100) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 30)) = 102) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 31)) = 103) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 32)) = 104) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 33)) = 106) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 34)) = 107) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 35)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 36)) = 122) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 37)) = 120) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 38)) = 99) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 39)) = 118) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 40)) = 98) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 41)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 42)) = 109) ))

end

(* Module for defining a value for string literal  defined at stringextraction.adb:8, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_156
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_156 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_156__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_156 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 1)) = 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 2)) = 69) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 3)) = 73) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 4)) = 79) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 5)) = 85) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 6)) = 97) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 7)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 8)) = 105) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 9)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 10)) = 117) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 11)) = 193) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 12)) = 201) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 13)) = 205) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 14)) = 211) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 15)) = 218) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 16)) = 225) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 17)) = 233) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 18)) = 237) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 19)) = 243) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 20)) = 250) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 21)) = 220) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_156 __void_param) 22)) = 252) ))

end

(* Module for defining the loop exit exception for the loop "L_1" defined at stringextraction.adb:10, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Stringextraction__extract_vowels__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at stringextraction.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at stringextraction.adb:44, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Stringextraction__extract_consonants__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at stringextraction.adb:44, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at stringextraction.adb:68, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Stringextraction__contains__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at stringextraction.adb:68, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__contains__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1s" defined at stringextraction.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__T1s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2s" defined at stringextraction.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__T2s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16s" defined at stringextraction.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L15s__T16s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T22s" defined at stringextraction.ads:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__contains__L21s__T22s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18s" defined at stringextraction.ads:15, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L15s__L17s__T18s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20s" defined at stringextraction.ads:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L19s__T20s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at stringextraction.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at stringextraction.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__extract_vowels__given_string
 use        Stringextraction__extract_vowels__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_175 : Stringextraction__extract_vowels__S1b.s1b) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool)  =
  (if (temp___skip_constant_172) then (
   true) else (
   ( (Stringextraction__extract_vowels__S1b.dynamic_property (Standard__string.first Stringextraction__extract_vowels__given_string.given_string) (Standard__string.last Stringextraction__extract_vowels__given_string.given_string) (Stringextraction__extract_vowels__S1b.first temp___expr_175) (Stringextraction__extract_vowels__S1b.last temp___expr_175)) /\ ( ((Stringextraction__extract_vowels__S1b.first temp___expr_175) = (Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) /\ ((Stringextraction__extract_vowels__S1b.last temp___expr_175) = (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_177 : Stringextraction__extract_vowels__S1b.s1b) (temp___skip_top_level_178 : bool)  =
  true

end

(* Module giving axioms for type "TTresultSP1" defined at stringextraction.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__TTresultSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresultS" defined at stringextraction.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__TresultS___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Stringextraction__extract_vowels__given_string
 use        Stringextraction__extract_vowels__TresultS

 predicate dynamic_invariant "inline" 
   (temp___expr_185 : Stringextraction__extract_vowels__TresultS.tresultS) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool)  =
  (if (temp___skip_constant_182) then (
   true) else (
   ( (Stringextraction__extract_vowels__TresultS.dynamic_property 1 (Standard__string.length Stringextraction__extract_vowels__given_string.given_string) (Stringextraction__extract_vowels__TresultS.first temp___expr_185) (Stringextraction__extract_vowels__TresultS.last temp___expr_185)) /\ ( ((Stringextraction__extract_vowels__TresultS.first temp___expr_185) = 1) /\ ((Stringextraction__extract_vowels__TresultS.last temp___expr_185) = (Standard__string.length Stringextraction__extract_vowels__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_187 : Stringextraction__extract_vowels__TresultS.tresultS) (temp___skip_top_level_188 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at stringextraction.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at stringextraction.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at stringextraction.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at stringextraction.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L8b__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T17b" defined at stringextraction.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L16b__T17b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T19b" defined at stringextraction.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L16b__L18b__T19b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T13b" defined at stringextraction.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L10b__L12b__T13b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at stringextraction.adb:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L10b__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T21b" defined at stringextraction.adb:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L16b__L20b__T21b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T15b" defined at stringextraction.adb:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_1__L10b__L14b__T15b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T24b" defined at stringextraction.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T24b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T25b" defined at stringextraction.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T25b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS26bP1" defined at stringextraction.adb:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__TS26bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S26b" defined at stringextraction.adb:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__S26b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__extract_consonants__given_string
 use        Stringextraction__extract_consonants__S26b

 predicate dynamic_invariant "inline" 
   (temp___expr_195 : Stringextraction__extract_consonants__S26b.s26b) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool)  =
  (if (temp___skip_constant_192) then (
   true) else (
   ( (Stringextraction__extract_consonants__S26b.dynamic_property (Standard__string.first Stringextraction__extract_consonants__given_string.given_string) (Standard__string.last Stringextraction__extract_consonants__given_string.given_string) (Stringextraction__extract_consonants__S26b.first temp___expr_195) (Stringextraction__extract_consonants__S26b.last temp___expr_195)) /\ ( ((Stringextraction__extract_consonants__S26b.first temp___expr_195) = (Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) /\ ((Stringextraction__extract_consonants__S26b.last temp___expr_195) = (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_197 : Stringextraction__extract_consonants__S26b.s26b) (temp___skip_top_level_198 : bool)  =
  true

end

(* Module giving axioms for type "TTresultSP1" defined at stringextraction.adb:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__TTresultSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresultS" defined at stringextraction.adb:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__TresultS___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Stringextraction__extract_consonants__given_string
 use        Stringextraction__extract_consonants__TresultS

 predicate dynamic_invariant "inline" 
   (temp___expr_205 : Stringextraction__extract_consonants__TresultS.tresultS) (temp___is_init_201 : bool) (temp___skip_constant_202 : bool) (temp___do_toplevel_203 : bool) (temp___do_typ_inv_204 : bool)  =
  (if (temp___skip_constant_202) then (
   true) else (
   ( (Stringextraction__extract_consonants__TresultS.dynamic_property 1 (Standard__string.length Stringextraction__extract_consonants__given_string.given_string) (Stringextraction__extract_consonants__TresultS.first temp___expr_205) (Stringextraction__extract_consonants__TresultS.last temp___expr_205)) /\ ( ((Stringextraction__extract_consonants__TresultS.first temp___expr_205) = 1) /\ ((Stringextraction__extract_consonants__TresultS.last temp___expr_205) = (Standard__string.length Stringextraction__extract_consonants__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_207 : Stringextraction__extract_consonants__TresultS.tresultS) (temp___skip_top_level_208 : bool)  =
  true

end

(* Module giving axioms for type "T27b" defined at stringextraction.adb:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T27b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T28b" defined at stringextraction.adb:41, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T28b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T29b" defined at stringextraction.adb:44, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_2__T29b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T33b" defined at stringextraction.adb:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_2__L32b__T33b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T31b" defined at stringextraction.adb:56, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_2__L30b__T31b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T36b" defined at stringextraction.adb:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T36b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T37b" defined at stringextraction.adb:60, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T37b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS38bP1" defined at stringextraction.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__contains__TS38bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S38b" defined at stringextraction.adb:66, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__contains__S38b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__contains__given_string
 use        Stringextraction__contains__S38b

 predicate dynamic_invariant "inline" 
   (temp___expr_215 : Stringextraction__contains__S38b.s38b) (temp___is_init_211 : bool) (temp___skip_constant_212 : bool) (temp___do_toplevel_213 : bool) (temp___do_typ_inv_214 : bool)  =
  (if (temp___skip_constant_212) then (
   true) else (
   ( (Stringextraction__contains__S38b.dynamic_property (Standard__string.first Stringextraction__contains__given_string.given_string) (Standard__string.last Stringextraction__contains__given_string.given_string) (Stringextraction__contains__S38b.first temp___expr_215) (Stringextraction__contains__S38b.last temp___expr_215)) /\ ( ((Stringextraction__contains__S38b.first temp___expr_215) = (Standard__string.first Stringextraction__contains__given_string.given_string)) /\ ((Stringextraction__contains__S38b.last temp___expr_215) = (Standard__string.last Stringextraction__contains__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_217 : Stringextraction__contains__S38b.s38b) (temp___skip_top_level_218 : bool)  =
  true

end

(* Module giving axioms for type "T39b" defined at stringextraction.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__contains__L_3__T39b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T44b" defined at stringextraction.adb:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__contains__L_3__L43b__T44b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T42b" defined at stringextraction.adb:72, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__contains__L_3__L41b__T42b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at stringextraction.adb:6, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_vowels__result__aggregate_def
 use import "_gnatprove_standard".Main
 use        Stringextraction__extract_vowels__T3b

 function stringextraction__extract_vowels__result__aggregate_def 
   (temp___226 : int) (temp___227 : int) (temp___228 : int) : Stringextraction__extract_vowels__T3b.t3b

end

(* Module for declaring an abstract function for the aggregate at stringextraction.adb:41, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_consonants__result__aggregate_def
 use import "_gnatprove_standard".Main
 use        Stringextraction__extract_consonants__T28b

 function stringextraction__extract_consonants__result__aggregate_def 
   (temp___250 : int) (temp___251 : int) (temp___252 : int) : Stringextraction__extract_consonants__T28b.t28b

end
(* Module for defining the value of constant "vowels" defined at stringextraction.ads:4, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__vowels___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Stringextraction__vowels
 use        Temp___String_Literal_154
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom vowels__def_axiom :
  ((Stringextraction__vowels.vowels ) = (Standard__string.of_array (Temp___String_Literal_154.temp___String_Literal_154 ()) 1 10))

end

(* Module for defining the value of constant "consonants" defined at stringextraction.ads:5, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__consonants___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Stringextraction__consonants
 use        Temp___String_Literal_155
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom consonants__def_axiom :
  ((Stringextraction__consonants.consonants ) = (Standard__string.of_array (Temp___String_Literal_155.temp___String_Literal_155 ()) 1 42))

end

(* Module for defining the value of constant "vowels" defined at stringextraction.adb:8, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__extract_vowels__vowels___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Stringextraction__extract_vowels__vowels
 use        Temp___String_Literal_156
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom vowels__def_axiom :
  ((Stringextraction__extract_vowels__vowels.vowels ) = (Standard__string.of_array (Temp___String_Literal_156.temp___String_Literal_156 ()) 1 22))

end

(* Module for defining the value of constant "R23b" defined at stringextraction.adb:34, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__extract_vowels__R23b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R35b" defined at stringextraction.adb:60, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__extract_consonants__R35b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "contains" defined at stringextraction.ads:31, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringextraction__contains___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__contains
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val contains 
   (given_string : Standard__string.string) (char : int) : bool
  requires {  ((Standard__string.length given_string) <= 500) }
  ensures {  ( ( (result = (Stringextraction__contains.contains given_string char)) /\ (Stringextraction__contains.contains__function_guard result given_string char) ) /\ (if ((exists j  : int.
   ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)) = char) ))) then (
   ( (result = True) <-> true )) else (
   ( (result = True) <-> false ))) ) }
 
 axiom contains__post_axiom :
  (forall given_string   : Standard__string.string.
  (forall char   : int [(Stringextraction__contains.contains given_string char)].
   ( ( ( (Standard__string___axiom.dynamic_invariant given_string True True True True) /\ (Standard__character___axiom.dynamic_invariant char True True True True) ) /\ ((Standard__string.length given_string) <= 500) ) -> (let result = (Stringextraction__contains.contains given_string char) in (
    (if ((Stringextraction__contains.contains__function_guard result given_string char)) then (
     ( ( (if ((exists j  : int.
      ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)) = char) ))) then (
      ( (result = True) <-> true )) else (
      ( (result = True) <-> false ))) /\ true ) /\ true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "extract_vowels" defined at stringextraction.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringextraction__extract_vowels___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__contains
 use        Stringextraction__extract_vowels
 use        Stringextraction__vowels
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val extract_vowels 
   (given_string : Standard__string.string) : Standard__string.string
  requires {  ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.last given_string) < 2147483647) /\ ((Standard__string.first given_string) >= 1) ) ) }
  ensures {  ( ( (result = (Stringextraction__extract_vowels.extract_vowels given_string)) /\ (Stringextraction__extract_vowels.extract_vowels__function_guard result given_string) ) /\ ( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:2875"  : int.
   ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) -> (if (( ((epsilon temp___result_159 : bool.
    ( (temp___result_159 = (Stringextraction__contains.contains Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_159 Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j))) )) = True) <-> true )) then (
    (exists k  : int.
     ( ( ((Standard__string.first result) <= k) /\ (k <= (Standard__string.last result)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j))) ))) else (
    true)) )) ) ) ) }
 
 axiom extract_vowels__post_axiom :
  (forall given_string   : Standard__string.string [(Stringextraction__extract_vowels.extract_vowels given_string)].
   ( ( (Standard__string___axiom.dynamic_invariant given_string True True True True) /\ ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.last given_string) < 2147483647) /\ ((Standard__string.first given_string) >= 1) ) ) ) -> (let result = (Stringextraction__extract_vowels.extract_vowels given_string) in (
    (if ((Stringextraction__extract_vowels.extract_vowels__function_guard result given_string)) then (
     ( ( ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:2875"  : int.
      ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) -> (if (( ((epsilon temp___result_162 : bool.
       ( (temp___result_162 = (Stringextraction__contains.contains Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_162 Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j))) )) = True) <-> true )) then (
       (exists k  : int.
        ( ( ((Standard__string.first result) <= k) /\ (k <= (Standard__string.last result)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j))) ))) else (
       true)) )) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "extract_consonants" defined at stringextraction.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringextraction__extract_consonants___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__contains
 use        Stringextraction__extract_consonants
 use        Stringextraction__consonants
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val extract_consonants 
   (given_string : Standard__string.string) : Standard__string.string
  requires {  ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.last given_string) < 2147483647) /\ ((Standard__string.first given_string) >= 1) ) ) }
  ensures {  ( ( (result = (Stringextraction__extract_consonants.extract_consonants given_string)) /\ (Stringextraction__extract_consonants.extract_consonants__function_guard result given_string) ) /\ ( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:2974"  : int.
   ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> ((epsilon temp___result_165 : bool.
    ( (temp___result_165 = (Stringextraction__contains.contains Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_165 Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j))) )) = True) )) ) ) ) }
 
 axiom extract_consonants__post_axiom :
  (forall given_string   : Standard__string.string [(Stringextraction__extract_consonants.extract_consonants given_string)].
   ( ( (Standard__string___axiom.dynamic_invariant given_string True True True True) /\ ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.last given_string) < 2147483647) /\ ((Standard__string.first given_string) >= 1) ) ) ) -> (let result = (Stringextraction__extract_consonants.extract_consonants given_string) in (
    (if ((Stringextraction__extract_consonants.extract_consonants__function_guard result given_string)) then (
     ( ( ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:2974"  : int.
      ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> ((epsilon temp___result_168 : bool.
       ( (temp___result_168 = (Stringextraction__contains.contains Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_168 Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j))) )) = True) )) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "stringextraction" defined at stringextraction.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Stringextraction__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__string___axiom
 use        Stringextraction__vowels
 use        Temp___String_Literal_154
 use        Stringextraction__consonants
 use        Temp___String_Literal_155
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__vowels___axiom
 use        Stringextraction__consonants___axiom

 let def #"stringextraction.ads" 1 0 0#"GP_Subp:stringextraction.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 1 0 0# true }
  ensures { #"stringextraction.ads" 1 0 0# true }
   =
  ( (#"stringextraction.ads" 1 0 0# ());
  (#"stringextraction.ads" 3 0 0# ());
  (#"stringextraction.ads" 4 0 0# ( #"stringextraction.ads" 4 0 0# abstract ensures {true}(let _ = (Standard__string.of_array((Temp___String_Literal_154.temp___String_Literal_154(()))) (1) (10)) in (
   ()))
   end ;
  #"stringextraction.ads" 4 0 0# assume { #"stringextraction.ads" 4 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__vowels.vowels True False True True) } ));
  (#"stringextraction.ads" 5 0 0# ( #"stringextraction.ads" 5 0 0# abstract ensures {true}(let _ = (Standard__string.of_array((Temp___String_Literal_155.temp___String_Literal_155(()))) (1) (42)) in (
   ()))
   end ;
  #"stringextraction.ads" 5 0 0# assume { #"stringextraction.ads" 5 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__consonants.consonants True False True True) } ));
  (#"stringextraction.ads" 7 0 0# ());
  (#"stringextraction.ads" 12 0 0# ());
  (#"stringextraction.ads" 12 0 0# ());
  (#"stringextraction.ads" 9 0 0# ());
  (#"stringextraction.ads" 10 0 0# ());
  (#"stringextraction.ads" 9 0 0# ());
  (#"stringextraction.ads" 18 0 0# ());
  (#"stringextraction.ads" 23 0 0# ());
  (#"stringextraction.ads" 23 0 0# ());
  (#"stringextraction.ads" 20 0 0# ());
  (#"stringextraction.ads" 21 0 0# ());
  (#"stringextraction.ads" 20 0 0# ());
  (#"stringextraction.ads" 31 0 0# ());
  (#"stringextraction.ads" 34 0 0# ());
  (#"stringextraction.ads" 33 0 0# ());
  (#"stringextraction.adb" 1 0 0# ());
  (#"stringextraction.adb" 5 0 0# ());
  (#"stringextraction.adb" 40 0 0# ());
  (#"stringextraction.adb" 66 0 0# ());
  ( "GP_Sloc:stringextraction.adb:78:1" (#"stringextraction.adb" 78 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "contains" defined at stringextraction.ads:31, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__contains__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__contains__given_string
 use        Stringextraction__contains__char
 use        Stringextraction__contains__L_3
 use        Stringextraction__contains__L_3__T39b
 use        Stringextraction__contains__L_3__j
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__contains__L_3__j___axiom
 use        Stringextraction__contains__L_3___axiom
 use        Stringextraction__contains__given_string___axiom
 use        Stringextraction__contains__char___axiom
 use        Stringextraction__contains__L_3__T39b___axiom

 val stringextraction__contains__result "model_projected" "model_trace:2994@result" "name:Contains"  : bool__ref 
 
 let def #"stringextraction.ads" 31 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:31" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 31 0 0# true }
  ensures { #"stringextraction.ads" 31 0 0# (#"stringextraction.ads" 34 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:stringextraction.ads:34:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:3" "comment:       Post => (if (for some J in Given_String'Range =>
               ^ stringextraction.ads:34:16:VC_POSTCONDITION" "GP_Shape:pragargs__if" (if ((exists j  : int.
   ( ( ((Standard__string.first Stringextraction__contains__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__contains__given_string.given_string)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__contains__given_string.given_string) j)) = Stringextraction__contains__char.char) ))) then (
   ( "GP_Pretty_Ada:3053" "GP_Sloc:stringextraction.ads:37:21" ( (stringextraction__contains__result.bool__content = True) <-> true ) )) else (
   ( "GP_Pretty_Ada:3058" "GP_Sloc:stringextraction.ads:39:21" ( (stringextraction__contains__result.bool__content = True) <-> false ) ))) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:31 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__contains__given_string.given_string True False True True) };
   assume {  (Standard__character___axiom.dynamic_invariant Stringextraction__contains__char.char True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:31 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:31 *)
  ;
   abstract ensures {true}(let _ = ((  abstract ensures {true}(let _ = Stringextraction__contains__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__contains__given_string.given_string)) ) <= 500) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:31 *)
  ;
   assume {  ((Standard__string.length Stringextraction__contains__given_string.given_string) <= 500) };
   try
   ( (#"stringextraction.adb" 66 0 0# ());
   (#"stringextraction.adb" 68 0 0# ());
   ( "GP_Sloc:stringextraction.adb:68:35" (#"stringextraction.adb" 68 0 0# (let temp___221 = ( #"stringextraction.adb" 68 0 0# abstract ensures {true}(let _ = Stringextraction__contains__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__contains__given_string.given_string)) ) in (
   (let temp___222 = ( #"stringextraction.adb" 68 0 0# abstract ensures {true}(let _ = Stringextraction__contains__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__contains__given_string.given_string)) ) in (
    ( #"stringextraction.adb" 68 0 0# Stringextraction__contains__L_3__j.j.int__content <- ( temp___221 );
    () (* Translation of an Ada loop from stringextraction.adb:68 *)
    ;
    (if ((Boolean.andb((temp___221 <= Stringextraction__contains__L_3__j.j.int__content)) ((Stringextraction__contains__L_3__j.j.int__content <= temp___222)))) then (
     #"stringextraction.adb" 68 0 0# try
      ( #"stringextraction.adb" 68 0 0# abstract ensures {true}(let _ = Stringextraction__contains__L_3__j.j.int__content in (
       ()))
       end ;
      (let temp___223 = #"stringextraction.adb" 68 0 0# (any int
      ensures {#"stringextraction.adb" 68 0 0# (result = Stringextraction__contains__L_3__j.j.int__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop stringextraction.adb:68 *)
       ;
       ( "GP_Sloc:stringextraction.adb:69:10" (#"stringextraction.adb" 69 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__contains__given_string.given_string))) (Stringextraction__contains__L_3__j.j.int__content)))) = Stringextraction__contains__char.char)) then (
        ( "GP_Sloc:stringextraction.adb:69:41" (#"stringextraction.adb" 69 0 0# ( #"stringextraction.adb" 69 0 0# stringextraction__contains__result.bool__content <- ( (Boolean.of_int(1)) );
        #"stringextraction.adb" 69 0 0# raise Return__exc )) )) else (
        ()))) );
       () (* While loop translating the Ada loop from stringextraction.adb:68 *)
       ;
        while True do
        invariant { 
         (#"stringextraction.adb" 72 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:72:13" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:1" "comment:           (for all K in Given_String'First .. J =>
            ^ stringextraction.adb:72:13:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" (forall k #"stringextraction.adb" 72 0 0#  "model" "model_trace:2719" "name:K"  : int.
          ( ( ((Standard__string.first Stringextraction__contains__given_string.given_string) <= k) /\ (k <= Stringextraction__contains__L_3__j.j.int__content) ) -> ( "GP_Pretty_Ada:2736" "GP_Sloc:stringextraction.adb:73:15" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__contains__given_string.given_string) k)) <> Stringextraction__contains__char.char) ) )) ))
         }
        ( () (* Assume implicit invariants from the loop stringextraction.adb:68 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (if (((Standard__string.first Stringextraction__contains__given_string.given_string) <= (Standard__string.last Stringextraction__contains__given_string.given_string))) then (
         (Stringextraction__contains__L_3__T39b.dynamic_property (Standard__string.first Stringextraction__contains__given_string.given_string) (Standard__string.last Stringextraction__contains__given_string.given_string) Stringextraction__contains__L_3__j.j.int__content)) else true) ) /\ true )) (( ((Standard__string.first Stringextraction__contains__given_string.given_string) <= Stringextraction__contains__L_3__j.j.int__content) /\ (Stringextraction__contains__L_3__j.j.int__content <= (Standard__string.last Stringextraction__contains__given_string.given_string)) ))) };
        () (* Check for absence of RTE in the invariant of loop stringextraction.adb:68 *)
        ;
         abstract ensures {true}(let _ = ( (let k =  (any int
        ) in (
         (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__contains__given_string.given_string in (
          ()))
          end ;
         (Standard__string.first(Stringextraction__contains__given_string.given_string)) ) <= k)) ((k <= Stringextraction__contains__L_3__j.j.int__content)))) then (
           abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__contains__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 73 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:73:28" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:              Given_String(K) /= char);
                           ^ stringextraction.adb:73:28:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__string.first Stringextraction__contains__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__contains__given_string.given_string)) ) )) };
          k ))))) <> Stringextraction__contains__char.char) in (
           ()))
           end ))))
        ;
         (any bool
        requires { true} 
        ensures { ( (result = True) <-> (forall k   "model" "model_trace:2719" "name:K"  : int.
         ( ( ((Standard__string.first Stringextraction__contains__given_string.given_string) <= k) /\ (k <= Stringextraction__contains__L_3__j.j.int__content) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__contains__given_string.given_string) k)) <> Stringextraction__contains__char.char) )) )} 
        ) ) in (
         ()))
         end ;
        () (* Loop statements appearing after the loop invariant of loop stringextraction.adb:68 *)
        ;
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop stringextraction.adb:68 *)
        ;
        (if ((Stringextraction__contains__L_3__j.j.int__content = temp___222)) then (
          raise Stringextraction__contains__L_3.L_3));
         Stringextraction__contains__L_3__j.j.int__content <- ( (Stringextraction__contains__L_3__j.j.int__content + 1) );
        ( "GP_Sloc:stringextraction.adb:69:10" (#"stringextraction.adb" 69 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__contains__given_string.given_string))) (Stringextraction__contains__L_3__j.j.int__content)))) = Stringextraction__contains__char.char)) then (
         ( "GP_Sloc:stringextraction.adb:69:41" (#"stringextraction.adb" 69 0 0# ( #"stringextraction.adb" 69 0 0# stringextraction__contains__result.bool__content <- ( (Boolean.of_int(1)) );
         #"stringextraction.adb" 69 0 0# raise Return__exc )) )) else (
         ()))) ) )
       done )))
       )
     with
      Stringextraction__contains__L_3.L_3 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:stringextraction.adb:75:7" (#"stringextraction.adb" 75 0 0# ( #"stringextraction.adb" 75 0 0# stringextraction__contains__result.bool__content <- ( (Boolean.of_int(0)) );
   #"stringextraction.adb" 75 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (if (( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__contains__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__contains__given_string.given_string)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = Stringextraction__contains__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__contains__given_string.given_string)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__contains__given_string.given_string))) ((  assert {  (#"stringextraction.ads" 35 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:35:40" "GP_Id:2" "comment:                          Given_String(J) = char)
                                       ^ stringextraction.ads:35:40:VC_INDEX_CHECK" "GP_Shape:pragargs__if__forsome__cmp__ixdcomp" ( ((Standard__string.first Stringextraction__contains__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__contains__given_string.given_string)) ) )) };
    j ))))) = Stringextraction__contains__char.char) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (exists j  : int.
   ( ( ((Standard__string.first Stringextraction__contains__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__contains__given_string.given_string)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__contains__given_string.given_string) j)) = Stringextraction__contains__char.char) )) )} 
  ) )) then (
   ((Boolean.to_int(stringextraction__contains__result.bool__content)) = (Boolean.to_int((Boolean.of_int(1)))))) else (
   ((Boolean.to_int(stringextraction__contains__result.bool__content)) = (Boolean.to_int((Boolean.of_int(0))))))) in (
   ()))
   end ;
  stringextraction__contains__result.bool__content )
end

(* Module for defining the value of the aggregate at stringextraction.adb:6, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_vowels__result__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Stringextraction__extract_vowels__T3b
 use        Stringextraction__extract_vowels__result__aggregate_def
 use        Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___226   temp___227   temp___228   : int.
   (let temp___225 = (Stringextraction__extract_vowels__result__aggregate_def.stringextraction__extract_vowels__result__aggregate_def temp___226 temp___227 temp___228) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___226 True True True True)) then (
     ( (if ((Standard__string.dynamic_property Standard__positive.first Standard__positive.last temp___227 temp___228)) then (
      ( ((Stringextraction__extract_vowels__T3b.first temp___225) = temp___227) /\ ((Stringextraction__extract_vowels__T3b.last temp___225) = temp___228) )) else true) /\ (forall temp___229   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Stringextraction__extract_vowels__T3b.to_array temp___225) temp___229)) = temp___226)) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "extract_vowels" defined at stringextraction.ads:7, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__extract_vowels__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Standard__string___axiom
 use        Stringextraction__contains
 use        Stringextraction__contains___axiom
 use        Stringextraction__vowels
 use        Temp___String_Literal_154
 use        Stringextraction__extract_vowels__given_string
 use        Stringextraction__extract_vowels__TresultS
 use        Stringextraction__extract_vowels__T3b
 use        Array__Int__Standard__character
 use        Stringextraction__extract_vowels__result
 use        Stringextraction__extract_vowels__result_index
 use        Stringextraction__extract_vowels__vowels
 use        Temp___String_Literal_156
 use        Stringextraction__extract_vowels__L_1
 use        Stringextraction__extract_vowels__L_1__T5b
 use        Stringextraction__extract_vowels__L_1__j
 use        Stringextraction__extract_vowels__R23b
 use        Stringextraction__extract_vowels__T25b
 use        Stringextraction__extract_vowels__result__aggregate_def
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__extract_vowels__result___axiom
 use        Stringextraction__extract_vowels__result__aggregate_def___axiom
 use        Stringextraction__extract_vowels__result_index___axiom
 use        Stringextraction__extract_vowels__vowels___axiom
 use        Stringextraction__extract_vowels__L_1__j___axiom
 use        Stringextraction__extract_vowels__L_1___axiom
 use        Stringextraction__vowels___axiom
 use        Stringextraction__extract_vowels__given_string___axiom
 use        Stringextraction__contains___axiom
 use        Stringextraction__extract_vowels__TresultS___axiom
 use        Stringextraction__extract_vowels__TTresultSP1___axiom
 use        Stringextraction__extract_vowels__T2b___axiom
 use        Stringextraction__extract_vowels__T3b___axiom
 use        Stringextraction__extract_vowels__L_1__T5b___axiom
 use        Stringextraction__extract_vowels__R23b___axiom
 use        Stringextraction__extract_vowels__T24b___axiom
 use        Stringextraction__extract_vowels__T25b___axiom

 val stringextraction__extract_vowels__result "model_projected" "model_trace:2817@result" "name:Extract_Vowels"  : Standard__string.string__ref 
 
 let def #"stringextraction.ads" 7 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:7" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 7 0 0# true }
  ensures { #"stringextraction.ads" 7 0 0# (#"stringextraction.ads" 12 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:stringextraction.ads:12:16" "GP_Id:25" "comment:       Post => Extract_Vowels'Result'Length <= Given_string'Length
               ^ stringextraction.ads:12:16:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( ( "GP_Pretty_Ada:3193" "GP_Sloc:stringextraction.ads:12:16" ((Standard__string.length stringextraction__extract_vowels__result.Standard__string.string__content) <= (Standard__string.length Stringextraction__extract_vowels__given_string.given_string)) ) /\ (forall j #"stringextraction.ads" 12 0 0#  "model" "name:J" "model_trace:2875"  : int.
   ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) -> (if (( ((epsilon temp___result_248 : bool.
    ( (temp___result_248 = (Stringextraction__contains.contains Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_248 Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j))) )) = True) <-> true )) then (
    (exists k  : int.
     ( ( ((Standard__string.first stringextraction__extract_vowels__result.Standard__string.string__content) <= k) /\ (k <= (Standard__string.last stringextraction__extract_vowels__result.Standard__string.string__content)) ) /\ ( "GP_Pretty_Ada:2912" "GP_Sloc:stringextraction.ads:16:28" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_vowels__result.Standard__string.string__content) k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j))) ) ))) else (
    ( "GP_Pretty_Ada:3490" "GP_Sloc:stringextraction.ads:14:21" true ))) )) ) )) }
   =
  (  assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__vowels.vowels True False True True) };
  (let temp___247 = (Standard__string.of_array (Temp___String_Literal_154.temp___String_Literal_154 ()) 1 10) in (
    assume {  (temp___247 = Stringextraction__vowels.vowels) }))
  ;
  () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:7 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__extract_vowels__given_string.given_string True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:7 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:7 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_vowels__given_string.given_string)) ) <= 500) && ( ((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
   ()))
   end ;
  (Standard__string.last(Stringextraction__extract_vowels__given_string.given_string)) ) < 2147483647) && ((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
   ()))
   end ;
  (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) >= 1) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:7 *)
  ;
   assume {  ( ((Standard__string.length Stringextraction__extract_vowels__given_string.given_string) <= 500) /\ ( ((Standard__string.last Stringextraction__extract_vowels__given_string.given_string) < 2147483647) /\ ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) >= 1) ) ) };
   try
   ( (#"stringextraction.adb" 5 0 0# ());
   (#"stringextraction.adb" 6 0 0# ( #"stringextraction.adb" 6 0 0# abstract ensures {true}(let _ = (#"stringextraction.adb" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:stringextraction.adb:6:41" "GP_Id:5" "comment:      result : String (1 .. Given_string'Length) := (others => Character'Val(0));
                                        ^ stringextraction.adb:6:41:VC_RANGE_CHECK" "GP_Shape:TresultS_def__string_ind__range__typeconv__length_ref" (Standard__integer.range_check_(( #"stringextraction.adb" 6 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.length(Stringextraction__extract_vowels__given_string.given_string)) ))) )) in (
    ()))
    end ;
   (#"stringextraction.adb" 6 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:6:7" "GP_Reason:VC_RANGE_CHECK" "GP_Id:4" "comment:      result : String (1 .. Given_string'Length) := (others => Character'Val(0));
      ^ stringextraction.adb:6:7:VC_RANGE_CHECK" #"stringextraction.adb" 6 0 0# (any unit
   requires {#"stringextraction.adb" 6 0 0# ( (1 <= (Standard__string.length Stringextraction__extract_vowels__given_string.given_string)) -> ( (1 >= Standard__positive.first) /\ ((Standard__string.length Stringextraction__extract_vowels__given_string.given_string) <= Standard__positive.last) ) )} 
   ensures {#"stringextraction.adb" 6 0 0# true} 
   ) )) ));
   (#"stringextraction.adb" 6 0 0# ( (let stringextraction__extract_vowels__result__assume = (let temp___231 = (let temp___230 = (Stringextraction__extract_vowels__result__aggregate_def.stringextraction__extract_vowels__result__aggregate_def(0) (1) ((Standard__string.length Stringextraction__extract_vowels__given_string.given_string))) in (
    ( #"stringextraction.adb" 6 0 0# assume { #"stringextraction.adb" 6 0 0# ((Stringextraction__extract_vowels__T3b.first temp___230) = 1) };
    #"stringextraction.adb" 6 0 0# assume { #"stringextraction.adb" 6 0 0# ((Stringextraction__extract_vowels__T3b.last temp___230) = (Standard__string.length Stringextraction__extract_vowels__given_string.given_string)) };
    temp___230 )))
    in (
    ( #"stringextraction.adb" 6 0 0# assert { #"stringextraction.adb" 6 0 0# (#"stringextraction.adb" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:6:53" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:6" "comment:      result : String (1 .. Given_string'Length) := (others => Character'Val(0));
                                                    ^ stringextraction.adb:6:53:VC_LENGTH_CHECK" "GP_Shape:result_decl__aggr" ((if (((Stringextraction__extract_vowels__T3b.first(temp___231)) <= (Stringextraction__extract_vowels__T3b.last(temp___231)))) then (
     (((Stringextraction__extract_vowels__T3b.last(temp___231)) - (Stringextraction__extract_vowels__T3b.first(temp___231))) + 1)) else (
     0)) = (if ((1 <= (Standard__string.length Stringextraction__extract_vowels__given_string.given_string))) then (
     (((Standard__string.length Stringextraction__extract_vowels__given_string.given_string) - 1) + 1)) else (
     0))) )) };
    (Stringextraction__extract_vowels__TresultS.of_array((Stringextraction__extract_vowels__T3b.to_array(temp___231))) ((Stringextraction__extract_vowels__T3b.first(temp___231))) ((Stringextraction__extract_vowels__T3b.last(temp___231)))) )))
    in (
    (  Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content <- ( (Stringextraction__extract_vowels__TresultS.to_array(stringextraction__extract_vowels__result__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____first)) = (Stringextraction__extract_vowels__TresultS.first(stringextraction__extract_vowels__result__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____last)) = (Stringextraction__extract_vowels__TresultS.last(stringextraction__extract_vowels__result__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Stringextraction__extract_vowels__TresultS.dynamic_property 1 (Standard__string.length Stringextraction__extract_vowels__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) = 1) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last) = (Standard__string.length Stringextraction__extract_vowels__given_string.given_string)) ) ))) } ));
   (#"stringextraction.adb" 7 0 0# ( #"stringextraction.adb" 7 0 0# Stringextraction__extract_vowels__result_index.result_index.int__content <- ( 0 );
   #"stringextraction.adb" 7 0 0# assume { #"stringextraction.adb" 7 0 0# (Standard__natural___axiom.dynamic_invariant Stringextraction__extract_vowels__result_index.result_index.int__content True False True True) } ));
   (#"stringextraction.adb" 8 0 0# ( #"stringextraction.adb" 8 0 0# abstract ensures {true}(let _ = (Standard__string.of_array((Temp___String_Literal_156.temp___String_Literal_156(()))) (1) (22)) in (
    ()))
    end ;
   #"stringextraction.adb" 8 0 0# assume { #"stringextraction.adb" 8 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__extract_vowels__vowels.vowels True False True True) } ));
   (#"stringextraction.adb" 10 0 0# ());
   ( "GP_Sloc:stringextraction.adb:10:35" (#"stringextraction.adb" 10 0 0# (let temp___233 = ( #"stringextraction.adb" 10 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) in (
   (let temp___234 = ( #"stringextraction.adb" 10 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_vowels__given_string.given_string)) ) in (
    ( #"stringextraction.adb" 10 0 0# Stringextraction__extract_vowels__L_1__j.j.int__content <- ( temp___233 );
    () (* Translation of an Ada loop from stringextraction.adb:10 *)
    ;
    (if ((Boolean.andb((temp___233 <= Stringextraction__extract_vowels__L_1__j.j.int__content)) ((Stringextraction__extract_vowels__L_1__j.j.int__content <= temp___234)))) then (
     #"stringextraction.adb" 10 0 0# try
      ( #"stringextraction.adb" 10 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
       ()))
       end ;
      (let temp___238 = #"stringextraction.adb" 10 0 0# (any Array__Int__Standard__character.map
      ensures {#"stringextraction.adb" 10 0 0# (result = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content)} 
      ) in (
       ( #"stringextraction.adb" 10 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__L_1__j.j.int__content in (
        ()))
        end ;
       (let temp___236 = #"stringextraction.adb" 10 0 0# (any int
       ensures {#"stringextraction.adb" 10 0 0# (result = Stringextraction__extract_vowels__L_1__j.j.int__content)} 
       ) in (
        ( #"stringextraction.adb" 10 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result_index.result_index.int__content in (
         ()))
         end ;
        (let temp___235 = #"stringextraction.adb" 10 0 0# (any int
        ensures {#"stringextraction.adb" 10 0 0# (result = Stringextraction__extract_vowels__result_index.result_index.int__content)} 
        ) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop stringextraction.adb:10 *)
         ;
         ( "GP_Sloc:stringextraction.adb:12:13" (#"stringextraction.adb" 12 0 0# ()) );
         ( "GP_Sloc:stringextraction.adb:12:10" (#"stringextraction.adb" 12 0 0# (if (((Boolean.to_int((#"stringextraction.adb" 12 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:12:13" "GP_Reason:VC_PRECONDITION" "GP_Id:9" "comment:         if Contains(vowels, Given_String(J)) = True then
            ^ stringextraction.adb:12:13:VC_PRECONDITION" "GP_Shape:L_1_while__if__cmp__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__extract_vowels__vowels.vowels) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_1__j.j.int__content)))))) )))) = (Boolean.to_int((Boolean.of_int(1)))))) then (
          ( ( "GP_Sloc:stringextraction.adb:13:16" (#"stringextraction.adb" 13 0 0# ()) );
          ( "GP_Sloc:stringextraction.adb:13:31" (#"stringextraction.adb" 13 0 0# ()) );
          ( "GP_Sloc:stringextraction.adb:13:13" (#"stringextraction.adb" 13 0 0# (if ((Stringextraction__extract_vowels__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 13 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          Stringextraction__extract_vowels__result.result____last ))))) then (
           ( ( "GP_Sloc:stringextraction.adb:14:16" (#"stringextraction.adb" 14 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:14:32" (#"stringextraction.adb" 14 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:14:29" (#"stringextraction.adb" 14 0 0# #"stringextraction.adb" 14 0 0# Stringextraction__extract_vowels__result_index.result_index.int__content <- ( (#"stringextraction.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:14:45" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:7" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:14:45:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_vowels__result_index.result_index.int__content + 1))) )) )) );
           ( "GP_Sloc:stringextraction.adb:15:16" (#"stringextraction.adb" 15 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:15:23" (#"stringextraction.adb" 15 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:15:37" (#"stringextraction.adb" 15 0 0# #"stringextraction.adb" 15 0 0# Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 15 0 0# assert { #"stringextraction.adb" 15 0 0# (#"stringextraction.adb" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:15:23" "GP_Id:8" "comment:               result(result_index) := Given_String(J);
                      ^ stringextraction.adb:15:23:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__result_index.result_index.int__content) /\ (Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
           Stringextraction__extract_vowels__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_1__j.j.int__content)))))))) )) ) )) else (
           ()))) ) )) else (
          ()))) );
         () (* While loop translating the Ada loop from stringextraction.adb:10 *)
         ;
          while True do
          invariant { 
           (#"stringextraction.adb" 21 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:21:32" "GP_Id:10" "comment:         pragma Loop_Invariant(result_index in 0 .. result'Last);
                               ^ stringextraction.adb:21:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__in" ( "GP_Pretty_Ada:2417" "GP_Sloc:stringextraction.adb:21:32" ( (0 <= Stringextraction__extract_vowels__result_index.result_index.int__content) /\ (Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) ) ))
           }
          invariant { 
           (#"stringextraction.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:22:32" "GP_Id:11" "comment:         pragma Loop_Invariant(result_index <= J);
                               ^ stringextraction.adb:22:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__cmp" ( "GP_Pretty_Ada:2427" "GP_Sloc:stringextraction.adb:22:32" (Stringextraction__extract_vowels__result_index.result_index.int__content <= Stringextraction__extract_vowels__L_1__j.j.int__content) ) ))
           }
          invariant { 
           (#"stringextraction.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:23:32" "GP_Id:14" "comment:         pragma Loop_Invariant(for all K in result'First .. result_index =>
                               ^ stringextraction.adb:23:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall k #"stringextraction.adb" 23 0 0#  "model" "name:K" "model_trace:2432"  : int.
            ( ( (1 <= k) /\ (k <= Stringextraction__extract_vowels__result_index.result_index.int__content) ) -> ( "GP_Sloc:stringextraction.adb:24:34" "GP_Pretty_Ada:2452" ( ((epsilon temp___result_241 : bool.
             ( (temp___result_241 = (Stringextraction__contains.contains Stringextraction__extract_vowels__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)))) /\ (Stringextraction__contains.contains__function_guard temp___result_241 Stringextraction__extract_vowels__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k))) )) = True) <-> true ) ) )) ))
           }
          invariant { 
           (#"stringextraction.adb" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" "GP_Sloc:stringextraction.adb:25:32" "GP_Id:19" "comment:         pragma Loop_Invariant(for all K in Given_string'First .. J =>
                               ^ stringextraction.adb:25:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 25 0 0#  "model" "name:K" "model_trace:2457"  : int.
            ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= Stringextraction__extract_vowels__L_1__j.j.int__content) ) -> (if ((exists l  : int.
             ( ( ((Standard__string.first Stringextraction__extract_vowels__vowels.vowels) <= l) /\ (l <= (Standard__string.last Stringextraction__extract_vowels__vowels.vowels)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__vowels.vowels) l)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k))) ))) then (
             (exists m  : int.
              ( ( (1 <= m) /\ (m <= Stringextraction__extract_vowels__result_index.result_index.int__content) ) /\ ( "GP_Pretty_Ada:2506" "GP_Sloc:stringextraction.adb:30:43" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content m)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k))) ) ))) else (
             ( "GP_Pretty_Ada:3964" "GP_Sloc:stringextraction.adb:26:36" true ))) )) ))
           }
          ( () (* Assume implicit invariants from the loop stringextraction.adb:10 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant Stringextraction__extract_vowels__result_index.result_index.int__content False True True True) ) /\ true ) /\ (if (((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string))) then (
           (Stringextraction__extract_vowels__L_1__T5b.dynamic_property (Standard__string.first Stringextraction__extract_vowels__given_string.given_string) (Standard__string.last Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_1__j.j.int__content)) else true) ) /\ true ) /\ (if (True) then (
           true) else (
           ( (Stringextraction__extract_vowels__TresultS.dynamic_property 1 (Standard__string.length Stringextraction__extract_vowels__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) = 1) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last) = (Standard__string.length Stringextraction__extract_vowels__given_string.given_string)) ) ))) ) /\ true )) (( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= Stringextraction__extract_vowels__L_1__j.j.int__content) /\ (Stringextraction__extract_vowels__L_1__j.j.int__content <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ))) };
          () (* Check for absence of RTE in the invariant of loop stringextraction.adb:10 *)
          ;
           abstract ensures {true}(let _ = (Boolean.andb((0 <= Stringextraction__extract_vowels__result_index.result_index.int__content)) ((Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          Stringextraction__extract_vowels__result.result____last )))))) in (
           ()))
           end ;
           abstract ensures {true}(let _ = (Stringextraction__extract_vowels__result_index.result_index.int__content <= Stringextraction__extract_vowels__L_1__j.j.int__content) in (
           ()))
           end ;
           abstract ensures {true}(let _ = ( (let k =  (any int
          ) in (
           (if ((Boolean.andb((1 <= k)) ((k <= Stringextraction__extract_vowels__result_index.result_index.int__content)))) then (
             abstract ensures {true}(let _ = ((Boolean.to_int((#"stringextraction.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:stringextraction.adb:24:34" "GP_Id:13" "comment:                                 Contains(vowels, result(K)) = True);
                                 ^ stringextraction.adb:24:34:VC_PRECONDITION" "GP_Shape:L_1_while__pragargs__forall__cmp__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__extract_vowels__vowels.vowels) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 24 0 0# assert { #"stringextraction.adb" 24 0 0# (#"stringextraction.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:24:58" "GP_Id:12" "comment:                                 Contains(vowels, result(K)) = True);
                                                         ^ stringextraction.adb:24:58:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__call_contains__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
            k ))))))) )))) = (Boolean.to_int((Boolean.of_int(1))))) in (
             ()))
             end ))))
          ;
           (any bool
          requires { true} 
          ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2432"  : int.
           ( ( (1 <= k) /\ (k <= Stringextraction__extract_vowels__result_index.result_index.int__content) ) -> ( ((epsilon temp___result_240 : bool.
            ( (temp___result_240 = (Stringextraction__contains.contains Stringextraction__extract_vowels__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)))) /\ (Stringextraction__contains.contains__function_guard temp___result_240 Stringextraction__extract_vowels__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k))) )) = True) <-> true ) )) )} 
          ) ) in (
           ()))
           end ;
           abstract ensures {true}(let _ = ( (let k =  (any int
          ) in (
           (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
            ()))
            end ;
           (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) <= k)) ((k <= Stringextraction__extract_vowels__L_1__j.j.int__content)))) then (
             abstract ensures {true}(let _ = (if (( (let l =  (any int
            ) in (
             (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__vowels.vowels in (
              ()))
              end ;
             (Standard__string.first(Stringextraction__extract_vowels__vowels.vowels)) ) <= l)) ((l <= (  abstract ensures {true}(let _ = Stringextraction__extract_vowels__vowels.vowels in (
              ()))
              end ;
             (Standard__string.last(Stringextraction__extract_vowels__vowels.vowels)) ))))) then (
               abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__vowels.vowels))) ((  assert {  (#"stringextraction.adb" 27 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__forsome__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:27:48" "GP_Id:17" "comment:                                        vowels(L) = Given_string(K))
                                               ^ stringextraction.adb:27:48:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__vowels.vowels) <= l) /\ (l <= (Standard__string.last Stringextraction__extract_vowels__vowels.vowels)) ) )) };
              l ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 27 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__forsome__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:27:66" "GP_Id:18" "comment:                                        vowels(L) = Given_string(K))
                                                                 ^ stringextraction.adb:27:66:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
              k )))))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (exists l  : int.
             ( ( ((Standard__string.first Stringextraction__extract_vowels__vowels.vowels) <= l) /\ (l <= (Standard__string.last Stringextraction__extract_vowels__vowels.vowels)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__vowels.vowels) l)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k))) )) )} 
            ) )) then (
             ( (let m =  (any int
             ) in (
              (if ((Boolean.andb((1 <= m)) ((m <= Stringextraction__extract_vowels__result_index.result_index.int__content)))) then (
                abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:30:50" "GP_Id:15" "comment:                                          result(M) = Given_string(K))));
                                                 ^ stringextraction.adb:30:50:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__forsome__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= m) /\ (m <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
               m ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__forsome__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:30:68" "GP_Id:16" "comment:                                          result(M) = Given_string(K))));
                                                                   ^ stringextraction.adb:30:68:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
               k )))))) in (
                ()))
                end ))))
             ;
              (any bool
             requires { true} 
             ensures { ( (result = True) <-> (exists m  : int.
              ( ( (1 <= m) /\ (m <= Stringextraction__extract_vowels__result_index.result_index.int__content) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content m)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k))) )) )} 
             ) )) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ))))
          ;
           (any bool
          requires { true} 
          ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2457"  : int.
           ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= Stringextraction__extract_vowels__L_1__j.j.int__content) ) -> (if ((exists l  : int.
            ( ( ((Standard__string.first Stringextraction__extract_vowels__vowels.vowels) <= l) /\ (l <= (Standard__string.last Stringextraction__extract_vowels__vowels.vowels)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__vowels.vowels) l)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k))) ))) then (
            (exists m  : int.
             ( ( (1 <= m) /\ (m <= Stringextraction__extract_vowels__result_index.result_index.int__content) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content m)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k))) ))) else (
            true)) )) )} 
          ) ) in (
           ()))
           end ;
          () (* Loop statements appearing after the loop invariant of loop stringextraction.adb:10 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop stringextraction.adb:10 *)
          ;
          (if ((Stringextraction__extract_vowels__L_1__j.j.int__content = temp___234)) then (
            raise Stringextraction__extract_vowels__L_1.L_1));
           Stringextraction__extract_vowels__L_1__j.j.int__content <- ( (Stringextraction__extract_vowels__L_1__j.j.int__content + 1) );
          ( "GP_Sloc:stringextraction.adb:12:13" (#"stringextraction.adb" 12 0 0# ()) );
          ( "GP_Sloc:stringextraction.adb:12:10" (#"stringextraction.adb" 12 0 0# (if (((Boolean.to_int((#"stringextraction.adb" 12 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:12:13" "GP_Reason:VC_PRECONDITION" "GP_Id:9" "comment:         if Contains(vowels, Given_String(J)) = True then
            ^ stringextraction.adb:12:13:VC_PRECONDITION" "GP_Shape:L_1_while__if__cmp__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__extract_vowels__vowels.vowels) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_1__j.j.int__content)))))) )))) = (Boolean.to_int((Boolean.of_int(1)))))) then (
           ( ( "GP_Sloc:stringextraction.adb:13:16" (#"stringextraction.adb" 13 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:13:31" (#"stringextraction.adb" 13 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:13:13" (#"stringextraction.adb" 13 0 0# (if ((Stringextraction__extract_vowels__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 13 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
            ()))
            end ;
           Stringextraction__extract_vowels__result.result____last ))))) then (
            ( ( "GP_Sloc:stringextraction.adb:14:16" (#"stringextraction.adb" 14 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:14:32" (#"stringextraction.adb" 14 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:14:29" (#"stringextraction.adb" 14 0 0# #"stringextraction.adb" 14 0 0# Stringextraction__extract_vowels__result_index.result_index.int__content <- ( (#"stringextraction.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:14:45" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:7" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:14:45:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_vowels__result_index.result_index.int__content + 1))) )) )) );
            ( "GP_Sloc:stringextraction.adb:15:16" (#"stringextraction.adb" 15 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:15:23" (#"stringextraction.adb" 15 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:15:37" (#"stringextraction.adb" 15 0 0# #"stringextraction.adb" 15 0 0# Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 15 0 0# assert { #"stringextraction.adb" 15 0 0# (#"stringextraction.adb" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:15:23" "GP_Id:8" "comment:               result(result_index) := Given_String(J);
                      ^ stringextraction.adb:15:23:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__result_index.result_index.int__content) /\ (Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
            Stringextraction__extract_vowels__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_1__j.j.int__content)))))))) )) ) )) else (
            ()))) ) )) else (
           ()))) ) )
         done )))
         )))
        )))
       )
     with
      Stringextraction__extract_vowels__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:stringextraction.adb:34:14" (#"stringextraction.adb" 34 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:34:21" (#"stringextraction.adb" 34 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:34:37" (#"stringextraction.adb" 34 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:34:37" (#"stringextraction.adb" 34 0 0# (#"stringextraction.adb" 34 0 0# ( (let stringextraction__extract_vowels__R23b__assume = Stringextraction__extract_vowels__result_index.result_index.int__content in (
    #"stringextraction.adb" 34 0 0# assume { #"stringextraction.adb" 34 0 0# (stringextraction__extract_vowels__R23b__assume = Stringextraction__extract_vowels__R23b.r23b) }))
   ;
   #"stringextraction.adb" 34 0 0# assume { #"stringextraction.adb" 34 0 0# (Standard__natural___axiom.dynamic_invariant Stringextraction__extract_vowels__R23b.r23b True False True True) } ))) );
   ( "GP_Sloc:stringextraction.adb:34:7" (#"stringextraction.adb" 34 0 0# ( #"stringextraction.adb" 34 0 0# stringextraction__extract_vowels__result.Standard__string.string__content <- ( (let temp___243 = (let temp___242 = 1 in (
    (Stringextraction__extract_vowels__T25b.of_array(( #"stringextraction.adb" 34 0 0# assert { #"stringextraction.adb" 34 0 0# (#"stringextraction.adb" 34 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:stringextraction.adb:34:14" "GP_Id:20" "comment:      return result(result'First .. result_index);
             ^ stringextraction.adb:34:14:VC_RANGE_CHECK" "GP_Shape:return__slice" ( (temp___242 <= Stringextraction__extract_vowels__R23b.r23b) -> ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= temp___242) /\ (temp___242 <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__R23b.r23b) /\ (Stringextraction__extract_vowels__R23b.r23b <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) ) ) )) };
    Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content )) (temp___242) (Stringextraction__extract_vowels__R23b.r23b))))
    in (
    (Standard__string.of_array((Stringextraction__extract_vowels__T25b.to_array(temp___243))) ((Stringextraction__extract_vowels__T25b.first(temp___243))) ((Stringextraction__extract_vowels__T25b.last(temp___243))))))
    );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = stringextraction__extract_vowels__result.Standard__string.string__content in (
   ()))
   end ;
  (Standard__string.length(stringextraction__extract_vowels__result.Standard__string.string__content)) ) <= (  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_vowels__given_string.given_string)) )) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_vowels__given_string.given_string)) ))))) then (
     abstract ensures {true}(let _ = (if (((Boolean.to_int((#"stringextraction.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:stringextraction.ads:14:24" "GP_Id:24" "comment:                   (if Contains(vowels, Given_string(J)) = True then
                       ^ stringextraction.ads:14:24:VC_PRECONDITION" "GP_Shape:pragargs__forall__if__cmp__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__vowels.vowels) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (( #"stringextraction.ads" 14 0 0# assert { #"stringextraction.ads" 14 0 0# (#"stringextraction.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:14:54" "GP_Id:23" "comment:                   (if Contains(vowels, Given_string(J)) = True then
                                                     ^ stringextraction.ads:14:54:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__cmp__call_contains__ixdcomp" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
    j ))))))) )))) = (Boolean.to_int((Boolean.of_int(1)))))) then (
     ( (let k =  (any int
     ) in (
      (if ((Boolean.andb(((  abstract ensures {true}(let _ = stringextraction__extract_vowels__result.Standard__string.string__content in (
       ()))
       end ;
      (Standard__string.first(stringextraction__extract_vowels__result.Standard__string.string__content)) ) <= k)) ((k <= (  abstract ensures {true}(let _ = stringextraction__extract_vowels__result.Standard__string.string__content in (
       ()))
       end ;
      (Standard__string.last(stringextraction__extract_vowels__result.Standard__string.string__content)) ))))) then (
        abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(stringextraction__extract_vowels__result.Standard__string.string__content))) ((  assert {  (#"stringextraction.ads" 16 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:16:50" "GP_Id:21" "comment:                           Extract_Vowels'Result(K) = Given_string(J))));
                                                 ^ stringextraction.ads:16:50:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__forsome__cmp__ixdcomp" ( ((Standard__string.first stringextraction__extract_vowels__result.Standard__string.string__content) <= k) /\ (k <= (Standard__string.last stringextraction__extract_vowels__result.Standard__string.string__content)) ) )) };
       k ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.ads" 16 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__forsome__cmp__ixdcomp" "GP_Sloc:stringextraction.ads:16:68" "GP_Id:22" "comment:                           Extract_Vowels'Result(K) = Given_string(J))));
                                                                   ^ stringextraction.ads:16:68:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
       j )))))) in (
        ()))
        end ))))
     ;
      (any bool
     requires { true} 
     ensures { ( (result = True) <-> (exists k  : int.
      ( ( ((Standard__string.first stringextraction__extract_vowels__result.Standard__string.string__content) <= k) /\ (k <= (Standard__string.last stringextraction__extract_vowels__result.Standard__string.string__content)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_vowels__result.Standard__string.string__content) k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j))) )) )} 
     ) )) else (
     (Boolean.of_int(1)))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2875"  : int.
   ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) -> (if (( ((epsilon temp___result_245 : bool.
    ( (temp___result_245 = (Stringextraction__contains.contains Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_245 Stringextraction__vowels.vowels (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j))) )) = True) <-> true )) then (
    (exists k  : int.
     ( ( ((Standard__string.first stringextraction__extract_vowels__result.Standard__string.string__content) <= k) /\ (k <= (Standard__string.last stringextraction__extract_vowels__result.Standard__string.string__content)) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_vowels__result.Standard__string.string__content) k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j))) ))) else (
    true)) )) )} 
  ) ) ) in (
   ()))
   end ;
  stringextraction__extract_vowels__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at stringextraction.adb:41, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_consonants__result__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Stringextraction__extract_consonants__T28b
 use        Stringextraction__extract_consonants__result__aggregate_def
 use        Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___250   temp___251   temp___252   : int.
   (let temp___249 = (Stringextraction__extract_consonants__result__aggregate_def.stringextraction__extract_consonants__result__aggregate_def temp___250 temp___251 temp___252) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___250 True True True True)) then (
     ( (if ((Standard__string.dynamic_property Standard__positive.first Standard__positive.last temp___251 temp___252)) then (
      ( ((Stringextraction__extract_consonants__T28b.first temp___249) = temp___251) /\ ((Stringextraction__extract_consonants__T28b.last temp___249) = temp___252) )) else true) /\ (forall temp___253   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Stringextraction__extract_consonants__T28b.to_array temp___249) temp___253)) = temp___250)) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "extract_consonants" defined at stringextraction.ads:18, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__extract_consonants__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__natural___axiom
 use        Standard__positive
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Standard__string___axiom
 use        Stringextraction__contains
 use        Stringextraction__contains___axiom
 use        Stringextraction__consonants
 use        Temp___String_Literal_155
 use        Stringextraction__extract_consonants__given_string
 use        Stringextraction__extract_consonants__TresultS
 use        Stringextraction__extract_consonants__T28b
 use        Array__Int__Standard__character
 use        Stringextraction__extract_consonants__result
 use        Stringextraction__extract_consonants__result_index
 use        Stringextraction__extract_consonants__L_2
 use        Stringextraction__extract_consonants__L_2__T29b
 use        Stringextraction__extract_consonants__L_2__j
 use        Stringextraction__extract_consonants__R35b
 use        Stringextraction__extract_consonants__T37b
 use        Stringextraction__extract_consonants__result__aggregate_def
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__natural___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__extract_consonants__result___axiom
 use        Stringextraction__extract_consonants__result__aggregate_def___axiom
 use        Stringextraction__extract_consonants__result_index___axiom
 use        Stringextraction__extract_consonants__L_2__j___axiom
 use        Stringextraction__extract_consonants__L_2___axiom
 use        Stringextraction__consonants___axiom
 use        Stringextraction__extract_consonants__given_string___axiom
 use        Stringextraction__contains___axiom
 use        Stringextraction__extract_consonants__TresultS___axiom
 use        Stringextraction__extract_consonants__TTresultSP1___axiom
 use        Stringextraction__extract_consonants__T27b___axiom
 use        Stringextraction__extract_consonants__T28b___axiom
 use        Stringextraction__extract_consonants__L_2__T29b___axiom
 use        Stringextraction__extract_consonants__R35b___axiom
 use        Stringextraction__extract_consonants__T36b___axiom
 use        Stringextraction__extract_consonants__T37b___axiom

 val stringextraction__extract_consonants__result "model_projected" "model_trace:2916@result" "name:Extract_Consonants"  : Standard__string.string__ref 
 
 let def #"stringextraction.ads" 18 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:18" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 18 0 0# true }
  ensures { #"stringextraction.ads" 18 0 0# (#"stringextraction.ads" 23 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:stringextraction.ads:23:16" "GP_Id:40" "comment:       Post => Extract_Consonants'Result'Length <= Given_string'Length
               ^ stringextraction.ads:23:16:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:3331" "GP_Sloc:stringextraction.ads:23:16" ((Standard__string.length stringextraction__extract_consonants__result.Standard__string.string__content) <= (Standard__string.length Stringextraction__extract_consonants__given_string.given_string)) ) /\ (forall j #"stringextraction.ads" 23 0 0#  "model" "name:J" "model_trace:2974"  : int.
   ( ( ((Standard__string.first stringextraction__extract_consonants__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_consonants__result.Standard__string.string__content)) ) -> ( "GP_Sloc:stringextraction.ads:25:1" "GP_Pretty_Ada:2993" ((epsilon temp___result_272 : bool.
    ( (temp___result_272 = (Stringextraction__contains.contains Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_272 Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j))) )) = True) ) )) ) )) }
   =
  (  assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__consonants.consonants True False True True) };
  (let temp___271 = (Standard__string.of_array (Temp___String_Literal_155.temp___String_Literal_155 ()) 1 42) in (
    assume {  (temp___271 = Stringextraction__consonants.consonants) }))
  ;
  () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:18 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__extract_consonants__given_string.given_string True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:18 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:18 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_consonants__given_string.given_string)) ) <= 500) && ( ((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
   ()))
   end ;
  (Standard__string.last(Stringextraction__extract_consonants__given_string.given_string)) ) < 2147483647) && ((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
   ()))
   end ;
  (Standard__string.first(Stringextraction__extract_consonants__given_string.given_string)) ) >= 1) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:18 *)
  ;
   assume {  ( ((Standard__string.length Stringextraction__extract_consonants__given_string.given_string) <= 500) /\ ( ((Standard__string.last Stringextraction__extract_consonants__given_string.given_string) < 2147483647) /\ ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) >= 1) ) ) };
   try
   ( (#"stringextraction.adb" 40 0 0# ());
   (#"stringextraction.adb" 41 0 0# ( #"stringextraction.adb" 41 0 0# abstract ensures {true}(let _ = (#"stringextraction.adb" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:TresultS_def__string_ind__range__typeconv__length_ref" "GP_Sloc:stringextraction.adb:41:41" "GP_Id:27" "comment:      result : String (1 .. Given_string'Length) := (others => Character'Val(0));
                                        ^ stringextraction.adb:41:41:VC_RANGE_CHECK" (Standard__integer.range_check_(( #"stringextraction.adb" 41 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.length(Stringextraction__extract_consonants__given_string.given_string)) ))) )) in (
    ()))
    end ;
   (#"stringextraction.adb" 41 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:stringextraction.adb:41:7" "GP_Id:26" "comment:      result : String (1 .. Given_string'Length) := (others => Character'Val(0));
      ^ stringextraction.adb:41:7:VC_RANGE_CHECK" #"stringextraction.adb" 41 0 0# (any unit
   requires {#"stringextraction.adb" 41 0 0# ( (1 <= (Standard__string.length Stringextraction__extract_consonants__given_string.given_string)) -> ( (1 >= Standard__positive.first) /\ ((Standard__string.length Stringextraction__extract_consonants__given_string.given_string) <= Standard__positive.last) ) )} 
   ensures {#"stringextraction.adb" 41 0 0# true} 
   ) )) ));
   (#"stringextraction.adb" 41 0 0# ( (let stringextraction__extract_consonants__result__assume = (let temp___255 = (let temp___254 = (Stringextraction__extract_consonants__result__aggregate_def.stringextraction__extract_consonants__result__aggregate_def(0) (1) ((Standard__string.length Stringextraction__extract_consonants__given_string.given_string))) in (
    ( #"stringextraction.adb" 41 0 0# assume { #"stringextraction.adb" 41 0 0# ((Stringextraction__extract_consonants__T28b.first temp___254) = 1) };
    #"stringextraction.adb" 41 0 0# assume { #"stringextraction.adb" 41 0 0# ((Stringextraction__extract_consonants__T28b.last temp___254) = (Standard__string.length Stringextraction__extract_consonants__given_string.given_string)) };
    temp___254 )))
    in (
    ( #"stringextraction.adb" 41 0 0# assert { #"stringextraction.adb" 41 0 0# (#"stringextraction.adb" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Shape:result_decl__aggr" "GP_Sloc:stringextraction.adb:41:53" "GP_Id:28" "comment:      result : String (1 .. Given_string'Length) := (others => Character'Val(0));
                                                    ^ stringextraction.adb:41:53:VC_LENGTH_CHECK" ((if (((Stringextraction__extract_consonants__T28b.first(temp___255)) <= (Stringextraction__extract_consonants__T28b.last(temp___255)))) then (
     (((Stringextraction__extract_consonants__T28b.last(temp___255)) - (Stringextraction__extract_consonants__T28b.first(temp___255))) + 1)) else (
     0)) = (if ((1 <= (Standard__string.length Stringextraction__extract_consonants__given_string.given_string))) then (
     (((Standard__string.length Stringextraction__extract_consonants__given_string.given_string) - 1) + 1)) else (
     0))) )) };
    (Stringextraction__extract_consonants__TresultS.of_array((Stringextraction__extract_consonants__T28b.to_array(temp___255))) ((Stringextraction__extract_consonants__T28b.first(temp___255))) ((Stringextraction__extract_consonants__T28b.last(temp___255)))) )))
    in (
    (  Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content <- ( (Stringextraction__extract_consonants__TresultS.to_array(stringextraction__extract_consonants__result__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____first)) = (Stringextraction__extract_consonants__TresultS.first(stringextraction__extract_consonants__result__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____last)) = (Stringextraction__extract_consonants__TresultS.last(stringextraction__extract_consonants__result__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Stringextraction__extract_consonants__TresultS.dynamic_property 1 (Standard__string.length Stringextraction__extract_consonants__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) = 1) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last) = (Standard__string.length Stringextraction__extract_consonants__given_string.given_string)) ) ))) } ));
   (#"stringextraction.adb" 42 0 0# ( #"stringextraction.adb" 42 0 0# Stringextraction__extract_consonants__result_index.result_index.int__content <- ( 0 );
   #"stringextraction.adb" 42 0 0# assume { #"stringextraction.adb" 42 0 0# (Standard__natural___axiom.dynamic_invariant Stringextraction__extract_consonants__result_index.result_index.int__content True False True True) } ));
   (#"stringextraction.adb" 44 0 0# ());
   ( "GP_Sloc:stringextraction.adb:44:35" (#"stringextraction.adb" 44 0 0# (let temp___257 = ( #"stringextraction.adb" 44 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_consonants__given_string.given_string)) ) in (
   (let temp___258 = ( #"stringextraction.adb" 44 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_consonants__given_string.given_string)) ) in (
    ( #"stringextraction.adb" 44 0 0# Stringextraction__extract_consonants__L_2__j.j.int__content <- ( temp___257 );
    () (* Translation of an Ada loop from stringextraction.adb:44 *)
    ;
    (if ((Boolean.andb((temp___257 <= Stringextraction__extract_consonants__L_2__j.j.int__content)) ((Stringextraction__extract_consonants__L_2__j.j.int__content <= temp___258)))) then (
     #"stringextraction.adb" 44 0 0# try
      ( #"stringextraction.adb" 44 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
       ()))
       end ;
      (let temp___262 = #"stringextraction.adb" 44 0 0# (any Array__Int__Standard__character.map
      ensures {#"stringextraction.adb" 44 0 0# (result = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content)} 
      ) in (
       ( #"stringextraction.adb" 44 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__L_2__j.j.int__content in (
        ()))
        end ;
       (let temp___260 = #"stringextraction.adb" 44 0 0# (any int
       ensures {#"stringextraction.adb" 44 0 0# (result = Stringextraction__extract_consonants__L_2__j.j.int__content)} 
       ) in (
        ( #"stringextraction.adb" 44 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result_index.result_index.int__content in (
         ()))
         end ;
        (let temp___259 = #"stringextraction.adb" 44 0 0# (any int
        ensures {#"stringextraction.adb" 44 0 0# (result = Stringextraction__extract_consonants__result_index.result_index.int__content)} 
        ) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop stringextraction.adb:44 *)
         ;
         ( "GP_Sloc:stringextraction.adb:46:13" (#"stringextraction.adb" 46 0 0# ()) );
         ( "GP_Sloc:stringextraction.adb:46:10" (#"stringextraction.adb" 46 0 0# (if ((#"stringextraction.adb" 46 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:stringextraction.adb:46:13" "GP_Id:31" "comment:         if Contains(consonants, Given_String(J)) then
            ^ stringextraction.adb:46:13:VC_PRECONDITION" "GP_Shape:L_2_while__if__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__consonants.consonants) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_2__j.j.int__content)))))) ))) then (
          ( ( "GP_Sloc:stringextraction.adb:47:16" (#"stringextraction.adb" 47 0 0# ()) );
          ( "GP_Sloc:stringextraction.adb:47:31" (#"stringextraction.adb" 47 0 0# ()) );
          ( "GP_Sloc:stringextraction.adb:47:13" (#"stringextraction.adb" 47 0 0# (if ((Stringextraction__extract_consonants__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 47 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          Stringextraction__extract_consonants__result.result____last ))))) then (
           ( ( "GP_Sloc:stringextraction.adb:48:16" (#"stringextraction.adb" 48 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:48:32" (#"stringextraction.adb" 48 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:48:29" (#"stringextraction.adb" 48 0 0# #"stringextraction.adb" 48 0 0# Stringextraction__extract_consonants__result_index.result_index.int__content <- ( (#"stringextraction.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:stringextraction.adb:48:45" "GP_Id:29" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:48:45:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_consonants__result_index.result_index.int__content + 1))) )) )) );
           ( "GP_Sloc:stringextraction.adb:49:16" (#"stringextraction.adb" 49 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:49:23" (#"stringextraction.adb" 49 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:49:37" (#"stringextraction.adb" 49 0 0# #"stringextraction.adb" 49 0 0# Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 49 0 0# assert { #"stringextraction.adb" 49 0 0# (#"stringextraction.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:49:23" "GP_Id:30" "comment:               result(result_index) := Given_String(J);
                      ^ stringextraction.adb:49:23:VC_INDEX_CHECK" "GP_Shape:L_2_while__if__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__result_index.result_index.int__content) /\ (Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
           Stringextraction__extract_consonants__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_2__j.j.int__content)))))))) )) ) )) else (
           ()))) ) )) else (
          ()))) );
         () (* While loop translating the Ada loop from stringextraction.adb:44 *)
         ;
          while True do
          invariant { 
           (#"stringextraction.adb" 54 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:54:32" "GP_Id:32" "comment:         pragma Loop_Invariant(result_index in 0 .. result'Last);
                               ^ stringextraction.adb:54:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__in" ( "GP_Pretty_Ada:2618" "GP_Sloc:stringextraction.adb:54:32" ( (0 <= Stringextraction__extract_consonants__result_index.result_index.int__content) /\ (Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) ) ))
           }
          invariant { 
           (#"stringextraction.adb" 55 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:55:32" "GP_Id:33" "comment:         pragma Loop_Invariant(result_index <= J);
                               ^ stringextraction.adb:55:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__cmp" ( "GP_Pretty_Ada:2628" "GP_Sloc:stringextraction.adb:55:32" (Stringextraction__extract_consonants__result_index.result_index.int__content <= Stringextraction__extract_consonants__L_2__j.j.int__content) ) ))
           }
          invariant { 
           (#"stringextraction.adb" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:56:32" "GP_Id:36" "comment:         pragma Loop_Invariant(for all K in result'First .. result_index =>
                               ^ stringextraction.adb:56:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" (forall k #"stringextraction.adb" 56 0 0#  "model" "name:K" "model_trace:2633"  : int.
            ( ( (1 <= k) /\ (k <= Stringextraction__extract_consonants__result_index.result_index.int__content) ) -> ( "GP_Sloc:stringextraction.adb:57:23" "GP_Pretty_Ada:2653" ( ((epsilon temp___result_265 : bool.
             ( (temp___result_265 = (Stringextraction__contains.contains Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)))) /\ (Stringextraction__contains.contains__function_guard temp___result_265 Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k))) )) = True) <-> true ) ) )) ))
           }
          ( () (* Assume implicit invariants from the loop stringextraction.adb:44 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__natural___axiom.dynamic_invariant Stringextraction__extract_consonants__result_index.result_index.int__content False True True True) ) /\ true ) /\ (if (((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string))) then (
           (Stringextraction__extract_consonants__L_2__T29b.dynamic_property (Standard__string.first Stringextraction__extract_consonants__given_string.given_string) (Standard__string.last Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_2__j.j.int__content)) else true) ) /\ true ) /\ (if (True) then (
           true) else (
           ( (Stringextraction__extract_consonants__TresultS.dynamic_property 1 (Standard__string.length Stringextraction__extract_consonants__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) = 1) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last) = (Standard__string.length Stringextraction__extract_consonants__given_string.given_string)) ) ))) ) /\ true )) (( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= Stringextraction__extract_consonants__L_2__j.j.int__content) /\ (Stringextraction__extract_consonants__L_2__j.j.int__content <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ))) };
          () (* Check for absence of RTE in the invariant of loop stringextraction.adb:44 *)
          ;
           abstract ensures {true}(let _ = (Boolean.andb((0 <= Stringextraction__extract_consonants__result_index.result_index.int__content)) ((Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          Stringextraction__extract_consonants__result.result____last )))))) in (
           ()))
           end ;
           abstract ensures {true}(let _ = (Stringextraction__extract_consonants__result_index.result_index.int__content <= Stringextraction__extract_consonants__L_2__j.j.int__content) in (
           ()))
           end ;
           abstract ensures {true}(let _ = ( (let k =  (any int
          ) in (
           (if ((Boolean.andb((1 <= k)) ((k <= Stringextraction__extract_consonants__result_index.result_index.int__content)))) then (
             abstract ensures {true}(let _ = ((Boolean.to_int((#"stringextraction.adb" 57 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:stringextraction.adb:57:23" "GP_Id:35" "comment:                      Contains(consonants, result(K)) = True);
                      ^ stringextraction.adb:57:23:VC_PRECONDITION" "GP_Shape:L_2_while__pragargs__forall__cmp__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__consonants.consonants) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 57 0 0# assert { #"stringextraction.adb" 57 0 0# (#"stringextraction.adb" 57 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:57:51" "GP_Id:34" "comment:                      Contains(consonants, result(K)) = True);
                                                  ^ stringextraction.adb:57:51:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__call_contains__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
            k ))))))) )))) = (Boolean.to_int((Boolean.of_int(1))))) in (
             ()))
             end ))))
          ;
           (any bool
          requires { true} 
          ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2633"  : int.
           ( ( (1 <= k) /\ (k <= Stringextraction__extract_consonants__result_index.result_index.int__content) ) -> ( ((epsilon temp___result_264 : bool.
            ( (temp___result_264 = (Stringextraction__contains.contains Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)))) /\ (Stringextraction__contains.contains__function_guard temp___result_264 Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k))) )) = True) <-> true ) )) )} 
          ) ) in (
           ()))
           end ;
          () (* Loop statements appearing after the loop invariant of loop stringextraction.adb:44 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop stringextraction.adb:44 *)
          ;
          (if ((Stringextraction__extract_consonants__L_2__j.j.int__content = temp___258)) then (
            raise Stringextraction__extract_consonants__L_2.L_2));
           Stringextraction__extract_consonants__L_2__j.j.int__content <- ( (Stringextraction__extract_consonants__L_2__j.j.int__content + 1) );
          ( "GP_Sloc:stringextraction.adb:46:13" (#"stringextraction.adb" 46 0 0# ()) );
          ( "GP_Sloc:stringextraction.adb:46:10" (#"stringextraction.adb" 46 0 0# (if ((#"stringextraction.adb" 46 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:stringextraction.adb:46:13" "GP_Id:31" "comment:         if Contains(consonants, Given_String(J)) then
            ^ stringextraction.adb:46:13:VC_PRECONDITION" "GP_Shape:L_2_while__if__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__consonants.consonants) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_2__j.j.int__content)))))) ))) then (
           ( ( "GP_Sloc:stringextraction.adb:47:16" (#"stringextraction.adb" 47 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:47:31" (#"stringextraction.adb" 47 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:47:13" (#"stringextraction.adb" 47 0 0# (if ((Stringextraction__extract_consonants__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 47 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
            ()))
            end ;
           Stringextraction__extract_consonants__result.result____last ))))) then (
            ( ( "GP_Sloc:stringextraction.adb:48:16" (#"stringextraction.adb" 48 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:48:32" (#"stringextraction.adb" 48 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:48:29" (#"stringextraction.adb" 48 0 0# #"stringextraction.adb" 48 0 0# Stringextraction__extract_consonants__result_index.result_index.int__content <- ( (#"stringextraction.adb" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:stringextraction.adb:48:45" "GP_Id:29" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:48:45:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_consonants__result_index.result_index.int__content + 1))) )) )) );
            ( "GP_Sloc:stringextraction.adb:49:16" (#"stringextraction.adb" 49 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:49:23" (#"stringextraction.adb" 49 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:49:37" (#"stringextraction.adb" 49 0 0# #"stringextraction.adb" 49 0 0# Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 49 0 0# assert { #"stringextraction.adb" 49 0 0# (#"stringextraction.adb" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:49:23" "GP_Id:30" "comment:               result(result_index) := Given_String(J);
                      ^ stringextraction.adb:49:23:VC_INDEX_CHECK" "GP_Shape:L_2_while__if__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__result_index.result_index.int__content) /\ (Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
            Stringextraction__extract_consonants__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_2__j.j.int__content)))))))) )) ) )) else (
            ()))) ) )) else (
           ()))) ) )
         done )))
         )))
        )))
       )
     with
      Stringextraction__extract_consonants__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:stringextraction.adb:60:14" (#"stringextraction.adb" 60 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:60:21" (#"stringextraction.adb" 60 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:60:37" (#"stringextraction.adb" 60 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:60:37" (#"stringextraction.adb" 60 0 0# (#"stringextraction.adb" 60 0 0# ( (let stringextraction__extract_consonants__R35b__assume = Stringextraction__extract_consonants__result_index.result_index.int__content in (
    #"stringextraction.adb" 60 0 0# assume { #"stringextraction.adb" 60 0 0# (stringextraction__extract_consonants__R35b__assume = Stringextraction__extract_consonants__R35b.r35b) }))
   ;
   #"stringextraction.adb" 60 0 0# assume { #"stringextraction.adb" 60 0 0# (Standard__natural___axiom.dynamic_invariant Stringextraction__extract_consonants__R35b.r35b True False True True) } ))) );
   ( "GP_Sloc:stringextraction.adb:60:7" (#"stringextraction.adb" 60 0 0# ( #"stringextraction.adb" 60 0 0# stringextraction__extract_consonants__result.Standard__string.string__content <- ( (let temp___267 = (let temp___266 = 1 in (
    (Stringextraction__extract_consonants__T37b.of_array(( #"stringextraction.adb" 60 0 0# assert { #"stringextraction.adb" 60 0 0# (#"stringextraction.adb" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:return__slice" "GP_Sloc:stringextraction.adb:60:14" "GP_Id:37" "comment:      return result(result'First .. result_index);
             ^ stringextraction.adb:60:14:VC_RANGE_CHECK" ( (temp___266 <= Stringextraction__extract_consonants__R35b.r35b) -> ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= temp___266) /\ (temp___266 <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__R35b.r35b) /\ (Stringextraction__extract_consonants__R35b.r35b <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) ) ) )) };
    Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content )) (temp___266) (Stringextraction__extract_consonants__R35b.r35b))))
    in (
    (Standard__string.of_array((Stringextraction__extract_consonants__T37b.to_array(temp___267))) ((Stringextraction__extract_consonants__T37b.first(temp___267))) ((Stringextraction__extract_consonants__T37b.last(temp___267))))))
    );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = stringextraction__extract_consonants__result.Standard__string.string__content in (
   ()))
   end ;
  (Standard__string.length(stringextraction__extract_consonants__result.Standard__string.string__content)) ) <= (  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_consonants__given_string.given_string)) )) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = stringextraction__extract_consonants__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.first(stringextraction__extract_consonants__result.Standard__string.string__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = stringextraction__extract_consonants__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.last(stringextraction__extract_consonants__result.Standard__string.string__content)) ))))) then (
     abstract ensures {true}(let _ = (#"stringextraction.ads" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:stringextraction.ads:25:1" "GP_Id:39" "comment:Contains(consonants, Extract_Consonants'Result(J)));
^ stringextraction.ads:25:1:VC_PRECONDITION" "GP_Shape:pragargs__forall__call_contains" (Stringextraction__contains___axiom.contains(Stringextraction__consonants.consonants) ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(stringextraction__extract_consonants__result.Standard__string.string__content))) (( #"stringextraction.ads" 25 0 0# assert { #"stringextraction.ads" 25 0 0# (#"stringextraction.ads" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:25:48" "GP_Id:38" "comment:Contains(consonants, Extract_Consonants'Result(J)));
                                               ^ stringextraction.ads:25:48:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__call_contains__ixdcomp" ( ((Standard__string.first stringextraction__extract_consonants__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_consonants__result.Standard__string.string__content)) ) )) };
    j ))))))) )) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2974"  : int.
   ( ( ((Standard__string.first stringextraction__extract_consonants__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_consonants__result.Standard__string.string__content)) ) -> ((epsilon temp___result_269 : bool.
    ( (temp___result_269 = (Stringextraction__contains.contains Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j)))) /\ (Stringextraction__contains.contains__function_guard temp___result_269 Stringextraction__consonants.consonants (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j))) )) = True) )) )} 
  ) ) ) in (
   ()))
   end ;
  stringextraction__extract_consonants__result.Standard__string.string__content )
end
