(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T1s" defined at stringextraction.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__T1s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  22
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "vowels" defined at stringextraction.ads:4, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__vowels
 use import "_gnatprove_standard".Main
 use        Standard__string

 function vowels #"stringextraction.ads" 4 0 0#"model_projected" "model_trace:3314" "name:vowels" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T2s" defined at stringextraction.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__T2s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  43
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "consonants" defined at stringextraction.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__consonants
 use import "_gnatprove_standard".Main
 use        Standard__string

 function consonants #"stringextraction.ads" 5 0 0#"model_projected" "model_trace:3324" "name:consonants" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "Tcustom_stringD1" defined at stringextraction.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__Tcustom_stringD1
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tcustom_stringD1 =
  < range 1 100 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  100
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tcustom_stringD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcustom_stringD1__ref =
  { mutable tcustom_stringD1__content "model_trace:" "name:" : tcustom_stringD1 }
 
 function tcustom_stringD1__ref___projection 
   (a : tcustom_stringD1__ref) : tcustom_stringD1 =
  a.tcustom_stringD1__content
 
 meta "model_projection" function tcustom_stringD1__ref___projection
 
 meta "inline : no" function tcustom_stringD1__ref___projection
 
 val tcustom_stringD1__havoc 
   (x : tcustom_stringD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tcustom_stringD1" defined at stringextraction.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__Tcustom_stringD1__rep
 use        Stringextraction__Tcustom_stringD1
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Stringextraction__Tcustom_stringD1.tcustom_stringD1) : int =
  (Stringextraction__Tcustom_stringD1.tcustom_stringD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Stringextraction__Tcustom_stringD1.tcustom_stringD1, 
 predicate in_range = Stringextraction__Tcustom_stringD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "Tcustom_stringB" defined at stringextraction.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__Tcustom_stringB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__Tcustom_stringD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__Tcustom_stringD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tcustom_stringB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tcustom_stringB__ref =
  { mutable tcustom_stringB__content "model_trace:" "name:" : tcustom_stringB }
 
 function tcustom_stringB__ref___projection 
   (a : tcustom_stringB__ref) : tcustom_stringB =
  a.tcustom_stringB__content
 
 meta "model_projection" function tcustom_stringB__ref___projection
 
 meta "inline : no" function tcustom_stringB__ref___projection
 
 val tcustom_stringB__havoc 
   (x : tcustom_stringB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "custom_string" defined at stringextraction.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__custom_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  100
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "given_string" defined at stringextraction.ads:8, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_vowels__given_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function given_string #"stringextraction.ads" 8 0 0#"model_projected" "model_trace:3359" "name:Given_string" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_string" defined at stringextraction.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__given_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T31s" defined at stringextraction.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L30s__T31s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t31s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t31s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t31s__ref =
  { mutable t31s__content "model_trace:" "name:" : t31s }
 
 function t31s__ref___projection 
   (a : t31s__ref) : t31s =
  a.t31s__content
 
 meta "model_projection" function t31s__ref___projection
 
 meta "inline : no" function t31s__ref___projection
 
 val t31s__havoc 
   (x : t31s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T33s" defined at stringextraction.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L32s__T33s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t33s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t33s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t33s__ref =
  { mutable t33s__content "model_trace:" "name:" : t33s }
 
 function t33s__ref___projection 
   (a : t33s__ref) : t33s =
  a.t33s__content
 
 meta "model_projection" function t33s__ref___projection
 
 meta "inline : no" function t33s__ref___projection
 
 val t33s__havoc 
   (x : t33s__ref) : unit
  writes {x}

end

(* Module for defining the constant "char" defined at stringextraction.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__is_contained__char
 use import "_gnatprove_standard".Main

 function char #"stringextraction.ads" 47 0 0#"model" "model_trace:3688" "name:char" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "char" defined at stringextraction.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__is_contained__char___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "given_string" defined at stringextraction.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__is_contained__given_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function given_string #"stringextraction.ads" 47 0 0#"model_projected" "model_trace:3697" "name:Given_String" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_string" defined at stringextraction.ads:47, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__is_contained__given_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "is_contained" defined at stringextraction.ads:47, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__is_contained
 use import "_gnatprove_standard".Main
 use        Standard__string

 function is_contained 
   (char : int) (given_string : Standard__string.string) : bool
 
 predicate is_contained__function_guard 
   (result : bool) (char : int) (given_string : Standard__string.string) 

end

(* Module for possibly declaring a logic function for "extract_vowels" defined at stringextraction.ads:8, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__extract_vowels
 use import "_gnatprove_standard".Main
 use        Standard__string

 function extract_vowels 
   (given_string : Standard__string.string) : Standard__string.string
 
 predicate extract_vowels__function_guard 
   (result : Standard__string.string) (given_string : Standard__string.string) 

end

(* Module for defining the constant "given_string" defined at stringextraction.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_consonants__given_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function given_string #"stringextraction.ads" 20 0 0#"model_projected" "name:Given_string" "model_trace:3457" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_string" defined at stringextraction.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__given_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T35s" defined at stringextraction.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L34s__T35s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t35s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t35s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t35s__ref =
  { mutable t35s__content "model_trace:" "name:" : t35s }
 
 function t35s__ref___projection 
   (a : t35s__ref) : t35s =
  a.t35s__content
 
 meta "model_projection" function t35s__ref___projection
 
 meta "inline : no" function t35s__ref___projection
 
 val t35s__havoc 
   (x : t35s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T37s" defined at stringextraction.ads:29, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L36s__T37s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t37s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t37s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t37s__ref =
  { mutable t37s__content "model_trace:" "name:" : t37s }
 
 function t37s__ref___projection 
   (a : t37s__ref) : t37s =
  a.t37s__content
 
 meta "model_projection" function t37s__ref___projection
 
 meta "inline : no" function t37s__ref___projection
 
 val t37s__havoc 
   (x : t37s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "extract_consonants" defined at stringextraction.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__extract_consonants
 use import "_gnatprove_standard".Main
 use        Standard__string

 function extract_consonants 
   (given_string : Standard__string.string) : Standard__string.string
 
 predicate extract_consonants__function_guard 
   (result : Standard__string.string) (given_string : Standard__string.string) 

end

(* Module for defining the constant "first_string" defined at stringextraction.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__intersection_str__first_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function first_string #"stringextraction.ads" 32 0 0#"model_projected" "model_trace:3555" "name:First_string" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "first_string" defined at stringextraction.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__intersection_str__first_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "second_string" defined at stringextraction.ads:32, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__intersection_str__second_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function second_string #"stringextraction.ads" 32 0 0#"model_projected" "model_trace:3562" "name:Second_string" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "second_string" defined at stringextraction.ads:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__intersection_str__second_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T39s" defined at stringextraction.ads:38, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__L38s__T39s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t39s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t39s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t39s__ref =
  { mutable t39s__content "model_trace:" "name:" : t39s }
 
 function t39s__ref___projection 
   (a : t39s__ref) : t39s =
  a.t39s__content
 
 meta "model_projection" function t39s__ref___projection
 
 meta "inline : no" function t39s__ref___projection
 
 val t39s__havoc 
   (x : t39s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T41s" defined at stringextraction.ads:36, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__L40s__T41s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t41s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t41s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t41s__ref =
  { mutable t41s__content "model_trace:" "name:" : t41s }
 
 function t41s__ref___projection 
   (a : t41s__ref) : t41s =
  a.t41s__content
 
 meta "model_projection" function t41s__ref___projection
 
 meta "inline : no" function t41s__ref___projection
 
 val t41s__havoc 
   (x : t41s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T43s" defined at stringextraction.ads:40, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__L42s__T43s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t43s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t43s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t43s__ref =
  { mutable t43s__content "model_trace:" "name:" : t43s }
 
 function t43s__ref___projection 
   (a : t43s__ref) : t43s =
  a.t43s__content
 
 meta "model_projection" function t43s__ref___projection
 
 meta "inline : no" function t43s__ref___projection
 
 val t43s__havoc 
   (x : t43s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "intersection_str" defined at stringextraction.ads:32, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__intersection_str
 use import "_gnatprove_standard".Main
 use        Standard__string

 function intersection_str 
   (first_string : Standard__string.string) (second_string : Standard__string.string) : Standard__string.string
 
 predicate intersection_str__function_guard 
   (result : Standard__string.string) (first_string : Standard__string.string) (second_string : Standard__string.string) 

end

(* Module for axiomatizing type "T26s" defined at stringextraction.ads:48, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__is_contained__L25s__T26s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t26s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t26s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t26s__ref =
  { mutable t26s__content "model_trace:" "name:" : t26s }
 
 function t26s__ref___projection 
   (a : t26s__ref) : t26s =
  a.t26s__content
 
 meta "model_projection" function t26s__ref___projection
 
 meta "inline : no" function t26s__ref___projection
 
 val t26s__havoc 
   (x : t26s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T21s" defined at stringextraction.ads:48, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__is_contained__L20s__T21s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t21s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t21s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t21s__ref =
  { mutable t21s__content "model_trace:" "name:" : t21s }
 
 function t21s__ref___projection 
   (a : t21s__ref) : t21s =
  a.t21s__content
 
 meta "model_projection" function t21s__ref___projection
 
 meta "inline : no" function t21s__ref___projection
 
 val t21s__havoc 
   (x : t21s__ref) : unit
  writes {x}

end

(* Module for defining the constant "given_string" defined at stringextraction.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__matches_some_char__given_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function given_string #"stringextraction.ads" 50 0 0#"model_projected" "name:Given_String" "model_trace:3732" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_string" defined at stringextraction.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__matches_some_char__given_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "reference_string" defined at stringextraction.ads:50, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__matches_some_char__reference_string
 use import "_gnatprove_standard".Main
 use        Standard__string

 function reference_string #"stringextraction.ads" 50 0 0#"model_projected" "model_trace:3741" "name:Reference_String" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "reference_string" defined at stringextraction.ads:50, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__matches_some_char__reference_string___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "matches_some_char" defined at stringextraction.ads:50, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Stringextraction__matches_some_char
 use import "_gnatprove_standard".Main
 use        Standard__string

 function matches_some_char 
   (given_string : Standard__string.string) (reference_string : Standard__string.string) : bool
 
 predicate matches_some_char__function_guard 
   (result : bool) (given_string : Standard__string.string) (reference_string : Standard__string.string) 

end

(* Module for axiomatizing type "T29s" defined at stringextraction.ads:51, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__matches_some_char__L28s__T29s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t29s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t29s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t29s__ref =
  { mutable t29s__content "model_trace:" "name:" : t29s }
 
 function t29s__ref___projection 
   (a : t29s__ref) : t29s =
  a.t29s__content
 
 meta "model_projection" function t29s__ref___projection
 
 meta "inline : no" function t29s__ref___projection
 
 val t29s__havoc 
   (x : t29s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T23s" defined at stringextraction.ads:51, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__matches_some_char__L22s__T23s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t23s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t23s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t23s__ref =
  { mutable t23s__content "model_trace:" "name:" : t23s }
 
 function t23s__ref___projection 
   (a : t23s__ref) : t23s =
  a.t23s__content
 
 meta "model_projection" function t23s__ref___projection
 
 meta "inline : no" function t23s__ref___projection
 
 val t23s__havoc 
   (x : t23s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS2bP1" defined at stringextraction.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__TS2bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS2bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS2bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS2bP1__ref =
  { mutable tS2bP1__content "model_trace:" "name:" : tS2bP1 }
 
 function tS2bP1__ref___projection 
   (a : tS2bP1__ref) : tS2bP1 =
  a.tS2bP1__content
 
 meta "model_projection" function tS2bP1__ref___projection
 
 meta "inline : no" function tS2bP1__ref___projection
 
 val tS2bP1__havoc 
   (x : tS2bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S2b" defined at stringextraction.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__S2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__intersection_str__TS2bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__intersection_str__TS2bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s2b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s2b__ref =
  { mutable s2b__content "model_trace:" "name:" : s2b }
 
 function s2b__ref___projection 
   (a : s2b__ref) : s2b =
  a.s2b__content
 
 meta "model_projection" function s2b__ref___projection
 
 meta "inline : no" function s2b__ref___projection
 
 val s2b__havoc 
   (x : s2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at stringextraction.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at stringextraction.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__intersection_str__TS1bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__intersection_str__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at stringextraction.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__L_1__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t3b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at stringextraction.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__L_1__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5b" defined at stringextraction.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__intersection_str__L_1__L4b__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t5b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content "model_trace:" "name:" : t5b }
 
 function t5b__ref___projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS9bP1" defined at stringextraction.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__TS9bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS9bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS9bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS9bP1__ref =
  { mutable tS9bP1__content "model_trace:" "name:" : tS9bP1 }
 
 function tS9bP1__ref___projection 
   (a : tS9bP1__ref) : tS9bP1 =
  a.tS9bP1__content
 
 meta "model_projection" function tS9bP1__ref___projection
 
 meta "inline : no" function tS9bP1__ref___projection
 
 val tS9bP1__havoc 
   (x : tS9bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S9b" defined at stringextraction.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__S9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__TS9bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__TS9bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s9b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s9b__ref =
  { mutable s9b__content "model_trace:" "name:" : s9b }
 
 function s9b__ref___projection 
   (a : s9b__ref) : s9b =
  a.s9b__content
 
 meta "model_projection" function s9b__ref___projection
 
 meta "inline : no" function s9b__ref___projection
 
 val s9b__havoc 
   (x : s9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresultSP1" defined at stringextraction.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__TTresultSP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content "model_trace:" "name:" : tTresultSP1 }
 
 function tTresultSP1__ref___projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref___projection
 
 meta "inline : no" function tTresultSP1__ref___projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at stringextraction.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__TresultS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__TTresultSP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__TTresultSP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresultS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresultS__ref =
  { mutable tresultS__content "model_trace:" "name:" : tresultS }
 
 function tresultS__ref___projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref___projection
 
 meta "inline : no" function tresultS__ref___projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T10b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content "model_trace:" "name:" : t10b }
 
 function t10b__ref___projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref___projection
 
 meta "inline : no" function t10b__ref___projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__T10b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__T10b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t11b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T13b" defined at stringextraction.adb:30, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T13b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  0
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T14b" defined at stringextraction.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content "model_trace:" "name:" : t14b }
 
 function t14b__ref___projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T18b" defined at stringextraction.adb:67, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L17b__T18b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18b__ref =
  { mutable t18b__content "model_trace:" "name:" : t18b }
 
 function t18b__ref___projection 
   (a : t18b__ref) : t18b =
  a.t18b__content
 
 meta "model_projection" function t18b__ref___projection
 
 meta "inline : no" function t18b__ref___projection
 
 val t18b__havoc 
   (x : t18b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T16b" defined at stringextraction.adb:67, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L15b__T16b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16b__ref =
  { mutable t16b__content "model_trace:" "name:" : t16b }
 
 function t16b__ref___projection 
   (a : t16b__ref) : t16b =
  a.t16b__content
 
 meta "model_projection" function t16b__ref___projection
 
 meta "inline : no" function t16b__ref___projection
 
 val t16b__havoc 
   (x : t16b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T22b" defined at stringextraction.adb:70, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L21b__T22b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t22b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t22b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t22b__ref =
  { mutable t22b__content "model_trace:" "name:" : t22b }
 
 function t22b__ref___projection 
   (a : t22b__ref) : t22b =
  a.t22b__content
 
 meta "model_projection" function t22b__ref___projection
 
 meta "inline : no" function t22b__ref___projection
 
 val t22b__havoc 
   (x : t22b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20b" defined at stringextraction.adb:70, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L19b__T20b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20b__ref =
  { mutable t20b__content "model_trace:" "name:" : t20b }
 
 function t20b__ref___projection 
   (a : t20b__ref) : t20b =
  a.t20b__content
 
 meta "model_projection" function t20b__ref___projection
 
 meta "inline : no" function t20b__ref___projection
 
 val t20b__havoc 
   (x : t20b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T26b" defined at stringextraction.adb:73, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L25b__T26b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t26b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t26b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t26b__ref =
  { mutable t26b__content "model_trace:" "name:" : t26b }
 
 function t26b__ref___projection 
   (a : t26b__ref) : t26b =
  a.t26b__content
 
 meta "model_projection" function t26b__ref___projection
 
 meta "inline : no" function t26b__ref___projection
 
 val t26b__havoc 
   (x : t26b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T24b" defined at stringextraction.adb:73, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L23b__T24b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t24b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t24b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24b__ref =
  { mutable t24b__content "model_trace:" "name:" : t24b }
 
 function t24b__ref___projection 
   (a : t24b__ref) : t24b =
  a.t24b__content
 
 meta "model_projection" function t24b__ref___projection
 
 meta "inline : no" function t24b__ref___projection
 
 val t24b__havoc 
   (x : t24b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T30b" defined at stringextraction.adb:76, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L29b__T30b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t30b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t30b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t30b__ref =
  { mutable t30b__content "model_trace:" "name:" : t30b }
 
 function t30b__ref___projection 
   (a : t30b__ref) : t30b =
  a.t30b__content
 
 meta "model_projection" function t30b__ref___projection
 
 meta "inline : no" function t30b__ref___projection
 
 val t30b__havoc 
   (x : t30b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T28b" defined at stringextraction.adb:76, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L27b__T28b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t28b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t28b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t28b__ref =
  { mutable t28b__content "model_trace:" "name:" : t28b }
 
 function t28b__ref___projection 
   (a : t28b__ref) : t28b =
  a.t28b__content
 
 meta "model_projection" function t28b__ref___projection
 
 meta "inline : no" function t28b__ref___projection
 
 val t28b__havoc 
   (x : t28b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T34b" defined at stringextraction.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L33b__T34b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t34b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t34b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t34b__ref =
  { mutable t34b__content "model_trace:" "name:" : t34b }
 
 function t34b__ref___projection 
   (a : t34b__ref) : t34b =
  a.t34b__content
 
 meta "model_projection" function t34b__ref___projection
 
 meta "inline : no" function t34b__ref___projection
 
 val t34b__havoc 
   (x : t34b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T32b" defined at stringextraction.adb:78, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L31b__T32b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t32b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t32b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t32b__ref =
  { mutable t32b__content "model_trace:" "name:" : t32b }
 
 function t32b__ref___projection 
   (a : t32b__ref) : t32b =
  a.t32b__content
 
 meta "model_projection" function t32b__ref___projection
 
 meta "inline : no" function t32b__ref___projection
 
 val t32b__havoc 
   (x : t32b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T38b" defined at stringextraction.adb:80, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L37b__T38b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t38b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t38b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t38b__ref =
  { mutable t38b__content "model_trace:" "name:" : t38b }
 
 function t38b__ref___projection 
   (a : t38b__ref) : t38b =
  a.t38b__content
 
 meta "model_projection" function t38b__ref___projection
 
 meta "inline : no" function t38b__ref___projection
 
 val t38b__havoc 
   (x : t38b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T36b" defined at stringextraction.adb:80, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__L_2__L35b__T36b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t36b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t36b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t36b__ref =
  { mutable t36b__content "model_trace:" "name:" : t36b }
 
 function t36b__ref___projection 
   (a : t36b__ref) : t36b =
  a.t36b__content
 
 meta "model_projection" function t36b__ref___projection
 
 meta "inline : no" function t36b__ref___projection
 
 val t36b__havoc 
   (x : t36b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T40b" defined at stringextraction.adb:86, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T40b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  0
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "R42b" defined at stringextraction.adb:90, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_vowels__R42b
 use import "_gnatprove_standard".Main

 function r42b #"stringextraction.adb" 90 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T43b" defined at stringextraction.adb:90, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T43b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t43b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t43b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t43b__ref =
  { mutable t43b__content "model_trace:" "name:" : t43b }
 
 function t43b__ref___projection 
   (a : t43b__ref) : t43b =
  a.t43b__content
 
 meta "model_projection" function t43b__ref___projection
 
 meta "inline : no" function t43b__ref___projection
 
 val t43b__havoc 
   (x : t43b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T44b" defined at stringextraction.adb:90, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_vowels__T44b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_vowels__T43b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_vowels__T43b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t44b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t44b__ref =
  { mutable t44b__content "model_trace:" "name:" : t44b }
 
 function t44b__ref___projection 
   (a : t44b__ref) : t44b =
  a.t44b__content
 
 meta "model_projection" function t44b__ref___projection
 
 meta "inline : no" function t44b__ref___projection
 
 val t44b__havoc 
   (x : t44b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS45bP1" defined at stringextraction.adb:96, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__TS45bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS45bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS45bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS45bP1__ref =
  { mutable tS45bP1__content "model_trace:" "name:" : tS45bP1 }
 
 function tS45bP1__ref___projection 
   (a : tS45bP1__ref) : tS45bP1 =
  a.tS45bP1__content
 
 meta "model_projection" function tS45bP1__ref___projection
 
 meta "inline : no" function tS45bP1__ref___projection
 
 val tS45bP1__havoc 
   (x : tS45bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S45b" defined at stringextraction.adb:96, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__S45b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__TS45bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__TS45bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s45b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s45b__ref =
  { mutable s45b__content "model_trace:" "name:" : s45b }
 
 function s45b__ref___projection 
   (a : s45b__ref) : s45b =
  a.s45b__content
 
 meta "model_projection" function s45b__ref___projection
 
 meta "inline : no" function s45b__ref___projection
 
 val s45b__havoc 
   (x : s45b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTresultSP1" defined at stringextraction.adb:97, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__TTresultSP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content "model_trace:" "name:" : tTresultSP1 }
 
 function tTresultSP1__ref___2__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref___2__projection
 
 meta "inline : no" function tTresultSP1__ref___2__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at stringextraction.adb:97, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__TresultS
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__TTresultSP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__TTresultSP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tresultS =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tresultS__ref =
  { mutable tresultS__content "model_trace:" "name:" : tresultS }
 
 function tresultS__ref___2__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref___2__projection
 
 meta "inline : no" function tresultS__ref___2__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T46b" defined at stringextraction.adb:97, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T46b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t46b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t46b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t46b__ref =
  { mutable t46b__content "model_trace:" "name:" : t46b }
 
 function t46b__ref___projection 
   (a : t46b__ref) : t46b =
  a.t46b__content
 
 meta "model_projection" function t46b__ref___projection
 
 meta "inline : no" function t46b__ref___projection
 
 val t46b__havoc 
   (x : t46b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T47b" defined at stringextraction.adb:97, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T47b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__T46b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__T46b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t47b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t47b__ref =
  { mutable t47b__content "model_trace:" "name:" : t47b }
 
 function t47b__ref___projection 
   (a : t47b__ref) : t47b =
  a.t47b__content
 
 meta "model_projection" function t47b__ref___projection
 
 meta "inline : no" function t47b__ref___projection
 
 val t47b__havoc 
   (x : t47b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T49b" defined at stringextraction.adb:104, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T49b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  0
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T50b" defined at stringextraction.adb:108, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__T50b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t50b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t50b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t50b__ref =
  { mutable t50b__content "model_trace:" "name:" : t50b }
 
 function t50b__ref___projection 
   (a : t50b__ref) : t50b =
  a.t50b__content
 
 meta "model_projection" function t50b__ref___projection
 
 meta "inline : no" function t50b__ref___projection
 
 val t50b__havoc 
   (x : t50b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T54b" defined at stringextraction.adb:141, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L53b__T54b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t54b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t54b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t54b__ref =
  { mutable t54b__content "model_trace:" "name:" : t54b }
 
 function t54b__ref___projection 
   (a : t54b__ref) : t54b =
  a.t54b__content
 
 meta "model_projection" function t54b__ref___projection
 
 meta "inline : no" function t54b__ref___projection
 
 val t54b__havoc 
   (x : t54b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T52b" defined at stringextraction.adb:141, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L51b__T52b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t52b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t52b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t52b__ref =
  { mutable t52b__content "model_trace:" "name:" : t52b }
 
 function t52b__ref___projection 
   (a : t52b__ref) : t52b =
  a.t52b__content
 
 meta "model_projection" function t52b__ref___projection
 
 meta "inline : no" function t52b__ref___projection
 
 val t52b__havoc 
   (x : t52b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T58b" defined at stringextraction.adb:144, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L57b__T58b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t58b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t58b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t58b__ref =
  { mutable t58b__content "model_trace:" "name:" : t58b }
 
 function t58b__ref___projection 
   (a : t58b__ref) : t58b =
  a.t58b__content
 
 meta "model_projection" function t58b__ref___projection
 
 meta "inline : no" function t58b__ref___projection
 
 val t58b__havoc 
   (x : t58b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T56b" defined at stringextraction.adb:144, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L55b__T56b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t56b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t56b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t56b__ref =
  { mutable t56b__content "model_trace:" "name:" : t56b }
 
 function t56b__ref___projection 
   (a : t56b__ref) : t56b =
  a.t56b__content
 
 meta "model_projection" function t56b__ref___projection
 
 meta "inline : no" function t56b__ref___projection
 
 val t56b__havoc 
   (x : t56b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T62b" defined at stringextraction.adb:147, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L61b__T62b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t62b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t62b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t62b__ref =
  { mutable t62b__content "model_trace:" "name:" : t62b }
 
 function t62b__ref___projection 
   (a : t62b__ref) : t62b =
  a.t62b__content
 
 meta "model_projection" function t62b__ref___projection
 
 meta "inline : no" function t62b__ref___projection
 
 val t62b__havoc 
   (x : t62b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T60b" defined at stringextraction.adb:147, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L59b__T60b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t60b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t60b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t60b__ref =
  { mutable t60b__content "model_trace:" "name:" : t60b }
 
 function t60b__ref___projection 
   (a : t60b__ref) : t60b =
  a.t60b__content
 
 meta "model_projection" function t60b__ref___projection
 
 meta "inline : no" function t60b__ref___projection
 
 val t60b__havoc 
   (x : t60b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T66b" defined at stringextraction.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L65b__T66b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t66b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t66b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t66b__ref =
  { mutable t66b__content "model_trace:" "name:" : t66b }
 
 function t66b__ref___projection 
   (a : t66b__ref) : t66b =
  a.t66b__content
 
 meta "model_projection" function t66b__ref___projection
 
 meta "inline : no" function t66b__ref___projection
 
 val t66b__havoc 
   (x : t66b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T64b" defined at stringextraction.adb:150, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L63b__T64b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t64b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t64b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t64b__ref =
  { mutable t64b__content "model_trace:" "name:" : t64b }
 
 function t64b__ref___projection 
   (a : t64b__ref) : t64b =
  a.t64b__content
 
 meta "model_projection" function t64b__ref___projection
 
 meta "inline : no" function t64b__ref___projection
 
 val t64b__havoc 
   (x : t64b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T70b" defined at stringextraction.adb:152, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L69b__T70b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t70b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t70b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t70b__ref =
  { mutable t70b__content "model_trace:" "name:" : t70b }
 
 function t70b__ref___projection 
   (a : t70b__ref) : t70b =
  a.t70b__content
 
 meta "model_projection" function t70b__ref___projection
 
 meta "inline : no" function t70b__ref___projection
 
 val t70b__havoc 
   (x : t70b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T68b" defined at stringextraction.adb:152, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L67b__T68b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t68b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t68b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t68b__ref =
  { mutable t68b__content "model_trace:" "name:" : t68b }
 
 function t68b__ref___projection 
   (a : t68b__ref) : t68b =
  a.t68b__content
 
 meta "model_projection" function t68b__ref___projection
 
 meta "inline : no" function t68b__ref___projection
 
 val t68b__havoc 
   (x : t68b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T74b" defined at stringextraction.adb:154, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L73b__T74b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t74b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t74b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t74b__ref =
  { mutable t74b__content "model_trace:" "name:" : t74b }
 
 function t74b__ref___projection 
   (a : t74b__ref) : t74b =
  a.t74b__content
 
 meta "model_projection" function t74b__ref___projection
 
 meta "inline : no" function t74b__ref___projection
 
 val t74b__havoc 
   (x : t74b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T72b" defined at stringextraction.adb:154, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__L_3__L71b__T72b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t72b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t72b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t72b__ref =
  { mutable t72b__content "model_trace:" "name:" : t72b }
 
 function t72b__ref___projection 
   (a : t72b__ref) : t72b =
  a.t72b__content
 
 meta "model_projection" function t72b__ref___projection
 
 meta "inline : no" function t72b__ref___projection
 
 val t72b__havoc 
   (x : t72b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T76b" defined at stringextraction.adb:160, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T76b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 function first 
   : int =
  1
 
 function last 
   : int =
  0
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "R78b" defined at stringextraction.adb:163, created in Gnat2Why.Decls.Translate_Constant *)
module Stringextraction__extract_consonants__R78b
 use import "_gnatprove_standard".Main

 function r78b #"stringextraction.adb" 163 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T79b" defined at stringextraction.adb:163, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T79b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t79b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t79b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t79b__ref =
  { mutable t79b__content "model_trace:" "name:" : t79b }
 
 function t79b__ref___projection 
   (a : t79b__ref) : t79b =
  a.t79b__content
 
 meta "model_projection" function t79b__ref___projection
 
 meta "inline : no" function t79b__ref___projection
 
 val t79b__havoc 
   (x : t79b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T80b" defined at stringextraction.adb:163, created in Gnat2Why.Types.Translate_Type *)
module Stringextraction__extract_consonants__T80b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Stringextraction__extract_consonants__T79b

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Stringextraction__extract_consonants__T79b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t80b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t80b__ref =
  { mutable t80b__content "model_trace:" "name:" : t80b }
 
 function t80b__ref___projection 
   (a : t80b__ref) : t80b =
  a.t80b__content
 
 meta "model_projection" function t80b__ref___projection
 
 meta "inline : no" function t80b__ref___projection
 
 val t80b__havoc 
   (x : t80b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "result" defined at stringextraction.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__intersection_str__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val result__ #"stringextraction.adb" 4 0 0#"model_projected" "model_trace:2336" "name:result"  : Array__Int__Standard__character.map__ref 
 
 function result____first #"stringextraction.adb" 4 0 0#"model_projected" "name:result" "model_trace:2336'First" 
   : Standard__integer.integer
 
 function result____last #"stringextraction.adb" 4 0 0#"model_projected" "name:result" "model_trace:2336'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at stringextraction.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__intersection_str__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at stringextraction.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__intersection_str__L_1__j
 use import "_gnatprove_standard".Main

 val j #"stringextraction.adb" 6 0 0#"model_projected" "model_trace:2350" "name:J"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at stringextraction.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__intersection_str__L_1__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at stringextraction.adb:23, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val result__ #"stringextraction.adb" 23 0 0#"model_projected" "name:result" "model_trace:2446"  : Array__Int__Standard__character.map__ref 
 
 function result____first #"stringextraction.adb" 23 0 0#"model_projected" "name:result" "model_trace:2446'First" 
   : Standard__integer.integer
 
 function result____last #"stringextraction.adb" 23 0 0#"model_projected" "name:result" "model_trace:2446'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at stringextraction.adb:23, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result_index" defined at stringextraction.adb:24, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__result_index
 use import "_gnatprove_standard".Main

 val result_index #"stringextraction.adb" 24 0 0#"model_projected" "model_trace:2471" "name:result_index"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result_index" defined at stringextraction.adb:24, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__result_index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "previous_index" defined at stringextraction.adb:26, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__previous_index
 use import "_gnatprove_standard".Main

 val previous_index #"stringextraction.adb" 26 0 0#"model_projected" "model_trace:2483" "name:previous_index"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "previous_index" defined at stringextraction.adb:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__previous_index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "match_found" defined at stringextraction.adb:27, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__match_found
 use import "_gnatprove_standard".Main

 val match_found #"stringextraction.adb" 27 0 0#"model_projected" "model_trace:2493" "name:match_found"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "match_found" defined at stringextraction.adb:27, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__match_found___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at stringextraction.adb:34, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_vowels__L_2__j
 use import "_gnatprove_standard".Main

 val j #"stringextraction.adb" 34 0 0#"model_projected" "name:J" "model_trace:2516"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at stringextraction.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__L_2__j___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at stringextraction.adb:97, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val result__ #"stringextraction.adb" 97 0 0#"model_projected" "name:result" "model_trace:2862"  : Array__Int__Standard__character.map__ref 
 
 function result____first #"stringextraction.adb" 97 0 0#"model_projected" "name:result" "model_trace:2862'First" 
   : Standard__integer.integer
 
 function result____last #"stringextraction.adb" 97 0 0#"model_projected" "name:result" "model_trace:2862'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at stringextraction.adb:97, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result_index" defined at stringextraction.adb:98, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__result_index
 use import "_gnatprove_standard".Main

 val result_index #"stringextraction.adb" 98 0 0#"model_projected" "name:result_index" "model_trace:2887"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result_index" defined at stringextraction.adb:98, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__result_index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "previous_index" defined at stringextraction.adb:100, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__previous_index
 use import "_gnatprove_standard".Main

 val previous_index #"stringextraction.adb" 100 0 0#"model_projected" "name:previous_index" "model_trace:2899"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "previous_index" defined at stringextraction.adb:100, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__previous_index___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "match_found" defined at stringextraction.adb:101, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__match_found
 use import "_gnatprove_standard".Main

 val match_found #"stringextraction.adb" 101 0 0#"model_projected" "name:match_found" "model_trace:2909"  : bool__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "match_found" defined at stringextraction.adb:101, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__match_found___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at stringextraction.adb:108, created in Gnat2Why.Decls.Translate_Variable *)
module Stringextraction__extract_consonants__L_3__j
 use import "_gnatprove_standard".Main

 val j #"stringextraction.adb" 108 0 0#"model_projected" "name:J" "model_trace:2932"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at stringextraction.adb:108, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__L_3__j___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining a value for string literal  defined at stringextraction.ads:4, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_154
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_154 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_154__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_154 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 1)) = 65) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 2)) = 69) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 3)) = 73) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 4)) = 79) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 5)) = 85) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 6)) = 97) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 7)) = 101) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 8)) = 105) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 9)) = 111) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 10)) = 117) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 11)) = 193) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 12)) = 201) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 13)) = 205) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 14)) = 211) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 15)) = 218) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 16)) = 225) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 17)) = 233) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 18)) = 237) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 19)) = 243) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 20)) = 250) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 21)) = 220) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_154 __void_param) 22)) = 252) ))

end

(* Module for defining a value for string literal  defined at stringextraction.ads:5, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_155
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 function temp___String_Literal_155 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_155__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_155 __void_param)].
   ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 1)) = 81) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 2)) = 87) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 3)) = 82) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 4)) = 84) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 5)) = 89) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 6)) = 80) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 7)) = 83) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 8)) = 68) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 9)) = 70) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 10)) = 71) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 11)) = 72) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 12)) = 74) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 13)) = 75) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 14)) = 76) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 15)) = 90) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 16)) = 88) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 17)) = 67) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 18)) = 86) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 19)) = 66) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 20)) = 78) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 21)) = 77) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 22)) = 113) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 23)) = 119) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 24)) = 114) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 25)) = 116) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 26)) = 121) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 27)) = 112) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 28)) = 115) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 29)) = 100) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 30)) = 102) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 31)) = 103) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 32)) = 104) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 33)) = 106) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 34)) = 107) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 35)) = 108) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 36)) = 122) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 37)) = 120) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 38)) = 99) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 39)) = 118) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 40)) = 98) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 41)) = 110) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 42)) = 241) ) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_155 __void_param) 43)) = 109) ))

end

(* Module for defining the loop exit exception for the loop "L_1" defined at stringextraction.adb:6, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Stringextraction__intersection_str__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at stringextraction.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__intersection_str__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at stringextraction.adb:34, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Stringextraction__extract_vowels__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at stringextraction.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_vowels__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at stringextraction.adb:108, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Stringextraction__extract_consonants__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at stringextraction.adb:108, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Stringextraction__extract_consonants__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T1s" defined at stringextraction.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__T1s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2s" defined at stringextraction.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__T2s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tcustom_stringD1" defined at stringextraction.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__Tcustom_stringD1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "Tcustom_stringB" defined at stringextraction.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__Tcustom_stringB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "custom_string" defined at stringextraction.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__custom_string___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_160 : Array__Int__Standard__character.map) (temp___is_init_156 : bool) (temp___skip_constant_157 : bool) (temp___do_toplevel_158 : bool) (temp___do_typ_inv_159 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_162 : Array__Int__Standard__character.map) (temp___skip_top_level_163 : bool)  =
  true

end

(* Module giving axioms for type "T31s" defined at stringextraction.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L30s__T31s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T33s" defined at stringextraction.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L32s__T33s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T35s" defined at stringextraction.ads:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L34s__T35s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T37s" defined at stringextraction.ads:29, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L36s__T37s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T39s" defined at stringextraction.ads:38, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__L38s__T39s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T41s" defined at stringextraction.ads:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__L40s__T41s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T43s" defined at stringextraction.ads:40, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__L42s__T43s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T26s" defined at stringextraction.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__is_contained__L25s__T26s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T21s" defined at stringextraction.ads:48, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__is_contained__L20s__T21s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T29s" defined at stringextraction.ads:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__matches_some_char__L28s__T29s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T23s" defined at stringextraction.ads:51, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__matches_some_char__L22s__T23s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS2bP1" defined at stringextraction.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__TS2bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S2b" defined at stringextraction.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__S2b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__intersection_str__second_string
 use        Stringextraction__intersection_str__S2b

 predicate dynamic_invariant "inline" 
   (temp___expr_196 : Stringextraction__intersection_str__S2b.s2b) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool)  =
  (if (temp___skip_constant_193) then (
   true) else (
   ( (Stringextraction__intersection_str__S2b.dynamic_property (Standard__string.first Stringextraction__intersection_str__second_string.second_string) (Standard__string.last Stringextraction__intersection_str__second_string.second_string) (Stringextraction__intersection_str__S2b.first temp___expr_196) (Stringextraction__intersection_str__S2b.last temp___expr_196)) /\ ( ((Stringextraction__intersection_str__S2b.first temp___expr_196) = (Standard__string.first Stringextraction__intersection_str__second_string.second_string)) /\ ((Stringextraction__intersection_str__S2b.last temp___expr_196) = (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_198 : Stringextraction__intersection_str__S2b.s2b) (temp___skip_top_level_199 : bool)  =
  true

end

(* Module giving axioms for type "TS1bP1" defined at stringextraction.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at stringextraction.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__intersection_str__first_string
 use        Stringextraction__intersection_str__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_206 : Stringextraction__intersection_str__S1b.s1b) (temp___is_init_202 : bool) (temp___skip_constant_203 : bool) (temp___do_toplevel_204 : bool) (temp___do_typ_inv_205 : bool)  =
  (if (temp___skip_constant_203) then (
   true) else (
   ( (Stringextraction__intersection_str__S1b.dynamic_property (Standard__string.first Stringextraction__intersection_str__first_string.first_string) (Standard__string.last Stringextraction__intersection_str__first_string.first_string) (Stringextraction__intersection_str__S1b.first temp___expr_206) (Stringextraction__intersection_str__S1b.last temp___expr_206)) /\ ( ((Stringextraction__intersection_str__S1b.first temp___expr_206) = (Standard__string.first Stringextraction__intersection_str__first_string.first_string)) /\ ((Stringextraction__intersection_str__S1b.last temp___expr_206) = (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_208 : Stringextraction__intersection_str__S1b.s1b) (temp___skip_top_level_209 : bool)  =
  true

end

(* Module giving axioms for type "T3b" defined at stringextraction.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__L_1__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at stringextraction.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__L_1__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at stringextraction.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__intersection_str__L_1__L4b__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS9bP1" defined at stringextraction.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__TS9bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S9b" defined at stringextraction.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__S9b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__extract_vowels__given_string
 use        Stringextraction__extract_vowels__S9b

 predicate dynamic_invariant "inline" 
   (temp___expr_216 : Stringextraction__extract_vowels__S9b.s9b) (temp___is_init_212 : bool) (temp___skip_constant_213 : bool) (temp___do_toplevel_214 : bool) (temp___do_typ_inv_215 : bool)  =
  (if (temp___skip_constant_213) then (
   true) else (
   ( (Stringextraction__extract_vowels__S9b.dynamic_property (Standard__string.first Stringextraction__extract_vowels__given_string.given_string) (Standard__string.last Stringextraction__extract_vowels__given_string.given_string) (Stringextraction__extract_vowels__S9b.first temp___expr_216) (Stringextraction__extract_vowels__S9b.last temp___expr_216)) /\ ( ((Stringextraction__extract_vowels__S9b.first temp___expr_216) = (Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) /\ ((Stringextraction__extract_vowels__S9b.last temp___expr_216) = (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_218 : Stringextraction__extract_vowels__S9b.s9b) (temp___skip_top_level_219 : bool)  =
  true

end

(* Module giving axioms for type "TTresultSP1" defined at stringextraction.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__TTresultSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresultS" defined at stringextraction.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__TresultS___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__extract_vowels__given_string
 use        Stringextraction__extract_vowels__TresultS

 predicate dynamic_invariant "inline" 
   (temp___expr_226 : Stringextraction__extract_vowels__TresultS.tresultS) (temp___is_init_222 : bool) (temp___skip_constant_223 : bool) (temp___do_toplevel_224 : bool) (temp___do_typ_inv_225 : bool)  =
  (if (temp___skip_constant_223) then (
   true) else (
   ( (Stringextraction__extract_vowels__TresultS.dynamic_property (Standard__string.first Stringextraction__extract_vowels__given_string.given_string) (Standard__string.last Stringextraction__extract_vowels__given_string.given_string) (Stringextraction__extract_vowels__TresultS.first temp___expr_226) (Stringextraction__extract_vowels__TresultS.last temp___expr_226)) /\ ( ((Stringextraction__extract_vowels__TresultS.first temp___expr_226) = (Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) /\ ((Stringextraction__extract_vowels__TresultS.last temp___expr_226) = (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_228 : Stringextraction__extract_vowels__TresultS.tresultS) (temp___skip_top_level_229 : bool)  =
  true

end

(* Module giving axioms for type "T10b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at stringextraction.adb:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T13b" defined at stringextraction.adb:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T13b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14b" defined at stringextraction.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__T14b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18b" defined at stringextraction.adb:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L17b__T18b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16b" defined at stringextraction.adb:67, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L15b__T16b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T22b" defined at stringextraction.adb:70, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L21b__T22b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20b" defined at stringextraction.adb:70, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L19b__T20b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T26b" defined at stringextraction.adb:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L25b__T26b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T24b" defined at stringextraction.adb:73, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L23b__T24b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T30b" defined at stringextraction.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L29b__T30b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T28b" defined at stringextraction.adb:76, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L27b__T28b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T34b" defined at stringextraction.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L33b__T34b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T32b" defined at stringextraction.adb:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L31b__T32b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T38b" defined at stringextraction.adb:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L37b__T38b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T36b" defined at stringextraction.adb:80, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__L_2__L35b__T36b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T40b" defined at stringextraction.adb:86, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T40b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T43b" defined at stringextraction.adb:90, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T43b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T44b" defined at stringextraction.adb:90, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_vowels__T44b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS45bP1" defined at stringextraction.adb:96, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__TS45bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S45b" defined at stringextraction.adb:96, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__S45b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__extract_consonants__given_string
 use        Stringextraction__extract_consonants__S45b

 predicate dynamic_invariant "inline" 
   (temp___expr_236 : Stringextraction__extract_consonants__S45b.s45b) (temp___is_init_232 : bool) (temp___skip_constant_233 : bool) (temp___do_toplevel_234 : bool) (temp___do_typ_inv_235 : bool)  =
  (if (temp___skip_constant_233) then (
   true) else (
   ( (Stringextraction__extract_consonants__S45b.dynamic_property (Standard__string.first Stringextraction__extract_consonants__given_string.given_string) (Standard__string.last Stringextraction__extract_consonants__given_string.given_string) (Stringextraction__extract_consonants__S45b.first temp___expr_236) (Stringextraction__extract_consonants__S45b.last temp___expr_236)) /\ ( ((Stringextraction__extract_consonants__S45b.first temp___expr_236) = (Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) /\ ((Stringextraction__extract_consonants__S45b.last temp___expr_236) = (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_238 : Stringextraction__extract_consonants__S45b.s45b) (temp___skip_top_level_239 : bool)  =
  true

end

(* Module giving axioms for type "TTresultSP1" defined at stringextraction.adb:97, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__TTresultSP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TresultS" defined at stringextraction.adb:97, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__TresultS___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Stringextraction__extract_consonants__given_string
 use        Stringextraction__extract_consonants__TresultS

 predicate dynamic_invariant "inline" 
   (temp___expr_246 : Stringextraction__extract_consonants__TresultS.tresultS) (temp___is_init_242 : bool) (temp___skip_constant_243 : bool) (temp___do_toplevel_244 : bool) (temp___do_typ_inv_245 : bool)  =
  (if (temp___skip_constant_243) then (
   true) else (
   ( (Stringextraction__extract_consonants__TresultS.dynamic_property (Standard__string.first Stringextraction__extract_consonants__given_string.given_string) (Standard__string.last Stringextraction__extract_consonants__given_string.given_string) (Stringextraction__extract_consonants__TresultS.first temp___expr_246) (Stringextraction__extract_consonants__TresultS.last temp___expr_246)) /\ ( ((Stringextraction__extract_consonants__TresultS.first temp___expr_246) = (Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) /\ ((Stringextraction__extract_consonants__TresultS.last temp___expr_246) = (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_248 : Stringextraction__extract_consonants__TresultS.tresultS) (temp___skip_top_level_249 : bool)  =
  true

end

(* Module giving axioms for type "T46b" defined at stringextraction.adb:97, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T46b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T47b" defined at stringextraction.adb:97, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T47b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T49b" defined at stringextraction.adb:104, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T49b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T50b" defined at stringextraction.adb:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__T50b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T54b" defined at stringextraction.adb:141, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L53b__T54b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T52b" defined at stringextraction.adb:141, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L51b__T52b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T58b" defined at stringextraction.adb:144, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L57b__T58b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T56b" defined at stringextraction.adb:144, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L55b__T56b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T62b" defined at stringextraction.adb:147, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L61b__T62b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T60b" defined at stringextraction.adb:147, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L59b__T60b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T66b" defined at stringextraction.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L65b__T66b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T64b" defined at stringextraction.adb:150, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L63b__T64b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T70b" defined at stringextraction.adb:152, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L69b__T70b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T68b" defined at stringextraction.adb:152, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L67b__T68b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T74b" defined at stringextraction.adb:154, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L73b__T74b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T72b" defined at stringextraction.adb:154, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__L_3__L71b__T72b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T76b" defined at stringextraction.adb:160, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T76b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T79b" defined at stringextraction.adb:163, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T79b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T80b" defined at stringextraction.adb:163, created in Gnat2Why.Types.Generate_Type_Completion *)
module Stringextraction__extract_consonants__T80b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring an abstract function for the aggregate at stringextraction.adb:23, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_vowels__result__aggregate_def
 use import "_gnatprove_standard".Main
 use        Stringextraction__extract_vowels__T11b

 function stringextraction__extract_vowels__result__aggregate_def 
   (temp___254 : int) (temp___255 : int) (temp___256 : int) : Stringextraction__extract_vowels__T11b.t11b

end

(* Module for defining a value for string literal  defined at stringextraction.adb:30, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_261
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___String_Literal_261 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_261__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_261 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at stringextraction.adb:86, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_289
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___String_Literal_289 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_289__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_289 __void_param)].
   true)

end

(* Module for declaring an abstract function for the aggregate at stringextraction.adb:97, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_consonants__result__aggregate_def
 use import "_gnatprove_standard".Main
 use        Stringextraction__extract_consonants__T47b

 function stringextraction__extract_consonants__result__aggregate_def 
   (temp___298 : int) (temp___299 : int) (temp___300 : int) : Stringextraction__extract_consonants__T47b.t47b

end

(* Module for defining a value for string literal  defined at stringextraction.adb:104, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_305
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___String_Literal_305 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_305__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_305 __void_param)].
   true)

end

(* Module for defining a value for string literal  defined at stringextraction.adb:160, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_333
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__character

 function temp___String_Literal_333 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_333__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_333 __void_param)].
   true)

end
(* Module for defining the value of constant "vowels" defined at stringextraction.ads:4, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__vowels___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Stringextraction__vowels
 use        Temp___String_Literal_154
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom vowels__def_axiom :
  ((Stringextraction__vowels.vowels ) = (Standard__string.of_array (Temp___String_Literal_154.temp___String_Literal_154 ()) 1 22))

end

(* Module for defining the value of constant "consonants" defined at stringextraction.ads:5, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__consonants___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Stringextraction__consonants
 use        Temp___String_Literal_155
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 axiom consonants__def_axiom :
  ((Stringextraction__consonants.consonants ) = (Standard__string.of_array (Temp___String_Literal_155.temp___String_Literal_155 ()) 1 43))

end

(* Module for defining the value of constant "R42b" defined at stringextraction.adb:90, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__extract_vowels__R42b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R78b" defined at stringextraction.adb:163, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Stringextraction__extract_consonants__R78b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving a program function and a defining axiom for the expression function "is_contained" defined at stringextraction.ads:47, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Stringextraction__is_contained___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__is_contained
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val is_contained 
   (char : int) (given_string : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Stringextraction__is_contained.is_contained char given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard result char given_string) ) /\ ( (result = True) <-> (exists k  : int.
   ( ( ((Standard__string.first given_string) <= k) /\ (k <= (Standard__string.last given_string)) ) /\ (char = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) k))) )) ) ) }
 
 axiom is_contained__post_axiom :
  (forall char   : int.
  (forall given_string   : Standard__string.string [(Stringextraction__is_contained.is_contained char given_string)].
   ( ( (Standard__character___axiom.dynamic_invariant char True True True True) /\ (Standard__string___axiom.dynamic_invariant given_string True True True True) ) -> (let result = (Stringextraction__is_contained.is_contained char given_string) in (
    (if ((Stringextraction__is_contained.is_contained__function_guard result char given_string)) then (
     ( ( true /\ true ) /\ true )) else true)))
    )))
 
 axiom is_contained__def_axiom :
  (forall char   : int.
  (forall given_string   : Standard__string.string [(Stringextraction__is_contained.is_contained char given_string)].
   ( (let result = (Stringextraction__is_contained.is_contained char given_string) in (
    (Stringextraction__is_contained.is_contained__function_guard result char given_string)))
    -> ( ((Stringextraction__is_contained.is_contained char given_string) = True) <-> (exists k  : int.
    ( ( ((Standard__string.first given_string) <= k) /\ (k <= (Standard__string.last given_string)) ) /\ (char = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) k))) )) ) )))

end

(* Module for declaring a program function (and possibly an axiom) for "extract_vowels" defined at stringextraction.ads:8, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringextraction__extract_vowels___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__is_contained
 use        Stringextraction__extract_vowels
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val extract_vowels 
   (given_string : Standard__string.string) : Standard__string.string
  requires {  ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.first given_string) = 1) /\ (forall j   "model" "name:J" "model_trace:3398"  : int.
   ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)) <> 0) )) ) ) }
  ensures {  ( ( (result = (Stringextraction__extract_vowels.extract_vowels given_string)) /\ (Stringextraction__extract_vowels.extract_vowels__function_guard result given_string) ) /\ ( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:3430"  : int.
   ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> ((epsilon temp___result_168 : bool.
    ( (temp___result_168 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_168 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string) )) = True) )) ) ) ) }
 
 axiom extract_vowels__post_axiom :
  (forall given_string   : Standard__string.string [(Stringextraction__extract_vowels.extract_vowels given_string)].
   ( ( (Standard__string___axiom.dynamic_invariant given_string True True True True) /\ ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.first given_string) = 1) /\ (forall j   "model" "name:J" "model_trace:3398"  : int.
    ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)) <> 0) )) ) ) ) -> (let result = (Stringextraction__extract_vowels.extract_vowels given_string) in (
    (if ((Stringextraction__extract_vowels.extract_vowels__function_guard result given_string)) then (
     ( ( ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:3430"  : int.
      ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> ((epsilon temp___result_171 : bool.
       ( (temp___result_171 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_171 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string) )) = True) )) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "extract_consonants" defined at stringextraction.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringextraction__extract_consonants___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__is_contained
 use        Stringextraction__extract_consonants
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val extract_consonants 
   (given_string : Standard__string.string) : Standard__string.string
  requires {  ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.first given_string) = 1) /\ (forall j   "model" "name:J" "model_trace:3496"  : int.
   ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)) <> 0) )) ) ) }
  ensures {  ( ( (result = (Stringextraction__extract_consonants.extract_consonants given_string)) /\ (Stringextraction__extract_consonants.extract_consonants__function_guard result given_string) ) /\ ( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:3528"  : int.
   ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> ((epsilon temp___result_174 : bool.
    ( (temp___result_174 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_174 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string) )) = True) )) ) ) ) }
 
 axiom extract_consonants__post_axiom :
  (forall given_string   : Standard__string.string [(Stringextraction__extract_consonants.extract_consonants given_string)].
   ( ( (Standard__string___axiom.dynamic_invariant given_string True True True True) /\ ( ((Standard__string.length given_string) <= 500) /\ ( ((Standard__string.first given_string) = 1) /\ (forall j   "model" "name:J" "model_trace:3496"  : int.
    ( ( ((Standard__string.first given_string) <= j) /\ (j <= (Standard__string.last given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) j)) <> 0) )) ) ) ) -> (let result = (Stringextraction__extract_consonants.extract_consonants given_string) in (
    (if ((Stringextraction__extract_consonants.extract_consonants__function_guard result given_string)) then (
     ( ( ( ((Standard__string.length result) <= (Standard__string.length given_string)) /\ (forall j   "model" "name:J" "model_trace:3528"  : int.
      ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> ((epsilon temp___result_177 : bool.
       ( (temp___result_177 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_177 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) given_string) )) = True) )) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "intersection_str" defined at stringextraction.ads:32, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Stringextraction__intersection_str___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__intersection_str
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val intersection_str 
   (first_string : Standard__string.string) (second_string : Standard__string.string) : Standard__string.string
  requires {  ( ((Standard__string.length first_string) = (Standard__string.length second_string)) /\ ( ((Standard__string.first first_string) = (Standard__string.first second_string)) /\ ( (forall j   "model" "name:J" "model_trace:3597"  : int.
   ( ( ((Standard__string.first first_string) <= j) /\ (j <= (Standard__string.last first_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array first_string) j)) <> 0) )) /\ (forall j   "model" "name:J" "model_trace:3617"  : int.
   ( ( ((Standard__string.first second_string) <= j) /\ (j <= (Standard__string.last second_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array second_string) j)) <> 0) )) ) ) ) }
  ensures {  ( ( (result = (Stringextraction__intersection_str.intersection_str first_string second_string)) /\ (Stringextraction__intersection_str.intersection_str__function_guard result first_string second_string) ) /\ ( (Standard__string___axiom.dynamic_invariant result True False True True) /\ (forall j   "model" "name:J" "model_trace:3639"  : int.
   ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) <> 0)) then (
    ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array first_string) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array second_string) j))) )) else (
    true)) )) ) ) }
 
 axiom intersection_str__post_axiom :
  (forall first_string   second_string   : Standard__string.string [(Stringextraction__intersection_str.intersection_str first_string second_string)].
   ( ( ( (Standard__string___axiom.dynamic_invariant first_string True True True True) /\ (Standard__string___axiom.dynamic_invariant second_string True True True True) ) /\ ( ((Standard__string.length first_string) = (Standard__string.length second_string)) /\ ( ((Standard__string.first first_string) = (Standard__string.first second_string)) /\ ( (forall j   "model" "name:J" "model_trace:3597"  : int.
    ( ( ((Standard__string.first first_string) <= j) /\ (j <= (Standard__string.last first_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array first_string) j)) <> 0) )) /\ (forall j   "model" "name:J" "model_trace:3617"  : int.
    ( ( ((Standard__string.first second_string) <= j) /\ (j <= (Standard__string.last second_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array second_string) j)) <> 0) )) ) ) ) ) -> (let result = (Stringextraction__intersection_str.intersection_str first_string second_string) in (
    (if ((Stringextraction__intersection_str.intersection_str__function_guard result first_string second_string)) then (
     ( ( (forall j   "model" "name:J" "model_trace:3639"  : int.
      ( ( ((Standard__string.first result) <= j) /\ (j <= (Standard__string.last result)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) <> 0)) then (
       ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array first_string) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array second_string) j))) )) else (
       true)) )) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module giving a program function and a defining axiom for the expression function "matches_some_char" defined at stringextraction.ads:50, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Stringextraction__matches_some_char___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__is_contained
 use        Stringextraction__matches_some_char
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val matches_some_char 
   (given_string : Standard__string.string) (reference_string : Standard__string.string) : bool
  requires {  true }
  ensures {  ( ( (result = (Stringextraction__matches_some_char.matches_some_char given_string reference_string)) /\ (Stringextraction__matches_some_char.matches_some_char__function_guard result given_string reference_string) ) /\ ( (result = True) <-> (exists k  : int.
   ( ( ((Standard__string.first given_string) <= k) /\ (k <= (Standard__string.last given_string)) ) /\ ((epsilon temp___result_186 : bool.
    ( (temp___result_186 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) k)) reference_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_186 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) k)) reference_string) )) = True) )) ) ) }
 
 axiom matches_some_char__post_axiom :
  (forall given_string   reference_string   : Standard__string.string [(Stringextraction__matches_some_char.matches_some_char given_string reference_string)].
   ( ( (Standard__string___axiom.dynamic_invariant given_string True True True True) /\ (Standard__string___axiom.dynamic_invariant reference_string True True True True) ) -> (let result = (Stringextraction__matches_some_char.matches_some_char given_string reference_string) in (
    (if ((Stringextraction__matches_some_char.matches_some_char__function_guard result given_string reference_string)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom matches_some_char__def_axiom :
  (forall given_string   reference_string   : Standard__string.string [(Stringextraction__matches_some_char.matches_some_char given_string reference_string)].
   ( (let result = (Stringextraction__matches_some_char.matches_some_char given_string reference_string) in (
    (Stringextraction__matches_some_char.matches_some_char__function_guard result given_string reference_string)))
    -> ( ((Stringextraction__matches_some_char.matches_some_char given_string reference_string) = True) <-> (exists k  : int.
    ( ( ((Standard__string.first given_string) <= k) /\ (k <= (Standard__string.last given_string)) ) /\ ((epsilon temp___result_191 : bool.
     ( (temp___result_191 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) k)) reference_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_191 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array given_string) k)) reference_string) )) = True) )) ) ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "stringextraction" defined at stringextraction.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Stringextraction__package_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__string
 use        Standard__string___axiom
 use        Stringextraction__vowels
 use        Temp___String_Literal_154
 use        Stringextraction__consonants
 use        Temp___String_Literal_155
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__vowels___axiom
 use        Stringextraction__consonants___axiom

 let def #"stringextraction.ads" 1 0 0#"GP_Subp:stringextraction.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 1 0 0# true }
  ensures { #"stringextraction.ads" 1 0 0# true }
   =
  ( (#"stringextraction.ads" 1 0 0# ());
  (#"stringextraction.ads" 3 0 0# ());
  (#"stringextraction.ads" 4 0 0# ( #"stringextraction.ads" 4 0 0# abstract ensures {true}(let _ = (Standard__string.of_array((Temp___String_Literal_154.temp___String_Literal_154(()))) (1) (22)) in (
   ()))
   end ;
  #"stringextraction.ads" 4 0 0# assume { #"stringextraction.ads" 4 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__vowels.vowels True False True True) } ));
  (#"stringextraction.ads" 5 0 0# ( #"stringextraction.ads" 5 0 0# abstract ensures {true}(let _ = (Standard__string.of_array((Temp___String_Literal_155.temp___String_Literal_155(()))) (1) (43)) in (
   ()))
   end ;
  #"stringextraction.ads" 5 0 0# assume { #"stringextraction.ads" 5 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__consonants.consonants True False True True) } ));
  (#"stringextraction.ads" 6 0 0# ());
  (#"stringextraction.ads" 8 0 0# ());
  (#"stringextraction.ads" 16 0 0# ());
  (#"stringextraction.ads" 16 0 0# ());
  (#"stringextraction.ads" 11 0 0# ());
  (#"stringextraction.ads" 12 0 0# ());
  (#"stringextraction.ads" 11 0 0# ());
  (#"stringextraction.ads" 10 0 0# ());
  (#"stringextraction.ads" 20 0 0# ());
  (#"stringextraction.ads" 28 0 0# ());
  (#"stringextraction.ads" 28 0 0# ());
  (#"stringextraction.ads" 23 0 0# ());
  (#"stringextraction.ads" 24 0 0# ());
  (#"stringextraction.ads" 23 0 0# ());
  (#"stringextraction.ads" 22 0 0# ());
  (#"stringextraction.ads" 32 0 0# ());
  (#"stringextraction.ads" 40 0 0# ());
  (#"stringextraction.ads" 34 0 0# ());
  (#"stringextraction.ads" 35 0 0# ());
  (#"stringextraction.ads" 36 0 0# ());
  (#"stringextraction.ads" 34 0 0# ());
  (#"stringextraction.ads" 47 0 0# ());
  (#"stringextraction.ads" 50 0 0# ());
  (#"stringextraction.ads" 50 0 0# ());
  (#"stringextraction.ads" 50 0 0# ());
  (#"stringextraction.ads" 47 0 0# ());
  (#"stringextraction.ads" 50 0 0# ());
  (#"stringextraction.adb" 1 0 0# ());
  (#"stringextraction.adb" 3 0 0# ());
  (#"stringextraction.adb" 22 0 0# ());
  (#"stringextraction.adb" 96 0 0# ());
  ( "GP_Sloc:stringextraction.adb:167:1" (#"stringextraction.adb" 167 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "is_contained" defined at stringextraction.ads:47, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__is_contained__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__is_contained__char
 use        Stringextraction__is_contained__given_string
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__is_contained__char___axiom
 use        Stringextraction__is_contained__given_string___axiom

 val stringextraction__is_contained__result "model_projected" "model_trace:3681@result" "name:Is_Contained"  : bool__ref 
 
 let def #"stringextraction.ads" 47 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:47" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 47 0 0# true }
  ensures { #"stringextraction.ads" 47 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:47 *)
  ;
  #"stringextraction.ads" 47 0 0# assume { #"stringextraction.ads" 47 0 0# (Standard__character___axiom.dynamic_invariant Stringextraction__is_contained__char.char True False True True) };
  #"stringextraction.ads" 47 0 0# assume { #"stringextraction.ads" 47 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__is_contained__given_string.given_string True False True True) };
  #"stringextraction.ads" 47 0 0# assume { #"stringextraction.ads" 47 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:47 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:47 *)
  ;
  #"stringextraction.ads" 47 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:47 *)
  ;
  #"stringextraction.ads" 47 0 0# assume { #"stringextraction.ads" 47 0 0# true };
  #"stringextraction.ads" 47 0 0# try
   ( ( "GP_Sloc:stringextraction.ads:48:8" (#"stringextraction.ads" 48 0 0# ( #"stringextraction.ads" 48 0 0# stringextraction__is_contained__result.bool__content <- ( ( (let k = #"stringextraction.ads" 48 0 0# (any int
   ) in (
    (if ((Boolean.andb((( #"stringextraction.ads" 48 0 0# abstract ensures {true}(let _ = Stringextraction__is_contained__given_string.given_string in (
     ()))
     end ;
    (Standard__string.first(Stringextraction__is_contained__given_string.given_string)) ) <= k)) ((k <= ( #"stringextraction.ads" 48 0 0# abstract ensures {true}(let _ = Stringextraction__is_contained__given_string.given_string in (
     ()))
     end ;
    (Standard__string.last(Stringextraction__is_contained__given_string.given_string)) ))))) then (
     #"stringextraction.ads" 48 0 0# abstract ensures {true}(let _ = (Stringextraction__is_contained__char.char = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__is_contained__given_string.given_string))) (( #"stringextraction.ads" 48 0 0# assert { #"stringextraction.ads" 48 0 0# (#"stringextraction.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.ads:48:64" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:      (for some K in Given_String'Range => char = Given_string(K));
                                                               ^ stringextraction.ads:48:64:VC_INDEX_CHECK" "GP_Shape:return__forsome__cmp__ixdcomp" ( ((Standard__string.first Stringextraction__is_contained__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__is_contained__given_string.given_string)) ) )) };
     k )))))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists k  : int.
    ( ( ((Standard__string.first Stringextraction__is_contained__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__is_contained__given_string.given_string)) ) /\ (Stringextraction__is_contained__char.char = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__is_contained__given_string.given_string) k))) )) )} 
   ) ) );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  stringextraction__is_contained__result.bool__content )
end

(* Module for defining the value of the aggregate at stringextraction.adb:23, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_vowels__result__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Stringextraction__extract_vowels__T11b
 use        Stringextraction__extract_vowels__result__aggregate_def
 use        Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___254   temp___255   temp___256   : int.
   (let temp___253 = (Stringextraction__extract_vowels__result__aggregate_def.stringextraction__extract_vowels__result__aggregate_def temp___254 temp___255 temp___256) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___254 True True True True)) then (
     ( (if ((Standard__string.dynamic_property Standard__positive.first Standard__positive.last temp___255 temp___256)) then (
      ( ((Stringextraction__extract_vowels__T11b.first temp___253) = temp___255) /\ ((Stringextraction__extract_vowels__T11b.last temp___253) = temp___256) )) else true) /\ (forall temp___257   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Stringextraction__extract_vowels__T11b.to_array temp___253) temp___257)) = temp___254)) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "extract_vowels" defined at stringextraction.ads:8, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__extract_vowels__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Standard__string___axiom
 use        Stringextraction__is_contained
 use        Stringextraction__is_contained___axiom
 use        Stringextraction__vowels
 use        Temp___String_Literal_154
 use        Stringextraction__extract_vowels__given_string
 use        Stringextraction__extract_vowels__TresultS
 use        Stringextraction__extract_vowels__T11b
 use        Array__Int__Standard__character
 use        Stringextraction__extract_vowels__result
 use        Stringextraction__extract_vowels__result_index
 use        Stringextraction__extract_vowels__previous_index
 use        Stringextraction__extract_vowels__match_found
 use        Stringextraction__extract_vowels__L_2
 use        Stringextraction__extract_vowels__L_2__T14b
 use        Stringextraction__extract_vowels__L_2__j
 use        Stringextraction__extract_vowels__R42b
 use        Stringextraction__extract_vowels__T44b
 use        Stringextraction__extract_vowels__result__aggregate_def
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Temp___String_Literal_261
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Temp___String_Literal_289
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__extract_vowels__result___axiom
 use        Stringextraction__extract_vowels__result__aggregate_def___axiom
 use        Stringextraction__extract_vowels__result_index___axiom
 use        Stringextraction__extract_vowels__previous_index___axiom
 use        Stringextraction__extract_vowels__match_found___axiom
 use        Stringextraction__extract_vowels__L_2__j___axiom
 use        Stringextraction__extract_vowels__L_2___axiom
 use        Stringextraction__vowels___axiom
 use        Stringextraction__extract_vowels__given_string___axiom
 use        Stringextraction__is_contained___axiom
 use        Stringextraction__extract_vowels__TresultS___axiom
 use        Stringextraction__extract_vowels__TTresultSP1___axiom
 use        Stringextraction__extract_vowels__T10b___axiom
 use        Stringextraction__extract_vowels__T11b___axiom
 use        Stringextraction__extract_vowels__L_2__T14b___axiom
 use        Stringextraction__extract_vowels__R42b___axiom
 use        Stringextraction__extract_vowels__T43b___axiom
 use        Stringextraction__extract_vowels__T44b___axiom

 val stringextraction__extract_vowels__result "model_projected" "model_trace:3352@result" "name:Extract_Vowels"  : Standard__string.string__ref 
 
 let def #"stringextraction.ads" 8 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:8" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 8 0 0# true }
  ensures { #"stringextraction.ads" 8 0 0# (#"stringextraction.ads" 16 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:stringextraction.ads:16:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:43" "comment:       Post => Extract_Vowels'Result'Length <= Given_string'Length
               ^ stringextraction.ads:16:16:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" ( ( "GP_Pretty_Ada:3939" "GP_Sloc:stringextraction.ads:16:16" ((Standard__string.length stringextraction__extract_vowels__result.Standard__string.string__content) <= (Standard__string.length Stringextraction__extract_vowels__given_string.given_string)) ) /\ (forall j #"stringextraction.ads" 16 0 0#  "model" "name:J" "model_trace:3430"  : int.
   ( ( ((Standard__string.first stringextraction__extract_vowels__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_vowels__result.Standard__string.string__content)) ) -> ( "GP_Pretty_Ada:3449" "GP_Sloc:stringextraction.ads:18:20" ((epsilon temp___result_296 : bool.
    ( (temp___result_296 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_vowels__result.Standard__string.string__content) j)) Stringextraction__extract_vowels__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_296 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_vowels__result.Standard__string.string__content) j)) Stringextraction__extract_vowels__given_string.given_string) )) = True) ) )) ) )) }
   =
  (  assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__vowels.vowels True False True True) };
  (let temp___295 = (Standard__string.of_array (Temp___String_Literal_154.temp___String_Literal_154 ()) 1 22) in (
    assume {  (temp___295 = Stringextraction__vowels.vowels) }))
  ;
  () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:8 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__extract_vowels__given_string.given_string True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:8 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:8 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_vowels__given_string.given_string)) ) <= 500) && ( ((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
   ()))
   end ;
  (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) = 1) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_vowels__given_string.given_string)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.ads" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:14:33" "GP_Id:42" "comment:                   Given_string(J) /= Character'Val(0)),
                                ^ stringextraction.ads:14:33:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
    j ))))) <> 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3398"  : int.
   ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j)) <> 0) )) )} 
  ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:8 *)
  ;
   assume {  ( ((Standard__string.length Stringextraction__extract_vowels__given_string.given_string) <= 500) /\ ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) = 1) /\ (forall j   "model" "name:J" "model_trace:3398"  : int.
   ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) j)) <> 0) )) ) ) };
   try
   ( (#"stringextraction.adb" 22 0 0# ());
   (#"stringextraction.adb" 23 0 0# ( #"stringextraction.adb" 23 0 0# abstract ensures {true}(let _ = ( #"stringextraction.adb" 23 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_vowels__given_string.given_string)) ) in (
    ()))
    end ;
   #"stringextraction.adb" 23 0 0# abstract ensures {true}(let _ = ( #"stringextraction.adb" 23 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) in (
    ()))
    end ;
   (#"stringextraction.adb" 23 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:23:7" "GP_Reason:VC_RANGE_CHECK" "GP_Id:1" "comment:      result : String (Given_string'First .. Given_string'Last) := (others => Character'Val(0));
      ^ stringextraction.adb:23:7:VC_RANGE_CHECK" #"stringextraction.adb" 23 0 0# (any unit
   requires {#"stringextraction.adb" 23 0 0# ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) -> ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) >= Standard__positive.first) /\ ((Standard__string.last Stringextraction__extract_vowels__given_string.given_string) <= Standard__positive.last) ) )} 
   ensures {#"stringextraction.adb" 23 0 0# true} 
   ) )) ));
   (#"stringextraction.adb" 23 0 0# ( (let stringextraction__extract_vowels__result__assume = (let temp___259 = (let temp___258 = (Stringextraction__extract_vowels__result__aggregate_def.stringextraction__extract_vowels__result__aggregate_def(0) ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) ((Standard__string.last Stringextraction__extract_vowels__given_string.given_string))) in (
    ( #"stringextraction.adb" 23 0 0# assume { #"stringextraction.adb" 23 0 0# ((Stringextraction__extract_vowels__T11b.first temp___258) = (Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) };
    #"stringextraction.adb" 23 0 0# assume { #"stringextraction.adb" 23 0 0# ((Stringextraction__extract_vowels__T11b.last temp___258) = (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) };
    temp___258 )))
    in (
    ( #"stringextraction.adb" 23 0 0# assert { #"stringextraction.adb" 23 0 0# (#"stringextraction.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:23:68" "GP_Reason:VC_LENGTH_CHECK" "GP_Id:2" "comment:      result : String (Given_string'First .. Given_string'Last) := (others => Character'Val(0));
                                                                   ^ stringextraction.adb:23:68:VC_LENGTH_CHECK" "GP_Shape:result_decl__aggr" ((if (((Stringextraction__extract_vowels__T11b.first(temp___259)) <= (Stringextraction__extract_vowels__T11b.last(temp___259)))) then (
     (((Stringextraction__extract_vowels__T11b.last(temp___259)) - (Stringextraction__extract_vowels__T11b.first(temp___259))) + 1)) else (
     0)) = (if (((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string))) then (
     (((Standard__string.last Stringextraction__extract_vowels__given_string.given_string) - (Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) + 1)) else (
     0))) )) };
    (Stringextraction__extract_vowels__TresultS.of_array((Array__Int__Standard__character.slide((Stringextraction__extract_vowels__T11b.to_array(temp___259))) ((Stringextraction__extract_vowels__T11b.first(temp___259))) ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string)))) ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) ((Standard__string.last Stringextraction__extract_vowels__given_string.given_string))) )))
    in (
    (  Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content <- ( (Stringextraction__extract_vowels__TresultS.to_array(stringextraction__extract_vowels__result__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____first)) = (Stringextraction__extract_vowels__TresultS.first(stringextraction__extract_vowels__result__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____last)) = (Stringextraction__extract_vowels__TresultS.last(stringextraction__extract_vowels__result__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Stringextraction__extract_vowels__TresultS.dynamic_property (Standard__string.first Stringextraction__extract_vowels__given_string.given_string) (Standard__string.last Stringextraction__extract_vowels__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) = (Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last) = (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) ))) } ));
   (#"stringextraction.adb" 24 0 0# ());
   (#"stringextraction.adb" 24 0 0# ( #"stringextraction.adb" 24 0 0# Stringextraction__extract_vowels__result_index.result_index.int__content <- ( (#"stringextraction.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:stringextraction.adb:24:40" "GP_Id:3" "comment:      result_index : Positive := result'First;
                                       ^ stringextraction.adb:24:40:VC_RANGE_CHECK" "GP_Shape:result_index_decl__first_ref" (Standard__positive.range_check_((Standard__integer__rep.to_rep(( #"stringextraction.adb" 24 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
    ()))
    end ;
   Stringextraction__extract_vowels__result.result____first ))))) )) );
    assume {  (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_vowels__result_index.result_index.int__content True False True True) } ));
   (#"stringextraction.adb" 26 0 0# ());
   (#"stringextraction.adb" 26 0 0# ( #"stringextraction.adb" 26 0 0# Stringextraction__extract_vowels__previous_index.previous_index.int__content <- ( Stringextraction__extract_vowels__result_index.result_index.int__content );
   #"stringextraction.adb" 26 0 0# assume { #"stringextraction.adb" 26 0 0# (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_vowels__previous_index.previous_index.int__content True False True True) } ));
   (#"stringextraction.adb" 27 0 0# ());
   (#"stringextraction.adb" 27 0 0# ());
   (#"stringextraction.adb" 34 0 0# ());
   ( "GP_Sloc:stringextraction.adb:29:7" (#"stringextraction.adb" 29 0 0# (if ((( #"stringextraction.adb" 29 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.length(Stringextraction__extract_vowels__given_string.given_string)) ) = 0)) then (
    ( "GP_Sloc:stringextraction.adb:30:10" (#"stringextraction.adb" 30 0 0# ( #"stringextraction.adb" 30 0 0# stringextraction__extract_vowels__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_261.temp___String_Literal_261(()))) (1) (0)) );
    #"stringextraction.adb" 30 0 0# raise Return__exc )) )) else (
    ()))) );
   ( "GP_Sloc:stringextraction.adb:34:35" (#"stringextraction.adb" 34 0 0# (let temp___262 = ( #"stringextraction.adb" 34 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) in (
   (let temp___263 = ( #"stringextraction.adb" 34 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_vowels__given_string.given_string)) ) in (
    ( #"stringextraction.adb" 34 0 0# Stringextraction__extract_vowels__L_2__j.j.int__content <- ( temp___262 );
    () (* Translation of an Ada loop from stringextraction.adb:34 *)
    ;
    (if ((Boolean.andb((temp___262 <= Stringextraction__extract_vowels__L_2__j.j.int__content)) ((Stringextraction__extract_vowels__L_2__j.j.int__content <= temp___263)))) then (
     #"stringextraction.adb" 34 0 0# try
      ( #"stringextraction.adb" 34 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__previous_index.previous_index.int__content in (
       ()))
       end ;
      (let temp___270 = #"stringextraction.adb" 34 0 0# (any int
      ensures {#"stringextraction.adb" 34 0 0# (result = Stringextraction__extract_vowels__previous_index.previous_index.int__content)} 
      ) in (
       ( #"stringextraction.adb" 34 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result_index.result_index.int__content in (
        ()))
        end ;
       (let temp___269 = #"stringextraction.adb" 34 0 0# (any int
       ensures {#"stringextraction.adb" 34 0 0# (result = Stringextraction__extract_vowels__result_index.result_index.int__content)} 
       ) in (
        ( #"stringextraction.adb" 34 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__L_2__j.j.int__content in (
         ()))
         end ;
        (let temp___268 = #"stringextraction.adb" 34 0 0# (any int
        ensures {#"stringextraction.adb" 34 0 0# (result = Stringextraction__extract_vowels__L_2__j.j.int__content)} 
        ) in (
         ( #"stringextraction.adb" 34 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
          ()))
          end ;
         (let temp___266 = #"stringextraction.adb" 34 0 0# (any Array__Int__Standard__character.map
         ensures {#"stringextraction.adb" 34 0 0# (result = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content)} 
         ) in (
          ( #"stringextraction.adb" 34 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__match_found.match_found.bool__content in (
           ()))
           end ;
          (let temp___264 = #"stringextraction.adb" 34 0 0# (any bool
          ensures {#"stringextraction.adb" 34 0 0# (result = Stringextraction__extract_vowels__match_found.match_found.bool__content)} 
          ) in (
           ( () (* First unroling of the loop statements appearing before the loop invariant of loop stringextraction.adb:34 *)
           ;
           ( "GP_Sloc:stringextraction.adb:36:13" (#"stringextraction.adb" 36 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:36:10" (#"stringextraction.adb" 36 0 0# (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_2__j.j.int__content))))) (Stringextraction__vowels.vowels))) then (
            ( ( "GP_Sloc:stringextraction.adb:37:13" (#"stringextraction.adb" 37 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:37:20" (#"stringextraction.adb" 37 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:37:34" (#"stringextraction.adb" 37 0 0# #"stringextraction.adb" 37 0 0# Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 37 0 0# assert { #"stringextraction.adb" 37 0 0# (#"stringextraction.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:37:20" "GP_Id:4" "comment:            result(result_index) := Given_string(J);
                   ^ stringextraction.adb:37:20:VC_INDEX_CHECK" "GP_Shape:L_2_while__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__result_index.result_index.int__content) /\ (Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
            Stringextraction__extract_vowels__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_2__j.j.int__content)))))))) )) );
            ( "GP_Sloc:stringextraction.adb:40:13" (#"stringextraction.adb" 40 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:40:25" (#"stringextraction.adb" 40 0 0# #"stringextraction.adb" 40 0 0# Stringextraction__extract_vowels__match_found.match_found.bool__content <- ( (Boolean.of_int(1)) )) );
            ( "GP_Sloc:stringextraction.adb:41:13" (#"stringextraction.adb" 41 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:41:31" (#"stringextraction.adb" 41 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:41:28" (#"stringextraction.adb" 41 0 0# #"stringextraction.adb" 41 0 0# Stringextraction__extract_vowels__previous_index.previous_index.int__content <- ( Stringextraction__extract_vowels__result_index.result_index.int__content )) );
            ( "GP_Sloc:stringextraction.adb:43:16" (#"stringextraction.adb" 43 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:43:31" (#"stringextraction.adb" 43 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:43:13" (#"stringextraction.adb" 43 0 0# (if ((Stringextraction__extract_vowels__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 43 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_vowels__result.result____last ))))) then (
             ( ( "GP_Sloc:stringextraction.adb:44:16" (#"stringextraction.adb" 44 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:44:32" (#"stringextraction.adb" 44 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:44:29" (#"stringextraction.adb" 44 0 0# #"stringextraction.adb" 44 0 0# Stringextraction__extract_vowels__result_index.result_index.int__content <- ( (#"stringextraction.adb" 44 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:44:45" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:5" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:44:45:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_vowels__result_index.result_index.int__content + 1))) )) )) ) )) else (
             ()))) ) )) else (
            ( ( "GP_Sloc:stringextraction.adb:47:13" (#"stringextraction.adb" 47 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:47:25" (#"stringextraction.adb" 47 0 0# #"stringextraction.adb" 47 0 0# Stringextraction__extract_vowels__match_found.match_found.bool__content <- ( (Boolean.of_int(0)) )) ) )))) );
           ( "GP_Sloc:stringextraction.adb:56:35" (#"stringextraction.adb" 56 0 0# ()) );
           () (* While loop translating the Ada loop from stringextraction.adb:34 *)
           ;
            while True do
            invariant { 
             (#"stringextraction.adb" 50 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:50:32" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:6" "comment:         pragma Loop_Invariant(result_index in result'Range);
                               ^ stringextraction.adb:50:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__in" ( "GP_Pretty_Ada:2567" "GP_Sloc:stringextraction.adb:50:32" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__result_index.result_index.int__content) /\ (Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__in" "GP_Sloc:stringextraction.adb:51:32" "GP_Id:7" "comment:         pragma Loop_Invariant(previous_index in result'Range);
                               ^ stringextraction.adb:51:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2574" "GP_Sloc:stringextraction.adb:51:32" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__previous_index.previous_index.int__content) /\ (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 52 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:52:32" "GP_Id:9" "comment:         pragma Loop_Invariant(result_index <= J + 1);
                               ^ stringextraction.adb:52:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__cmp" ( "GP_Pretty_Ada:2581" "GP_Sloc:stringextraction.adb:52:32" (Stringextraction__extract_vowels__result_index.result_index.int__content <= (Stringextraction__extract_vowels__L_2__j.j.int__content + 1)) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 53 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__cmp" "GP_Sloc:stringextraction.adb:53:32" "GP_Id:10" "comment:         pragma Loop_Invariant(previous_index <= result_index);
                               ^ stringextraction.adb:53:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2589" "GP_Sloc:stringextraction.adb:53:32" (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= Stringextraction__extract_vowels__result_index.result_index.int__content) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 54 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__cmp" "GP_Sloc:stringextraction.adb:54:32" "GP_Id:11" "comment:         pragma Loop_Invariant(previous_index <= J);
                               ^ stringextraction.adb:54:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2595" "GP_Sloc:stringextraction.adb:54:32" (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= Stringextraction__extract_vowels__L_2__j.j.int__content) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:56:32" "GP_Id:13" "comment:         pragma Loop_Invariant(if Is_Contained(Given_String(J), vowels) then
                               ^ stringextraction.adb:56:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__if" (if (((epsilon temp___result_271 : bool.
              ( (temp___result_271 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_271 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content)) Stringextraction__vowels.vowels) )) = True)) then (
              ( "GP_Pretty_Ada:2605" "GP_Sloc:stringextraction.adb:57:35" (Stringextraction__extract_vowels__match_found.match_found.bool__content = True) )) else (
              ( "GP_Pretty_Ada:5188" "GP_Sloc:stringextraction.adb:56:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 58 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__if" "GP_Sloc:stringextraction.adb:58:32" "GP_Id:16" "comment:         pragma Loop_Invariant(if match_found then
                               ^ stringextraction.adb:58:32:VC_LOOP_INVARIANT" (if ((Stringextraction__extract_vowels__match_found.match_found.bool__content = True)) then (
              ( "GP_Pretty_Ada:2615" "GP_Sloc:stringextraction.adb:59:35" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content Stringextraction__extract_vowels__previous_index.previous_index.int__content)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content))) )) else (
              ( "GP_Pretty_Ada:5197" "GP_Sloc:stringextraction.adb:58:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 60 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__if" "GP_Sloc:stringextraction.adb:60:32" "GP_Id:18" "comment:         pragma Loop_Invariant(if match_found then
                               ^ stringextraction.adb:60:32:VC_LOOP_INVARIANT" (if ((Stringextraction__extract_vowels__match_found.match_found.bool__content = True)) then (
              ( "GP_Pretty_Ada:2628" "GP_Sloc:stringextraction.adb:61:35" ((epsilon temp___result_272 : bool.
               ( (temp___result_272 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content Stringextraction__extract_vowels__previous_index.previous_index.int__content)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_272 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content Stringextraction__extract_vowels__previous_index.previous_index.int__content)) Stringextraction__vowels.vowels) )) = True) )) else (
              ( "GP_Pretty_Ada:5205" "GP_Sloc:stringextraction.adb:60:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 62 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__if" "GP_Sloc:stringextraction.adb:62:32" "GP_Id:20" "comment:         pragma Loop_Invariant(if match_found then
                               ^ stringextraction.adb:62:32:VC_LOOP_INVARIANT" (if ((Stringextraction__extract_vowels__match_found.match_found.bool__content = True)) then (
              ( "GP_Pretty_Ada:2639" "GP_Sloc:stringextraction.adb:63:35" ((epsilon temp___result_273 : bool.
               ( (temp___result_273 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_273 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last))) )) = True) )) else (
              ( "GP_Pretty_Ada:5214" "GP_Sloc:stringextraction.adb:62:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 64 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__if" "GP_Sloc:stringextraction.adb:64:32" "GP_Id:22" "comment:         pragma Loop_Invariant(if not match_found then
                               ^ stringextraction.adb:64:32:VC_LOOP_INVARIANT" (if (not ( (Stringextraction__extract_vowels__match_found.match_found.bool__content = True) )) then (
              ( "GP_Pretty_Ada:2646" "GP_Sloc:stringextraction.adb:65:35" not ( ((epsilon temp___result_274 : bool.
               ( (temp___result_274 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_274 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last))) )) = True) ) )) else (
              ( "GP_Pretty_Ada:5223" "GP_Sloc:stringextraction.adb:64:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 67 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:67:32" "GP_Id:25" "comment:         pragma Loop_Invariant(for all K in result'Range =>
                               ^ stringextraction.adb:67:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" (forall k #"stringextraction.adb" 67 0 0#  "model" "model_trace:2658" "name:K"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
               ( "GP_Pretty_Ada:2681" "GP_Sloc:stringextraction.adb:69:41" ((epsilon temp___result_276 : bool.
                ( (temp___result_276 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_276 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string) )) = True) )) else (
               ( "GP_Pretty_Ada:5260" "GP_Sloc:stringextraction.adb:68:36" true ))) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 70 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" "GP_Sloc:stringextraction.adb:70:32" "GP_Id:28" "comment:         pragma Loop_Invariant(for all K in result'Range =>
                               ^ stringextraction.adb:70:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 70 0 0#  "model" "name:K" "model_trace:2687"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
               ( "GP_Pretty_Ada:2710" "GP_Sloc:stringextraction.adb:72:40" ((epsilon temp___result_278 : bool.
                ( (temp___result_278 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_278 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels) )) = True) )) else (
               ( "GP_Pretty_Ada:5315" "GP_Sloc:stringextraction.adb:71:35" true ))) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 73 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" "GP_Sloc:stringextraction.adb:73:32" "GP_Id:31" "comment:         pragma Loop_Invariant(for all K in result'Range =>
                               ^ stringextraction.adb:73:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 73 0 0#  "model" "name:K" "model_trace:2716"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) -> (if (not ( ((epsilon temp___result_280 : bool.
               ( (temp___result_280 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_280 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels) )) = True) )) then (
               ( "GP_Pretty_Ada:2737" "GP_Sloc:stringextraction.adb:75:38" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) = 0) )) else (
               ( "GP_Pretty_Ada:5370" "GP_Sloc:stringextraction.adb:74:35" true ))) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 76 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" "GP_Sloc:stringextraction.adb:76:32" "GP_Id:33" "comment:         pragma Loop_Invariant(for all K in result'First .. result_index - 1 =>
                               ^ stringextraction.adb:76:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 76 0 0#  "model" "name:K" "model_trace:2746"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Stringextraction__extract_vowels__result_index.result_index.int__content - 1)) ) -> ( "GP_Pretty_Ada:2766" "GP_Sloc:stringextraction.adb:77:34" ((epsilon temp___result_282 : bool.
               ( (temp___result_282 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_282 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels) )) = True) ) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 78 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" "GP_Sloc:stringextraction.adb:78:32" "GP_Id:35" "comment:         pragma Loop_Invariant(for all K in result'First .. result_index - 1 =>
                               ^ stringextraction.adb:78:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 78 0 0#  "model" "name:K" "model_trace:2771"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Stringextraction__extract_vowels__result_index.result_index.int__content - 1)) ) -> ( "GP_Pretty_Ada:2791" "GP_Sloc:stringextraction.adb:79:34" ((epsilon temp___result_284 : bool.
               ( (temp___result_284 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_284 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string) )) = True) ) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 80 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" "GP_Sloc:stringextraction.adb:80:32" "GP_Id:38" "comment:         pragma Loop_Invariant(for all K in Given_string'First .. J =>
                               ^ stringextraction.adb:80:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 80 0 0#  "model" "name:K" "model_trace:2796"  : int.
              ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= Stringextraction__extract_vowels__L_2__j.j.int__content) ) -> (if (((epsilon temp___result_288 : bool.
               ( (temp___result_288 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_288 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) Stringextraction__vowels.vowels) )) = True)) then (
               ( "GP_Pretty_Ada:2820" "GP_Sloc:stringextraction.adb:82:35" ((epsilon temp___result_287 : bool.
                ( (temp___result_287 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_287 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last))) )) = True) )) else (
               ( "GP_Pretty_Ada:5597" "GP_Sloc:stringextraction.adb:81:36" true ))) )) ))
             }
            ( () (* Assume implicit invariants from the loop stringextraction.adb:34 *)
            ;
             assume {  (Boolean.andb(( ( ( ( ( ( ( ( ( ( true /\ true ) /\ true ) /\ (if (True) then (
             true) else (
             ( (Stringextraction__extract_vowels__TresultS.dynamic_property (Standard__string.first Stringextraction__extract_vowels__given_string.given_string) (Standard__string.last Stringextraction__extract_vowels__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) = (Standard__string.first Stringextraction__extract_vowels__given_string.given_string)) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last) = (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) ))) ) /\ true ) /\ (if (((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string))) then (
             (Stringextraction__extract_vowels__L_2__T14b.dynamic_property (Standard__string.first Stringextraction__extract_vowels__given_string.given_string) (Standard__string.last Stringextraction__extract_vowels__given_string.given_string) Stringextraction__extract_vowels__L_2__j.j.int__content)) else true) ) /\ true ) /\ (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_vowels__result_index.result_index.int__content False True True True) ) /\ true ) /\ (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_vowels__previous_index.previous_index.int__content False True True True) ) /\ true )) (( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= Stringextraction__extract_vowels__L_2__j.j.int__content) /\ (Stringextraction__extract_vowels__L_2__j.j.int__content <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ))) };
            () (* Check for absence of RTE in the invariant of loop stringextraction.adb:34 *)
            ;
             abstract ensures {true}(let _ = (Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_vowels__result.result____first ))) <= Stringextraction__extract_vowels__result_index.result_index.int__content)) ((Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_vowels__result.result____last )))))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_vowels__result.result____first ))) <= Stringextraction__extract_vowels__previous_index.previous_index.int__content)) ((Stringextraction__extract_vowels__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_vowels__result.result____last )))))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Stringextraction__extract_vowels__result_index.result_index.int__content <= (#"stringextraction.adb" 52 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:stringextraction.adb:52:50" "GP_Id:8" "comment:         pragma Loop_Invariant(result_index <= J + 1);
                                                 ^ stringextraction.adb:52:50:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__cmp__add" (Standard__integer.range_check_((Stringextraction__extract_vowels__L_2__j.j.int__content + 1))) ))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= Stringextraction__extract_vowels__result_index.result_index.int__content) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= Stringextraction__extract_vowels__L_2__j.j.int__content) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:56:61" "GP_Id:12" "comment:         pragma Loop_Invariant(if Is_Contained(Given_String(J), vowels) then
                                                            ^ stringextraction.adb:56:61:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__if__call_is_contained__ixdcomp" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= Stringextraction__extract_vowels__L_2__j.j.int__content) /\ (Stringextraction__extract_vowels__L_2__j.j.int__content <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
            Stringextraction__extract_vowels__L_2__j.j.int__content )))))) (Stringextraction__vowels.vowels))) then (
             Stringextraction__extract_vowels__match_found.match_found.bool__content) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (Stringextraction__extract_vowels__match_found.match_found.bool__content) then (
             ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:59:42" "GP_Id:14" "comment:                                  result(previous_index) = Given_string(J));
                                         ^ stringextraction.adb:59:42:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__previous_index.previous_index.int__content) /\ (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
             Stringextraction__extract_vowels__previous_index.previous_index.int__content ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 59 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:59:73" "GP_Id:15" "comment:                                  result(previous_index) = Given_string(J));
                                                                        ^ stringextraction.adb:59:73:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= Stringextraction__extract_vowels__L_2__j.j.int__content) /\ (Stringextraction__extract_vowels__L_2__j.j.int__content <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
             Stringextraction__extract_vowels__L_2__j.j.int__content ))))))) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (Stringextraction__extract_vowels__match_found.match_found.bool__content) then (
             (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 61 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:61:55" "GP_Id:17" "comment:                                  Is_Contained(result(previous_index), vowels));
                                                      ^ stringextraction.adb:61:55:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__previous_index.previous_index.int__content) /\ (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
             Stringextraction__extract_vowels__previous_index.previous_index.int__content )))))) (Stringextraction__vowels.vowels))) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (Stringextraction__extract_vowels__match_found.match_found.bool__content) then (
             (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 63 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:63:61" "GP_Id:19" "comment:                                  Is_Contained(Given_String(J), result));
                                                            ^ stringextraction.adb:63:61:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= Stringextraction__extract_vowels__L_2__j.j.int__content) /\ (Stringextraction__extract_vowels__L_2__j.j.int__content <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
             Stringextraction__extract_vowels__L_2__j.j.int__content )))))) ((Standard__string.of_array(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____first))) ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____last))))))) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (not ( Stringextraction__extract_vowels__match_found.match_found.bool__content )) then (
             not ( (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 65 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:65:65" "GP_Id:21" "comment:                                  not Is_Contained(Given_string(J), result));
                                                                ^ stringextraction.adb:65:65:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__if__not__call_is_contained__ixdcomp" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= Stringextraction__extract_vowels__L_2__j.j.int__content) /\ (Stringextraction__extract_vowels__L_2__j.j.int__content <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
             Stringextraction__extract_vowels__L_2__j.j.int__content )))))) ((Standard__string.of_array(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____first))) ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____last)))))) )) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____first ))) <= k)) ((k <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____last ))))))) then (
               abstract ensures {true}(let _ = (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 68 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:68:46" "GP_Id:24" "comment:                                  (if result(K) /= Character'Val(0) then
                                             ^ stringextraction.adb:68:46:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
              k ))))) <> 0)) then (
               (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 69 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:69:61" "GP_Id:23" "comment:                                        Is_Contained(result(K), Given_string)));
                                                            ^ stringextraction.adb:69:61:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__call_is_contained__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
               k )))))) (Stringextraction__extract_vowels__given_string.given_string))) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "model_trace:2658" "name:K"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
              ((epsilon temp___result_275 : bool.
               ( (temp___result_275 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_275 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string) )) = True)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____first ))) <= k)) ((k <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____last ))))))) then (
               abstract ensures {true}(let _ = (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 71 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:71:45" "GP_Id:27" "comment:                                 (if result(K) /= Character'Val(0) then
                                            ^ stringextraction.adb:71:45:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
              k ))))) <> 0)) then (
               (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 72 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:72:60" "GP_Id:26" "comment:                                       Is_Contained(result(K), vowels)));
                                                           ^ stringextraction.adb:72:60:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
               k )))))) (Stringextraction__vowels.vowels))) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2687"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
              ((epsilon temp___result_277 : bool.
               ( (temp___result_277 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_277 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels) )) = True)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____first ))) <= k)) ((k <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____last ))))))) then (
               abstract ensures {true}(let _ = (if (not ( (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 74 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:74:62" "GP_Id:30" "comment:                                 (if not Is_Contained(result(K), vowels) then
                                                             ^ stringextraction.adb:74:62:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__not__call_is_contained__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
              k )))))) (Stringextraction__vowels.vowels)) )) then (
               ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 75 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:75:45" "GP_Id:29" "comment:                                     result(K) = Character'Val(0)));
                                            ^ stringextraction.adb:75:45:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
               k ))))) = 0)) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2716"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) -> (if (not ( ((epsilon temp___result_279 : bool.
              ( (temp___result_279 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_279 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels) )) = True) )) then (
              ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) = 0)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____first ))) <= k)) ((k <= (Stringextraction__extract_vowels__result_index.result_index.int__content - 1))))) then (
               abstract ensures {true}(let _ = (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 77 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:77:54" "GP_Id:32" "comment:                                 Is_Contained(result(K), vowels));
                                                     ^ stringextraction.adb:77:54:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__call_is_contained__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
              k )))))) (Stringextraction__vowels.vowels)) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2746"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Stringextraction__extract_vowels__result_index.result_index.int__content - 1)) ) -> ((epsilon temp___result_281 : bool.
              ( (temp___result_281 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_281 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__vowels.vowels) )) = True) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____first ))) <= k)) ((k <= (Stringextraction__extract_vowels__result_index.result_index.int__content - 1))))) then (
               abstract ensures {true}(let _ = (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 79 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:79:54" "GP_Id:34" "comment:                                 Is_Contained(result(K), Given_string));
                                                     ^ stringextraction.adb:79:54:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
              k )))))) (Stringextraction__extract_vowels__given_string.given_string)) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2771"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= k) /\ (k <= (Stringextraction__extract_vowels__result_index.result_index.int__content - 1)) ) -> ((epsilon temp___result_283 : bool.
              ( (temp___result_283 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_283 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_vowels__given_string.given_string) )) = True) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
              ()))
              end ;
             (Standard__string.first(Stringextraction__extract_vowels__given_string.given_string)) ) <= k)) ((k <= Stringextraction__extract_vowels__L_2__j.j.int__content)))) then (
               abstract ensures {true}(let _ = (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 81 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:81:65" "GP_Id:37" "comment:                                  (if Is_Contained(Given_String(K), vowels) then
                                                                ^ stringextraction.adb:81:65:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
              k )))))) (Stringextraction__vowels.vowels))) then (
               (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 82 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:82:61" "GP_Id:36" "comment:                                  Is_Contained(Given_String(K), result)));
                                                            ^ stringextraction.adb:82:61:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__extract_vowels__given_string.given_string)) ) )) };
               k )))))) ((Standard__string.of_array(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____first))) ((Standard__integer__rep.to_rep(Stringextraction__extract_vowels__result.result____last))))))) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2796"  : int.
             ( ( ((Standard__string.first Stringextraction__extract_vowels__given_string.given_string) <= k) /\ (k <= Stringextraction__extract_vowels__L_2__j.j.int__content) ) -> (if (((epsilon temp___result_286 : bool.
              ( (temp___result_286 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) Stringextraction__vowels.vowels)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_286 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) Stringextraction__vowels.vowels) )) = True)) then (
              ((epsilon temp___result_285 : bool.
               ( (temp___result_285 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_285 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_vowels__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last))) )) = True)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
            () (* Loop statements appearing after the loop invariant of loop stringextraction.adb:34 *)
            ;
            () (* Check for the exit condition and loop statements appearing before the loop invariant of loop stringextraction.adb:34 *)
            ;
            (if ((Stringextraction__extract_vowels__L_2__j.j.int__content = temp___263)) then (
              raise Stringextraction__extract_vowels__L_2.L_2));
             Stringextraction__extract_vowels__L_2__j.j.int__content <- ( (Stringextraction__extract_vowels__L_2__j.j.int__content + 1) );
            ( "GP_Sloc:stringextraction.adb:36:13" (#"stringextraction.adb" 36 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:36:10" (#"stringextraction.adb" 36 0 0# (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_2__j.j.int__content))))) (Stringextraction__vowels.vowels))) then (
             ( ( "GP_Sloc:stringextraction.adb:37:13" (#"stringextraction.adb" 37 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:37:20" (#"stringextraction.adb" 37 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:37:34" (#"stringextraction.adb" 37 0 0# #"stringextraction.adb" 37 0 0# Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 37 0 0# assert { #"stringextraction.adb" 37 0 0# (#"stringextraction.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:37:20" "GP_Id:4" "comment:            result(result_index) := Given_string(J);
                   ^ stringextraction.adb:37:20:VC_INDEX_CHECK" "GP_Shape:L_2_while__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__result_index.result_index.int__content) /\ (Stringextraction__extract_vowels__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
             Stringextraction__extract_vowels__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_vowels__given_string.given_string))) (Stringextraction__extract_vowels__L_2__j.j.int__content)))))))) )) );
             ( "GP_Sloc:stringextraction.adb:40:13" (#"stringextraction.adb" 40 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:40:25" (#"stringextraction.adb" 40 0 0# #"stringextraction.adb" 40 0 0# Stringextraction__extract_vowels__match_found.match_found.bool__content <- ( (Boolean.of_int(1)) )) );
             ( "GP_Sloc:stringextraction.adb:41:13" (#"stringextraction.adb" 41 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:41:31" (#"stringextraction.adb" 41 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:41:28" (#"stringextraction.adb" 41 0 0# #"stringextraction.adb" 41 0 0# Stringextraction__extract_vowels__previous_index.previous_index.int__content <- ( Stringextraction__extract_vowels__result_index.result_index.int__content )) );
             ( "GP_Sloc:stringextraction.adb:43:16" (#"stringextraction.adb" 43 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:43:31" (#"stringextraction.adb" 43 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:43:13" (#"stringextraction.adb" 43 0 0# (if ((Stringextraction__extract_vowels__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 43 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_vowels__result.result____last ))))) then (
              ( ( "GP_Sloc:stringextraction.adb:44:16" (#"stringextraction.adb" 44 0 0# ()) );
              ( "GP_Sloc:stringextraction.adb:44:32" (#"stringextraction.adb" 44 0 0# ()) );
              ( "GP_Sloc:stringextraction.adb:44:29" (#"stringextraction.adb" 44 0 0# #"stringextraction.adb" 44 0 0# Stringextraction__extract_vowels__result_index.result_index.int__content <- ( (#"stringextraction.adb" 44 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:stringextraction.adb:44:45" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:5" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:44:45:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_vowels__result_index.result_index.int__content + 1))) )) )) ) )) else (
              ()))) ) )) else (
             ( ( "GP_Sloc:stringextraction.adb:47:13" (#"stringextraction.adb" 47 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:47:25" (#"stringextraction.adb" 47 0 0# #"stringextraction.adb" 47 0 0# Stringextraction__extract_vowels__match_found.match_found.bool__content <- ( (Boolean.of_int(0)) )) ) )))) );
            ( "GP_Sloc:stringextraction.adb:56:35" (#"stringextraction.adb" 56 0 0# ()) ) )
           done )))
           )))
          )))
         )))
        )))
       )
     with
      Stringextraction__extract_vowels__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:stringextraction.adb:85:14" (#"stringextraction.adb" 85 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:85:7" (#"stringextraction.adb" 85 0 0# (if (not ( (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 85 0 0# assert { #"stringextraction.adb" 85 0 0# (#"stringextraction.adb" 85 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:85:34" "GP_Id:39" "comment:      if not Is_Contained(result(previous_index), vowels) then
                                 ^ stringextraction.adb:85:34:VC_INDEX_CHECK" "GP_Shape:if__not__call_is_contained__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__previous_index.previous_index.int__content) /\ (Stringextraction__extract_vowels__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) )) };
   Stringextraction__extract_vowels__previous_index.previous_index.int__content )))))) (Stringextraction__vowels.vowels)) )) then (
    ( "GP_Sloc:stringextraction.adb:86:10" (#"stringextraction.adb" 86 0 0# ( #"stringextraction.adb" 86 0 0# stringextraction__extract_vowels__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_289.temp___String_Literal_289(()))) (1) (0)) );
    #"stringextraction.adb" 86 0 0# raise Return__exc )) )) else (
    ()))) );
   ( "GP_Sloc:stringextraction.adb:90:14" (#"stringextraction.adb" 90 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:90:21" (#"stringextraction.adb" 90 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:90:37" (#"stringextraction.adb" 90 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:90:37" (#"stringextraction.adb" 90 0 0# (#"stringextraction.adb" 90 0 0# ( (let stringextraction__extract_vowels__R42b__assume = Stringextraction__extract_vowels__previous_index.previous_index.int__content in (
    #"stringextraction.adb" 90 0 0# assume { #"stringextraction.adb" 90 0 0# (stringextraction__extract_vowels__R42b__assume = Stringextraction__extract_vowels__R42b.r42b) }))
   ;
   #"stringextraction.adb" 90 0 0# assume { #"stringextraction.adb" 90 0 0# (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_vowels__R42b.r42b True False True True) } ))) );
   ( "GP_Sloc:stringextraction.adb:90:7" (#"stringextraction.adb" 90 0 0# ( #"stringextraction.adb" 90 0 0# stringextraction__extract_vowels__result.Standard__string.string__content <- ( (let temp___291 = (let temp___290 = (Standard__integer__rep.to_rep(( #"stringextraction.adb" 90 0 0# abstract ensures {true}(let _ = Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content in (
    ()))
    end ;
   Stringextraction__extract_vowels__result.result____first ))) in (
    (Stringextraction__extract_vowels__T44b.of_array(( #"stringextraction.adb" 90 0 0# assert { #"stringextraction.adb" 90 0 0# (#"stringextraction.adb" 90 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:stringextraction.adb:90:14" "GP_Id:40" "comment:      return result(result'First .. previous_index);
             ^ stringextraction.adb:90:14:VC_RANGE_CHECK" "GP_Shape:return__slice" ( (temp___290 <= Stringextraction__extract_vowels__R42b.r42b) -> ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= temp___290) /\ (temp___290 <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____first) <= Stringextraction__extract_vowels__R42b.r42b) /\ (Stringextraction__extract_vowels__R42b.r42b <= (Standard__integer__rep.to_rep Stringextraction__extract_vowels__result.result____last)) ) ) ) )) };
    Stringextraction__extract_vowels__result.result__.Array__Int__Standard__character.map__content )) (temp___290) (Stringextraction__extract_vowels__R42b.r42b))))
    in (
    (Standard__string.of_array((Stringextraction__extract_vowels__T44b.to_array(temp___291))) ((Stringextraction__extract_vowels__T44b.first(temp___291))) ((Stringextraction__extract_vowels__T44b.last(temp___291))))))
    );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = stringextraction__extract_vowels__result.Standard__string.string__content in (
   ()))
   end ;
  (Standard__string.length(stringextraction__extract_vowels__result.Standard__string.string__content)) ) <= (  abstract ensures {true}(let _ = Stringextraction__extract_vowels__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_vowels__given_string.given_string)) )) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = stringextraction__extract_vowels__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.first(stringextraction__extract_vowels__result.Standard__string.string__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = stringextraction__extract_vowels__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.last(stringextraction__extract_vowels__result.Standard__string.string__content)) ))))) then (
     abstract ensures {true}(let _ = (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(stringextraction__extract_vowels__result.Standard__string.string__content))) ((  assert {  (#"stringextraction.ads" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:18:55" "GP_Id:41" "comment:                   Is_Contained(Extract_Vowels'Result(J), Given_string));
                                                      ^ stringextraction.ads:18:55:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__call_is_contained__ixdcomp" ( ((Standard__string.first stringextraction__extract_vowels__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_vowels__result.Standard__string.string__content)) ) )) };
    j )))))) (Stringextraction__extract_vowels__given_string.given_string)) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3430"  : int.
   ( ( ((Standard__string.first stringextraction__extract_vowels__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_vowels__result.Standard__string.string__content)) ) -> ((epsilon temp___result_293 : bool.
    ( (temp___result_293 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_vowels__result.Standard__string.string__content) j)) Stringextraction__extract_vowels__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_293 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_vowels__result.Standard__string.string__content) j)) Stringextraction__extract_vowels__given_string.given_string) )) = True) )) )} 
  ) ) ) in (
   ()))
   end ;
  stringextraction__extract_vowels__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at stringextraction.adb:97, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Stringextraction__extract_consonants__result__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive
 use        Standard__character
 use        Standard__character___axiom
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Stringextraction__extract_consonants__T47b
 use        Stringextraction__extract_consonants__result__aggregate_def
 use        Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___298   temp___299   temp___300   : int.
   (let temp___297 = (Stringextraction__extract_consonants__result__aggregate_def.stringextraction__extract_consonants__result__aggregate_def temp___298 temp___299 temp___300) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___298 True True True True)) then (
     ( (if ((Standard__string.dynamic_property Standard__positive.first Standard__positive.last temp___299 temp___300)) then (
      ( ((Stringextraction__extract_consonants__T47b.first temp___297) = temp___299) /\ ((Stringextraction__extract_consonants__T47b.last temp___297) = temp___300) )) else true) /\ (forall temp___301   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Stringextraction__extract_consonants__T47b.to_array temp___297) temp___301)) = temp___298)) )) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "extract_consonants" defined at stringextraction.ads:20, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__extract_consonants__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__positive
 use        Standard__positive___axiom
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Standard__string___axiom
 use        Stringextraction__is_contained
 use        Stringextraction__is_contained___axiom
 use        Stringextraction__consonants
 use        Temp___String_Literal_155
 use        Stringextraction__extract_consonants__given_string
 use        Stringextraction__extract_consonants__TresultS
 use        Stringextraction__extract_consonants__T47b
 use        Array__Int__Standard__character
 use        Stringextraction__extract_consonants__result
 use        Stringextraction__extract_consonants__result_index
 use        Stringextraction__extract_consonants__previous_index
 use        Stringextraction__extract_consonants__match_found
 use        Stringextraction__extract_consonants__L_3
 use        Stringextraction__extract_consonants__L_3__T50b
 use        Stringextraction__extract_consonants__L_3__j
 use        Stringextraction__extract_consonants__R78b
 use        Stringextraction__extract_consonants__T80b
 use        Stringextraction__extract_consonants__result__aggregate_def
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Temp___String_Literal_305
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Temp___String_Literal_333
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__extract_consonants__result___axiom
 use        Stringextraction__extract_consonants__result__aggregate_def___axiom
 use        Stringextraction__extract_consonants__result_index___axiom
 use        Stringextraction__extract_consonants__previous_index___axiom
 use        Stringextraction__extract_consonants__match_found___axiom
 use        Stringextraction__extract_consonants__L_3__j___axiom
 use        Stringextraction__extract_consonants__L_3___axiom
 use        Stringextraction__consonants___axiom
 use        Stringextraction__extract_consonants__given_string___axiom
 use        Stringextraction__is_contained___axiom
 use        Stringextraction__extract_consonants__TresultS___axiom
 use        Stringextraction__extract_consonants__TTresultSP1___axiom
 use        Stringextraction__extract_consonants__T46b___axiom
 use        Stringextraction__extract_consonants__T47b___axiom
 use        Stringextraction__extract_consonants__L_3__T50b___axiom
 use        Stringextraction__extract_consonants__R78b___axiom
 use        Stringextraction__extract_consonants__T79b___axiom
 use        Stringextraction__extract_consonants__T80b___axiom

 val stringextraction__extract_consonants__result "model_projected" "model_trace:3450@result" "name:Extract_Consonants"  : Standard__string.string__ref 
 
 let def #"stringextraction.ads" 20 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:20" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 20 0 0# true }
  ensures { #"stringextraction.ads" 20 0 0# (#"stringextraction.ads" 28 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__cmp" "GP_Sloc:stringextraction.ads:28:16" "GP_Id:86" "comment:       Post => Extract_Consonants'Result'Length <= Given_string'Length
               ^ stringextraction.ads:28:16:VC_POSTCONDITION" ( ( "GP_Pretty_Ada:4091" "GP_Sloc:stringextraction.ads:28:16" ((Standard__string.length stringextraction__extract_consonants__result.Standard__string.string__content) <= (Standard__string.length Stringextraction__extract_consonants__given_string.given_string)) ) /\ (forall j #"stringextraction.ads" 28 0 0#  "model" "name:J" "model_trace:3528"  : int.
   ( ( ((Standard__string.first stringextraction__extract_consonants__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_consonants__result.Standard__string.string__content)) ) -> ( "GP_Pretty_Ada:3547" "GP_Sloc:stringextraction.ads:30:20" ((epsilon temp___result_340 : bool.
    ( (temp___result_340 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j)) Stringextraction__extract_consonants__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_340 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j)) Stringextraction__extract_consonants__given_string.given_string) )) = True) ) )) ) )) }
   =
  (  assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__consonants.consonants True False True True) };
  (let temp___339 = (Standard__string.of_array (Temp___String_Literal_155.temp___String_Literal_155 ()) 1 43) in (
    assume {  (temp___339 = Stringextraction__consonants.consonants) }))
  ;
  () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:20 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__extract_consonants__given_string.given_string True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:20 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:20 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_consonants__given_string.given_string)) ) <= 500) && ( ((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
   ()))
   end ;
  (Standard__string.first(Stringextraction__extract_consonants__given_string.given_string)) ) = 1) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_consonants__given_string.given_string)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_consonants__given_string.given_string)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) ((  assert {  (#"stringextraction.ads" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:stringextraction.ads:26:33" "GP_Id:85" "comment:                   Given_string(J) /= Character'Val(0)),
                                ^ stringextraction.ads:26:33:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )) };
    j ))))) <> 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3496"  : int.
   ( ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) j)) <> 0) )) )} 
  ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:20 *)
  ;
   assume {  ( ((Standard__string.length Stringextraction__extract_consonants__given_string.given_string) <= 500) /\ ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) = 1) /\ (forall j   "model" "name:J" "model_trace:3496"  : int.
   ( ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= j) /\ (j <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) j)) <> 0) )) ) ) };
   try
   ( (#"stringextraction.adb" 96 0 0# ());
   (#"stringextraction.adb" 97 0 0# ( #"stringextraction.adb" 97 0 0# abstract ensures {true}(let _ = ( #"stringextraction.adb" 97 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_consonants__given_string.given_string)) ) in (
    ()))
    end ;
   #"stringextraction.adb" 97 0 0# abstract ensures {true}(let _ = ( #"stringextraction.adb" 97 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_consonants__given_string.given_string)) ) in (
    ()))
    end ;
   (#"stringextraction.adb" 97 0 0# ( "[no name]" "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Sloc:stringextraction.adb:97:7" "GP_Id:44" "comment:      result : String (Given_string'First .. Given_string'Last) := (others => Character'Val(0));
      ^ stringextraction.adb:97:7:VC_RANGE_CHECK" #"stringextraction.adb" 97 0 0# (any unit
   requires {#"stringextraction.adb" 97 0 0# ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) -> ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) >= Standard__positive.first) /\ ((Standard__string.last Stringextraction__extract_consonants__given_string.given_string) <= Standard__positive.last) ) )} 
   ensures {#"stringextraction.adb" 97 0 0# true} 
   ) )) ));
   (#"stringextraction.adb" 97 0 0# ( (let stringextraction__extract_consonants__result__assume = (let temp___303 = (let temp___302 = (Stringextraction__extract_consonants__result__aggregate_def.stringextraction__extract_consonants__result__aggregate_def(0) ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) ((Standard__string.last Stringextraction__extract_consonants__given_string.given_string))) in (
    ( #"stringextraction.adb" 97 0 0# assume { #"stringextraction.adb" 97 0 0# ((Stringextraction__extract_consonants__T47b.first temp___302) = (Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) };
    #"stringextraction.adb" 97 0 0# assume { #"stringextraction.adb" 97 0 0# ((Stringextraction__extract_consonants__T47b.last temp___302) = (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) };
    temp___302 )))
    in (
    ( #"stringextraction.adb" 97 0 0# assert { #"stringextraction.adb" 97 0 0# (#"stringextraction.adb" 97 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LENGTH_CHECK" "GP_Shape:result_decl__aggr" "GP_Sloc:stringextraction.adb:97:68" "GP_Id:45" "comment:      result : String (Given_string'First .. Given_string'Last) := (others => Character'Val(0));
                                                                   ^ stringextraction.adb:97:68:VC_LENGTH_CHECK" ((if (((Stringextraction__extract_consonants__T47b.first(temp___303)) <= (Stringextraction__extract_consonants__T47b.last(temp___303)))) then (
     (((Stringextraction__extract_consonants__T47b.last(temp___303)) - (Stringextraction__extract_consonants__T47b.first(temp___303))) + 1)) else (
     0)) = (if (((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string))) then (
     (((Standard__string.last Stringextraction__extract_consonants__given_string.given_string) - (Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) + 1)) else (
     0))) )) };
    (Stringextraction__extract_consonants__TresultS.of_array((Array__Int__Standard__character.slide((Stringextraction__extract_consonants__T47b.to_array(temp___303))) ((Stringextraction__extract_consonants__T47b.first(temp___303))) ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string)))) ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) ((Standard__string.last Stringextraction__extract_consonants__given_string.given_string))) )))
    in (
    (  Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content <- ( (Stringextraction__extract_consonants__TresultS.to_array(stringextraction__extract_consonants__result__assume)) );
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____first)) = (Stringextraction__extract_consonants__TresultS.first(stringextraction__extract_consonants__result__assume))) };
     assume {  ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____last)) = (Stringextraction__extract_consonants__TresultS.last(stringextraction__extract_consonants__result__assume))) } )))
   ;
    assume {  (if (False) then (
    true) else (
    ( (Stringextraction__extract_consonants__TresultS.dynamic_property (Standard__string.first Stringextraction__extract_consonants__given_string.given_string) (Standard__string.last Stringextraction__extract_consonants__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) = (Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last) = (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) ))) } ));
   (#"stringextraction.adb" 98 0 0# ());
   (#"stringextraction.adb" 98 0 0# ( #"stringextraction.adb" 98 0 0# Stringextraction__extract_consonants__result_index.result_index.int__content <- ( (#"stringextraction.adb" 98 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:result_index_decl__first_ref" "GP_Sloc:stringextraction.adb:98:40" "GP_Id:46" "comment:      result_index : Positive := result'First;
                                       ^ stringextraction.adb:98:40:VC_RANGE_CHECK" (Standard__positive.range_check_((Standard__integer__rep.to_rep(( #"stringextraction.adb" 98 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
    ()))
    end ;
   Stringextraction__extract_consonants__result.result____first ))))) )) );
    assume {  (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_consonants__result_index.result_index.int__content True False True True) } ));
   (#"stringextraction.adb" 100 0 0# ());
   (#"stringextraction.adb" 100 0 0# ( #"stringextraction.adb" 100 0 0# Stringextraction__extract_consonants__previous_index.previous_index.int__content <- ( Stringextraction__extract_consonants__result_index.result_index.int__content );
   #"stringextraction.adb" 100 0 0# assume { #"stringextraction.adb" 100 0 0# (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_consonants__previous_index.previous_index.int__content True False True True) } ));
   (#"stringextraction.adb" 101 0 0# ());
   (#"stringextraction.adb" 101 0 0# ());
   (#"stringextraction.adb" 108 0 0# ());
   ( "GP_Sloc:stringextraction.adb:103:7" (#"stringextraction.adb" 103 0 0# (if ((( #"stringextraction.adb" 103 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.length(Stringextraction__extract_consonants__given_string.given_string)) ) = 0)) then (
    ( "GP_Sloc:stringextraction.adb:104:10" (#"stringextraction.adb" 104 0 0# ( #"stringextraction.adb" 104 0 0# stringextraction__extract_consonants__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_305.temp___String_Literal_305(()))) (1) (0)) );
    #"stringextraction.adb" 104 0 0# raise Return__exc )) )) else (
    ()))) );
   ( "GP_Sloc:stringextraction.adb:108:35" (#"stringextraction.adb" 108 0 0# (let temp___306 = ( #"stringextraction.adb" 108 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__extract_consonants__given_string.given_string)) ) in (
   (let temp___307 = ( #"stringextraction.adb" 108 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__extract_consonants__given_string.given_string)) ) in (
    ( #"stringextraction.adb" 108 0 0# Stringextraction__extract_consonants__L_3__j.j.int__content <- ( temp___306 );
    () (* Translation of an Ada loop from stringextraction.adb:108 *)
    ;
    (if ((Boolean.andb((temp___306 <= Stringextraction__extract_consonants__L_3__j.j.int__content)) ((Stringextraction__extract_consonants__L_3__j.j.int__content <= temp___307)))) then (
     #"stringextraction.adb" 108 0 0# try
      ( #"stringextraction.adb" 108 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__match_found.match_found.bool__content in (
       ()))
       end ;
      (let temp___314 = #"stringextraction.adb" 108 0 0# (any bool
      ensures {#"stringextraction.adb" 108 0 0# (result = Stringextraction__extract_consonants__match_found.match_found.bool__content)} 
      ) in (
       ( #"stringextraction.adb" 108 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__previous_index.previous_index.int__content in (
        ()))
        end ;
       (let temp___313 = #"stringextraction.adb" 108 0 0# (any int
       ensures {#"stringextraction.adb" 108 0 0# (result = Stringextraction__extract_consonants__previous_index.previous_index.int__content)} 
       ) in (
        ( #"stringextraction.adb" 108 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result_index.result_index.int__content in (
         ()))
         end ;
        (let temp___312 = #"stringextraction.adb" 108 0 0# (any int
        ensures {#"stringextraction.adb" 108 0 0# (result = Stringextraction__extract_consonants__result_index.result_index.int__content)} 
        ) in (
         ( #"stringextraction.adb" 108 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__L_3__j.j.int__content in (
          ()))
          end ;
         (let temp___311 = #"stringextraction.adb" 108 0 0# (any int
         ensures {#"stringextraction.adb" 108 0 0# (result = Stringextraction__extract_consonants__L_3__j.j.int__content)} 
         ) in (
          ( #"stringextraction.adb" 108 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          (let temp___309 = #"stringextraction.adb" 108 0 0# (any Array__Int__Standard__character.map
          ensures {#"stringextraction.adb" 108 0 0# (result = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content)} 
          ) in (
           ( () (* First unroling of the loop statements appearing before the loop invariant of loop stringextraction.adb:108 *)
           ;
           ( "GP_Sloc:stringextraction.adb:110:13" (#"stringextraction.adb" 110 0 0# ()) );
           ( "GP_Sloc:stringextraction.adb:110:10" (#"stringextraction.adb" 110 0 0# (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_3__j.j.int__content))))) (Stringextraction__consonants.consonants))) then (
            ( ( "GP_Sloc:stringextraction.adb:111:13" (#"stringextraction.adb" 111 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:111:20" (#"stringextraction.adb" 111 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:111:34" (#"stringextraction.adb" 111 0 0# #"stringextraction.adb" 111 0 0# Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 111 0 0# assert { #"stringextraction.adb" 111 0 0# (#"stringextraction.adb" 111 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:111:20" "GP_Id:47" "comment:            result(result_index) := Given_string(J);
                   ^ stringextraction.adb:111:20:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__result_index.result_index.int__content) /\ (Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
            Stringextraction__extract_consonants__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_3__j.j.int__content)))))))) )) );
            ( "GP_Sloc:stringextraction.adb:114:13" (#"stringextraction.adb" 114 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:114:25" (#"stringextraction.adb" 114 0 0# #"stringextraction.adb" 114 0 0# Stringextraction__extract_consonants__match_found.match_found.bool__content <- ( (Boolean.of_int(1)) )) );
            ( "GP_Sloc:stringextraction.adb:115:13" (#"stringextraction.adb" 115 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:115:31" (#"stringextraction.adb" 115 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:115:28" (#"stringextraction.adb" 115 0 0# #"stringextraction.adb" 115 0 0# Stringextraction__extract_consonants__previous_index.previous_index.int__content <- ( Stringextraction__extract_consonants__result_index.result_index.int__content )) );
            ( "GP_Sloc:stringextraction.adb:117:16" (#"stringextraction.adb" 117 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:117:31" (#"stringextraction.adb" 117 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:117:13" (#"stringextraction.adb" 117 0 0# (if ((Stringextraction__extract_consonants__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 117 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_consonants__result.result____last ))))) then (
             ( ( "GP_Sloc:stringextraction.adb:118:16" (#"stringextraction.adb" 118 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:118:32" (#"stringextraction.adb" 118 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:118:29" (#"stringextraction.adb" 118 0 0# #"stringextraction.adb" 118 0 0# Stringextraction__extract_consonants__result_index.result_index.int__content <- ( (#"stringextraction.adb" 118 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:stringextraction.adb:118:45" "GP_Id:48" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:118:45:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_consonants__result_index.result_index.int__content + 1))) )) )) ) )) else (
             ()))) ) )) else (
            ( ( "GP_Sloc:stringextraction.adb:121:13" (#"stringextraction.adb" 121 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:121:25" (#"stringextraction.adb" 121 0 0# #"stringextraction.adb" 121 0 0# Stringextraction__extract_consonants__match_found.match_found.bool__content <- ( (Boolean.of_int(0)) )) ) )))) );
           ( "GP_Sloc:stringextraction.adb:130:35" (#"stringextraction.adb" 130 0 0# ()) );
           () (* While loop translating the Ada loop from stringextraction.adb:108 *)
           ;
            while True do
            invariant { 
             (#"stringextraction.adb" 124 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:124:32" "GP_Id:49" "comment:         pragma Loop_Invariant(result_index in result'Range);
                               ^ stringextraction.adb:124:32:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__in" ( "GP_Pretty_Ada:2983" "GP_Sloc:stringextraction.adb:124:32" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__result_index.result_index.int__content) /\ (Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 125 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__in" "GP_Sloc:stringextraction.adb:125:32" "GP_Id:50" "comment:         pragma Loop_Invariant(previous_index in result'Range);
                               ^ stringextraction.adb:125:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:2990" "GP_Sloc:stringextraction.adb:125:32" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__previous_index.previous_index.int__content) /\ (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 126 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:126:32" "GP_Id:52" "comment:         pragma Loop_Invariant(result_index <= J + 1);
                               ^ stringextraction.adb:126:32:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__cmp" ( "GP_Pretty_Ada:2997" "GP_Sloc:stringextraction.adb:126:32" (Stringextraction__extract_consonants__result_index.result_index.int__content <= (Stringextraction__extract_consonants__L_3__j.j.int__content + 1)) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 127 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__cmp" "GP_Sloc:stringextraction.adb:127:32" "GP_Id:53" "comment:         pragma Loop_Invariant(previous_index <= result_index);
                               ^ stringextraction.adb:127:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:3005" "GP_Sloc:stringextraction.adb:127:32" (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= Stringextraction__extract_consonants__result_index.result_index.int__content) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 128 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__cmp" "GP_Sloc:stringextraction.adb:128:32" "GP_Id:54" "comment:         pragma Loop_Invariant(previous_index <= J);
                               ^ stringextraction.adb:128:32:VC_LOOP_INVARIANT" ( "GP_Pretty_Ada:3011" "GP_Sloc:stringextraction.adb:128:32" (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= Stringextraction__extract_consonants__L_3__j.j.int__content) ) ))
             }
            invariant { 
             (#"stringextraction.adb" 130 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:130:32" "GP_Id:56" "comment:         pragma Loop_Invariant(if Is_Contained(Given_String(J), consonants) then
                               ^ stringextraction.adb:130:32:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__if" (if (((epsilon temp___result_315 : bool.
              ( (temp___result_315 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_315 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content)) Stringextraction__consonants.consonants) )) = True)) then (
              ( "GP_Pretty_Ada:3021" "GP_Sloc:stringextraction.adb:131:35" (Stringextraction__extract_consonants__match_found.match_found.bool__content = True) )) else (
              ( "GP_Pretty_Ada:5933" "GP_Sloc:stringextraction.adb:130:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 132 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__if" "GP_Sloc:stringextraction.adb:132:32" "GP_Id:59" "comment:         pragma Loop_Invariant(if match_found then
                               ^ stringextraction.adb:132:32:VC_LOOP_INVARIANT" (if ((Stringextraction__extract_consonants__match_found.match_found.bool__content = True)) then (
              ( "GP_Pretty_Ada:3031" "GP_Sloc:stringextraction.adb:133:35" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content Stringextraction__extract_consonants__previous_index.previous_index.int__content)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content))) )) else (
              ( "GP_Pretty_Ada:5942" "GP_Sloc:stringextraction.adb:132:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 134 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__if" "GP_Sloc:stringextraction.adb:134:32" "GP_Id:61" "comment:         pragma Loop_Invariant(if match_found then
                               ^ stringextraction.adb:134:32:VC_LOOP_INVARIANT" (if ((Stringextraction__extract_consonants__match_found.match_found.bool__content = True)) then (
              ( "GP_Pretty_Ada:3044" "GP_Sloc:stringextraction.adb:135:35" ((epsilon temp___result_316 : bool.
               ( (temp___result_316 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content Stringextraction__extract_consonants__previous_index.previous_index.int__content)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_316 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content Stringextraction__extract_consonants__previous_index.previous_index.int__content)) Stringextraction__consonants.consonants) )) = True) )) else (
              ( "GP_Pretty_Ada:5950" "GP_Sloc:stringextraction.adb:134:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 136 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__if" "GP_Sloc:stringextraction.adb:136:32" "GP_Id:63" "comment:         pragma Loop_Invariant(if match_found then
                               ^ stringextraction.adb:136:32:VC_LOOP_INVARIANT" (if ((Stringextraction__extract_consonants__match_found.match_found.bool__content = True)) then (
              ( "GP_Pretty_Ada:3055" "GP_Sloc:stringextraction.adb:137:35" ((epsilon temp___result_317 : bool.
               ( (temp___result_317 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_317 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last))) )) = True) )) else (
              ( "GP_Pretty_Ada:5959" "GP_Sloc:stringextraction.adb:136:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 138 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__if" "GP_Sloc:stringextraction.adb:138:32" "GP_Id:65" "comment:         pragma Loop_Invariant(if not match_found then
                               ^ stringextraction.adb:138:32:VC_LOOP_INVARIANT" (if (not ( (Stringextraction__extract_consonants__match_found.match_found.bool__content = True) )) then (
              ( "GP_Pretty_Ada:3062" "GP_Sloc:stringextraction.adb:139:35" not ( ((epsilon temp___result_318 : bool.
               ( (temp___result_318 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_318 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last))) )) = True) ) )) else (
              ( "GP_Pretty_Ada:5968" "GP_Sloc:stringextraction.adb:138:32" true ))) ))
             }
            invariant { 
             (#"stringextraction.adb" 141 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:141:32" "GP_Id:68" "comment:         pragma Loop_Invariant(for all K in result'Range =>
                               ^ stringextraction.adb:141:32:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" (forall k #"stringextraction.adb" 141 0 0#  "model" "name:K" "model_trace:3074"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
               ( "GP_Pretty_Ada:3097" "GP_Sloc:stringextraction.adb:143:41" ((epsilon temp___result_320 : bool.
                ( (temp___result_320 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_320 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string) )) = True) )) else (
               ( "GP_Pretty_Ada:6005" "GP_Sloc:stringextraction.adb:142:36" true ))) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 144 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" "GP_Sloc:stringextraction.adb:144:32" "GP_Id:71" "comment:         pragma Loop_Invariant(for all K in result'Range =>
                               ^ stringextraction.adb:144:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 144 0 0#  "model" "name:K" "model_trace:3103"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
               ( "GP_Pretty_Ada:3126" "GP_Sloc:stringextraction.adb:146:40" ((epsilon temp___result_322 : bool.
                ( (temp___result_322 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_322 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants) )) = True) )) else (
               ( "GP_Pretty_Ada:6060" "GP_Sloc:stringextraction.adb:145:35" true ))) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 147 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" "GP_Sloc:stringextraction.adb:147:32" "GP_Id:74" "comment:         pragma Loop_Invariant(for all K in result'Range =>
                               ^ stringextraction.adb:147:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 147 0 0#  "model" "name:K" "model_trace:3132"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) -> (if (not ( ((epsilon temp___result_324 : bool.
               ( (temp___result_324 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_324 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants) )) = True) )) then (
               ( "GP_Pretty_Ada:3153" "GP_Sloc:stringextraction.adb:149:38" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) = 0) )) else (
               ( "GP_Pretty_Ada:6115" "GP_Sloc:stringextraction.adb:148:35" true ))) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 150 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" "GP_Sloc:stringextraction.adb:150:32" "GP_Id:76" "comment:         pragma Loop_Invariant(for all K in result'First .. result_index - 1 =>
                               ^ stringextraction.adb:150:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 150 0 0#  "model" "name:K" "model_trace:3162"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Stringextraction__extract_consonants__result_index.result_index.int__content - 1)) ) -> ( "GP_Pretty_Ada:3182" "GP_Sloc:stringextraction.adb:151:34" ((epsilon temp___result_326 : bool.
               ( (temp___result_326 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_326 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants) )) = True) ) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 152 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" "GP_Sloc:stringextraction.adb:152:32" "GP_Id:78" "comment:         pragma Loop_Invariant(for all K in result'First .. result_index - 1 =>
                               ^ stringextraction.adb:152:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 152 0 0#  "model" "name:K" "model_trace:3187"  : int.
              ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Stringextraction__extract_consonants__result_index.result_index.int__content - 1)) ) -> ( "GP_Pretty_Ada:3207" "GP_Sloc:stringextraction.adb:153:34" ((epsilon temp___result_328 : bool.
               ( (temp___result_328 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_328 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string) )) = True) ) )) ))
             }
            invariant { 
             (#"stringextraction.adb" 154 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" "GP_Sloc:stringextraction.adb:154:32" "GP_Id:81" "comment:         pragma Loop_Invariant(for all K in Given_string'First .. J =>
                               ^ stringextraction.adb:154:32:VC_LOOP_INVARIANT" (forall k #"stringextraction.adb" 154 0 0#  "model" "name:K" "model_trace:3212"  : int.
              ( ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= k) /\ (k <= Stringextraction__extract_consonants__L_3__j.j.int__content) ) -> (if (((epsilon temp___result_332 : bool.
               ( (temp___result_332 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_332 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) Stringextraction__consonants.consonants) )) = True)) then (
               ( "GP_Pretty_Ada:3236" "GP_Sloc:stringextraction.adb:156:35" ((epsilon temp___result_331 : bool.
                ( (temp___result_331 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_331 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last))) )) = True) )) else (
               ( "GP_Pretty_Ada:6342" "GP_Sloc:stringextraction.adb:155:36" true ))) )) ))
             }
            ( () (* Assume implicit invariants from the loop stringextraction.adb:108 *)
            ;
             assume {  (Boolean.andb(( ( ( ( ( ( ( ( ( ( true /\ (if (True) then (
             true) else (
             ( (Stringextraction__extract_consonants__TresultS.dynamic_property (Standard__string.first Stringextraction__extract_consonants__given_string.given_string) (Standard__string.last Stringextraction__extract_consonants__given_string.given_string) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) = (Standard__string.first Stringextraction__extract_consonants__given_string.given_string)) /\ ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last) = (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) ))) ) /\ true ) /\ (if (((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string))) then (
             (Stringextraction__extract_consonants__L_3__T50b.dynamic_property (Standard__string.first Stringextraction__extract_consonants__given_string.given_string) (Standard__string.last Stringextraction__extract_consonants__given_string.given_string) Stringextraction__extract_consonants__L_3__j.j.int__content)) else true) ) /\ true ) /\ (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_consonants__result_index.result_index.int__content False True True True) ) /\ true ) /\ (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_consonants__previous_index.previous_index.int__content False True True True) ) /\ true ) /\ true ) /\ true )) (( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= Stringextraction__extract_consonants__L_3__j.j.int__content) /\ (Stringextraction__extract_consonants__L_3__j.j.int__content <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ))) };
            () (* Check for absence of RTE in the invariant of loop stringextraction.adb:108 *)
            ;
             abstract ensures {true}(let _ = (Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_consonants__result.result____first ))) <= Stringextraction__extract_consonants__result_index.result_index.int__content)) ((Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_consonants__result.result____last )))))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_consonants__result.result____first ))) <= Stringextraction__extract_consonants__previous_index.previous_index.int__content)) ((Stringextraction__extract_consonants__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
             ()))
             end ;
            Stringextraction__extract_consonants__result.result____last )))))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Stringextraction__extract_consonants__result_index.result_index.int__content <= (#"stringextraction.adb" 126 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:stringextraction.adb:126:50" "GP_Id:51" "comment:         pragma Loop_Invariant(result_index <= J + 1);
                                                 ^ stringextraction.adb:126:50:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__cmp__add" (Standard__integer.range_check_((Stringextraction__extract_consonants__L_3__j.j.int__content + 1))) ))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= Stringextraction__extract_consonants__result_index.result_index.int__content) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= Stringextraction__extract_consonants__L_3__j.j.int__content) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 130 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:130:61" "GP_Id:55" "comment:         pragma Loop_Invariant(if Is_Contained(Given_String(J), consonants) then
                                                            ^ stringextraction.adb:130:61:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__if__call_is_contained__ixdcomp" ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= Stringextraction__extract_consonants__L_3__j.j.int__content) /\ (Stringextraction__extract_consonants__L_3__j.j.int__content <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )) };
            Stringextraction__extract_consonants__L_3__j.j.int__content )))))) (Stringextraction__consonants.consonants))) then (
             Stringextraction__extract_consonants__match_found.match_found.bool__content) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (Stringextraction__extract_consonants__match_found.match_found.bool__content) then (
             ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 133 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:133:42" "GP_Id:57" "comment:                                  result(previous_index) = Given_string(J));
                                         ^ stringextraction.adb:133:42:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__previous_index.previous_index.int__content) /\ (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
             Stringextraction__extract_consonants__previous_index.previous_index.int__content ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 133 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:133:73" "GP_Id:58" "comment:                                  result(previous_index) = Given_string(J));
                                                                        ^ stringextraction.adb:133:73:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= Stringextraction__extract_consonants__L_3__j.j.int__content) /\ (Stringextraction__extract_consonants__L_3__j.j.int__content <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )) };
             Stringextraction__extract_consonants__L_3__j.j.int__content ))))))) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (Stringextraction__extract_consonants__match_found.match_found.bool__content) then (
             (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 135 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:135:55" "GP_Id:60" "comment:                                  Is_Contained(result(previous_index), consonants));
                                                      ^ stringextraction.adb:135:55:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__previous_index.previous_index.int__content) /\ (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
             Stringextraction__extract_consonants__previous_index.previous_index.int__content )))))) (Stringextraction__consonants.consonants))) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (Stringextraction__extract_consonants__match_found.match_found.bool__content) then (
             (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 137 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:137:61" "GP_Id:62" "comment:                                  Is_Contained(Given_String(J), result));
                                                            ^ stringextraction.adb:137:61:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= Stringextraction__extract_consonants__L_3__j.j.int__content) /\ (Stringextraction__extract_consonants__L_3__j.j.int__content <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )) };
             Stringextraction__extract_consonants__L_3__j.j.int__content )))))) ((Standard__string.of_array(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____first))) ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____last))))))) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = (if (not ( Stringextraction__extract_consonants__match_found.match_found.bool__content )) then (
             not ( (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 139 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:139:65" "GP_Id:64" "comment:                                  not Is_Contained(Given_string(J), result));
                                                                ^ stringextraction.adb:139:65:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__if__not__call_is_contained__ixdcomp" ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= Stringextraction__extract_consonants__L_3__j.j.int__content) /\ (Stringextraction__extract_consonants__L_3__j.j.int__content <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )) };
             Stringextraction__extract_consonants__L_3__j.j.int__content )))))) ((Standard__string.of_array(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____first))) ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____last)))))) )) else (
             (Boolean.of_int(1)))) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____first ))) <= k)) ((k <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____last ))))))) then (
               abstract ensures {true}(let _ = (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 142 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:142:46" "GP_Id:67" "comment:                                  (if result(K) /= Character'Val(0) then
                                             ^ stringextraction.adb:142:46:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
              k ))))) <> 0)) then (
               (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 143 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:143:61" "GP_Id:66" "comment:                                        Is_Contained(result(K), Given_string)));
                                                            ^ stringextraction.adb:143:61:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__call_is_contained__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
               k )))))) (Stringextraction__extract_consonants__given_string.given_string))) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:3074"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
              ((epsilon temp___result_319 : bool.
               ( (temp___result_319 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_319 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string) )) = True)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____first ))) <= k)) ((k <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____last ))))))) then (
               abstract ensures {true}(let _ = (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 145 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:145:45" "GP_Id:70" "comment:                                 (if result(K) /= Character'Val(0) then
                                            ^ stringextraction.adb:145:45:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
              k ))))) <> 0)) then (
               (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 146 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:146:60" "GP_Id:69" "comment:                                       Is_Contained(result(K), consonants)));
                                                           ^ stringextraction.adb:146:60:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
               k )))))) (Stringextraction__consonants.consonants))) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:3103"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) <> 0)) then (
              ((epsilon temp___result_321 : bool.
               ( (temp___result_321 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_321 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants) )) = True)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____first ))) <= k)) ((k <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____last ))))))) then (
               abstract ensures {true}(let _ = (if (not ( (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 148 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:148:62" "GP_Id:73" "comment:                                 (if not Is_Contained(result(K), consonants) then
                                                             ^ stringextraction.adb:148:62:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__not__call_is_contained__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
              k )))))) (Stringextraction__consonants.consonants)) )) then (
               ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 149 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:149:45" "GP_Id:72" "comment:                                     result(K) = Character'Val(0)));
                                            ^ stringextraction.adb:149:45:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
               k ))))) = 0)) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:3132"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) -> (if (not ( ((epsilon temp___result_323 : bool.
              ( (temp___result_323 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_323 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants) )) = True) )) then (
              ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) = 0)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____first ))) <= k)) ((k <= (Stringextraction__extract_consonants__result_index.result_index.int__content - 1))))) then (
               abstract ensures {true}(let _ = (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 151 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:151:54" "GP_Id:75" "comment:                                 Is_Contained(result(K), consonants));
                                                     ^ stringextraction.adb:151:54:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__call_is_contained__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
              k )))))) (Stringextraction__consonants.consonants)) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:3162"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Stringextraction__extract_consonants__result_index.result_index.int__content - 1)) ) -> ((epsilon temp___result_325 : bool.
              ( (temp___result_325 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_325 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__consonants.consonants) )) = True) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____first ))) <= k)) ((k <= (Stringextraction__extract_consonants__result_index.result_index.int__content - 1))))) then (
               abstract ensures {true}(let _ = (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 153 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:153:54" "GP_Id:77" "comment:                                 Is_Contained(result(K), Given_string));
                                                     ^ stringextraction.adb:153:54:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
              k )))))) (Stringextraction__extract_consonants__given_string.given_string)) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:3187"  : int.
             ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= k) /\ (k <= (Stringextraction__extract_consonants__result_index.result_index.int__content - 1)) ) -> ((epsilon temp___result_327 : bool.
              ( (temp___result_327 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_327 (Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content k)) Stringextraction__extract_consonants__given_string.given_string) )) = True) )) )} 
            ) ) in (
             ()))
             end ;
             abstract ensures {true}(let _ = ( (let k =  (any int
            ) in (
             (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
              ()))
              end ;
             (Standard__string.first(Stringextraction__extract_consonants__given_string.given_string)) ) <= k)) ((k <= Stringextraction__extract_consonants__L_3__j.j.int__content)))) then (
               abstract ensures {true}(let _ = (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 155 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:155:65" "GP_Id:80" "comment:                                  (if Is_Contained(Given_String(K), consonants) then
                                                                ^ stringextraction.adb:155:65:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )) };
              k )))))) (Stringextraction__consonants.consonants))) then (
               (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) ((  assert {  (#"stringextraction.adb" 156 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__if__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:156:61" "GP_Id:79" "comment:                                  Is_Contained(Given_String(K), result)));
                                                            ^ stringextraction.adb:156:61:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__extract_consonants__given_string.given_string)) ) )) };
               k )))))) ((Standard__string.of_array(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____first))) ((Standard__integer__rep.to_rep(Stringextraction__extract_consonants__result.result____last))))))) else (
               (Boolean.of_int(1)))) in (
               ()))
               end ))))
            ;
             (any bool
            requires { true} 
            ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:3212"  : int.
             ( ( ((Standard__string.first Stringextraction__extract_consonants__given_string.given_string) <= k) /\ (k <= Stringextraction__extract_consonants__L_3__j.j.int__content) ) -> (if (((epsilon temp___result_330 : bool.
              ( (temp___result_330 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) Stringextraction__consonants.consonants)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_330 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) Stringextraction__consonants.consonants) )) = True)) then (
              ((epsilon temp___result_329 : bool.
               ( (temp___result_329 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)))) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_329 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__extract_consonants__given_string.given_string) k)) (Standard__string.of_array Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last))) )) = True)) else (
              true)) )) )} 
            ) ) in (
             ()))
             end ;
            () (* Loop statements appearing after the loop invariant of loop stringextraction.adb:108 *)
            ;
            () (* Check for the exit condition and loop statements appearing before the loop invariant of loop stringextraction.adb:108 *)
            ;
            (if ((Stringextraction__extract_consonants__L_3__j.j.int__content = temp___307)) then (
              raise Stringextraction__extract_consonants__L_3.L_3));
             Stringextraction__extract_consonants__L_3__j.j.int__content <- ( (Stringextraction__extract_consonants__L_3__j.j.int__content + 1) );
            ( "GP_Sloc:stringextraction.adb:110:13" (#"stringextraction.adb" 110 0 0# ()) );
            ( "GP_Sloc:stringextraction.adb:110:10" (#"stringextraction.adb" 110 0 0# (if ((Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_3__j.j.int__content))))) (Stringextraction__consonants.consonants))) then (
             ( ( "GP_Sloc:stringextraction.adb:111:13" (#"stringextraction.adb" 111 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:111:20" (#"stringextraction.adb" 111 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:111:34" (#"stringextraction.adb" 111 0 0# #"stringextraction.adb" 111 0 0# Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 111 0 0# assert { #"stringextraction.adb" 111 0 0# (#"stringextraction.adb" 111 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:111:20" "GP_Id:47" "comment:            result(result_index) := Given_string(J);
                   ^ stringextraction.adb:111:20:VC_INDEX_CHECK" "GP_Shape:L_3_while__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__result_index.result_index.int__content) /\ (Stringextraction__extract_consonants__result_index.result_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
             Stringextraction__extract_consonants__result_index.result_index.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__extract_consonants__given_string.given_string))) (Stringextraction__extract_consonants__L_3__j.j.int__content)))))))) )) );
             ( "GP_Sloc:stringextraction.adb:114:13" (#"stringextraction.adb" 114 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:114:25" (#"stringextraction.adb" 114 0 0# #"stringextraction.adb" 114 0 0# Stringextraction__extract_consonants__match_found.match_found.bool__content <- ( (Boolean.of_int(1)) )) );
             ( "GP_Sloc:stringextraction.adb:115:13" (#"stringextraction.adb" 115 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:115:31" (#"stringextraction.adb" 115 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:115:28" (#"stringextraction.adb" 115 0 0# #"stringextraction.adb" 115 0 0# Stringextraction__extract_consonants__previous_index.previous_index.int__content <- ( Stringextraction__extract_consonants__result_index.result_index.int__content )) );
             ( "GP_Sloc:stringextraction.adb:117:16" (#"stringextraction.adb" 117 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:117:31" (#"stringextraction.adb" 117 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:117:13" (#"stringextraction.adb" 117 0 0# (if ((Stringextraction__extract_consonants__result_index.result_index.int__content < (Standard__integer__rep.to_rep(( #"stringextraction.adb" 117 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
              ()))
              end ;
             Stringextraction__extract_consonants__result.result____last ))))) then (
              ( ( "GP_Sloc:stringextraction.adb:118:16" (#"stringextraction.adb" 118 0 0# ()) );
              ( "GP_Sloc:stringextraction.adb:118:32" (#"stringextraction.adb" 118 0 0# ()) );
              ( "GP_Sloc:stringextraction.adb:118:29" (#"stringextraction.adb" 118 0 0# #"stringextraction.adb" 118 0 0# Stringextraction__extract_consonants__result_index.result_index.int__content <- ( (#"stringextraction.adb" 118 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:stringextraction.adb:118:45" "GP_Id:48" "comment:               result_index := result_index + 1;
                                            ^ stringextraction.adb:118:45:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__if__if__result_index_assign__add" (Standard__integer.range_check_((Stringextraction__extract_consonants__result_index.result_index.int__content + 1))) )) )) ) )) else (
              ()))) ) )) else (
             ( ( "GP_Sloc:stringextraction.adb:121:13" (#"stringextraction.adb" 121 0 0# ()) );
             ( "GP_Sloc:stringextraction.adb:121:25" (#"stringextraction.adb" 121 0 0# #"stringextraction.adb" 121 0 0# Stringextraction__extract_consonants__match_found.match_found.bool__content <- ( (Boolean.of_int(0)) )) ) )))) );
            ( "GP_Sloc:stringextraction.adb:130:35" (#"stringextraction.adb" 130 0 0# ()) ) )
           done )))
           )))
          )))
         )))
        )))
       )
     with
      Stringextraction__extract_consonants__L_3.L_3 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:stringextraction.adb:159:14" (#"stringextraction.adb" 159 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:159:7" (#"stringextraction.adb" 159 0 0# (if (not ( (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 159 0 0# assert { #"stringextraction.adb" 159 0 0# (#"stringextraction.adb" 159 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:if__not__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.adb:159:34" "GP_Id:82" "comment:      if not Is_Contained(result(previous_index), consonants) then
                                 ^ stringextraction.adb:159:34:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__previous_index.previous_index.int__content) /\ (Stringextraction__extract_consonants__previous_index.previous_index.int__content <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) )) };
   Stringextraction__extract_consonants__previous_index.previous_index.int__content )))))) (Stringextraction__consonants.consonants)) )) then (
    ( "GP_Sloc:stringextraction.adb:160:10" (#"stringextraction.adb" 160 0 0# ( #"stringextraction.adb" 160 0 0# stringextraction__extract_consonants__result.Standard__string.string__content <- ( (Standard__string.of_array((Temp___String_Literal_333.temp___String_Literal_333(()))) (1) (0)) );
    #"stringextraction.adb" 160 0 0# raise Return__exc )) )) else (
    ()))) );
   ( "GP_Sloc:stringextraction.adb:163:14" (#"stringextraction.adb" 163 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:163:21" (#"stringextraction.adb" 163 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:163:37" (#"stringextraction.adb" 163 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:163:37" (#"stringextraction.adb" 163 0 0# (#"stringextraction.adb" 163 0 0# ( (let stringextraction__extract_consonants__R78b__assume = Stringextraction__extract_consonants__previous_index.previous_index.int__content in (
    #"stringextraction.adb" 163 0 0# assume { #"stringextraction.adb" 163 0 0# (stringextraction__extract_consonants__R78b__assume = Stringextraction__extract_consonants__R78b.r78b) }))
   ;
   #"stringextraction.adb" 163 0 0# assume { #"stringextraction.adb" 163 0 0# (Standard__positive___axiom.dynamic_invariant Stringextraction__extract_consonants__R78b.r78b True False True True) } ))) );
   ( "GP_Sloc:stringextraction.adb:163:7" (#"stringextraction.adb" 163 0 0# ( #"stringextraction.adb" 163 0 0# stringextraction__extract_consonants__result.Standard__string.string__content <- ( (let temp___335 = (let temp___334 = (Standard__integer__rep.to_rep(( #"stringextraction.adb" 163 0 0# abstract ensures {true}(let _ = Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content in (
    ()))
    end ;
   Stringextraction__extract_consonants__result.result____first ))) in (
    (Stringextraction__extract_consonants__T80b.of_array(( #"stringextraction.adb" 163 0 0# assert { #"stringextraction.adb" 163 0 0# (#"stringextraction.adb" 163 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_RANGE_CHECK" "GP_Shape:return__slice" "GP_Sloc:stringextraction.adb:163:14" "GP_Id:83" "comment:      return result(result'First .. previous_index);
             ^ stringextraction.adb:163:14:VC_RANGE_CHECK" ( (temp___334 <= Stringextraction__extract_consonants__R78b.r78b) -> ( ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= temp___334) /\ (temp___334 <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) /\ ( ((Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____first) <= Stringextraction__extract_consonants__R78b.r78b) /\ (Stringextraction__extract_consonants__R78b.r78b <= (Standard__integer__rep.to_rep Stringextraction__extract_consonants__result.result____last)) ) ) ) )) };
    Stringextraction__extract_consonants__result.result__.Array__Int__Standard__character.map__content )) (temp___334) (Stringextraction__extract_consonants__R78b.r78b))))
    in (
    (Standard__string.of_array((Stringextraction__extract_consonants__T80b.to_array(temp___335))) ((Stringextraction__extract_consonants__T80b.first(temp___335))) ((Stringextraction__extract_consonants__T80b.last(temp___335))))))
    );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = stringextraction__extract_consonants__result.Standard__string.string__content in (
   ()))
   end ;
  (Standard__string.length(stringextraction__extract_consonants__result.Standard__string.string__content)) ) <= (  abstract ensures {true}(let _ = Stringextraction__extract_consonants__given_string.given_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__extract_consonants__given_string.given_string)) )) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = stringextraction__extract_consonants__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.first(stringextraction__extract_consonants__result.Standard__string.string__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = stringextraction__extract_consonants__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.last(stringextraction__extract_consonants__result.Standard__string.string__content)) ))))) then (
     abstract ensures {true}(let _ = (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(stringextraction__extract_consonants__result.Standard__string.string__content))) ((  assert {  (#"stringextraction.ads" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__call_is_contained__ixdcomp" "GP_Sloc:stringextraction.ads:30:59" "GP_Id:84" "comment:                   Is_Contained(Extract_Consonants'Result(J), Given_string));
                                                          ^ stringextraction.ads:30:59:VC_INDEX_CHECK" ( ((Standard__string.first stringextraction__extract_consonants__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_consonants__result.Standard__string.string__content)) ) )) };
    j )))))) (Stringextraction__extract_consonants__given_string.given_string)) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3528"  : int.
   ( ( ((Standard__string.first stringextraction__extract_consonants__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__extract_consonants__result.Standard__string.string__content)) ) -> ((epsilon temp___result_337 : bool.
    ( (temp___result_337 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j)) Stringextraction__extract_consonants__given_string.given_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_337 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__extract_consonants__result.Standard__string.string__content) j)) Stringextraction__extract_consonants__given_string.given_string) )) = True) )) )} 
  ) ) ) in (
   ()))
   end ;
  stringextraction__extract_consonants__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "intersection_str" defined at stringextraction.ads:32, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__intersection_str__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__positive
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Standard__string___axiom
 use        Stringextraction__intersection_str__first_string
 use        Stringextraction__intersection_str__second_string
 use        Array__Int__Standard__character
 use        Stringextraction__intersection_str__result
 use        Stringextraction__intersection_str__L_1
 use        Stringextraction__intersection_str__L_1__T3b
 use        Stringextraction__intersection_str__L_1__j
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__intersection_str__result___axiom
 use        Stringextraction__intersection_str__L_1__j___axiom
 use        Stringextraction__intersection_str__L_1___axiom
 use        Stringextraction__intersection_str__first_string___axiom
 use        Stringextraction__intersection_str__second_string___axiom
 use        Stringextraction__intersection_str__L_1__T3b___axiom

 val stringextraction__intersection_str__result "model_projected" "model_trace:3548@result" "name:Intersection_str"  : Standard__string.string__ref 
 
 let def #"stringextraction.ads" 32 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:32" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 32 0 0# true }
  ensures { #"stringextraction.ads" 32 0 0# (#"stringextraction.ads" 40 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:stringextraction.ads:40:16" "GP_Id:103" "comment:       Post => (for all J in Intersection_str'Result'Range =>
               ^ stringextraction.ads:40:16:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall j #"stringextraction.ads" 40 0 0#  "model" "name:J" "model_trace:3639"  : int.
   ( ( ((Standard__string.first stringextraction__intersection_str__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__intersection_str__result.Standard__string.string__content)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__intersection_str__result.Standard__string.string__content) j)) <> 0)) then (
    ( ( "GP_Pretty_Ada:3667" "GP_Sloc:stringextraction.ads:42:14" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__intersection_str__result.Standard__string.string__content) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) j))) ) /\ ( "GP_Pretty_Ada:3677" "GP_Sloc:stringextraction.ads:44:14" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__intersection_str__result.Standard__string.string__content) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__second_string.second_string) j))) ) )) else (
    ( "GP_Pretty_Ada:4728" "GP_Sloc:stringextraction.ads:41:11" true ))) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:32 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__intersection_str__first_string.first_string True False True True) };
   assume {  (Standard__string___axiom.dynamic_invariant Stringextraction__intersection_str__second_string.second_string True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:32 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:32 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Stringextraction__intersection_str__first_string.first_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__intersection_str__first_string.first_string)) ) = (  abstract ensures {true}(let _ = Stringextraction__intersection_str__second_string.second_string in (
   ()))
   end ;
  (Standard__string.length(Stringextraction__intersection_str__second_string.second_string)) )) && ( ((  abstract ensures {true}(let _ = Stringextraction__intersection_str__first_string.first_string in (
   ()))
   end ;
  (Standard__string.first(Stringextraction__intersection_str__first_string.first_string)) ) = (  abstract ensures {true}(let _ = Stringextraction__intersection_str__second_string.second_string in (
   ()))
   end ;
  (Standard__string.first(Stringextraction__intersection_str__second_string.second_string)) )) && ( ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__intersection_str__first_string.first_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__intersection_str__first_string.first_string)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = Stringextraction__intersection_str__first_string.first_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__intersection_str__first_string.first_string)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__first_string.first_string))) ((  assert {  (#"stringextraction.ads" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:stringextraction.ads:37:33" "GP_Id:102" "comment:                   First_string(J) /= Character'Val(0))
                                ^ stringextraction.ads:37:33:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) )) };
    j ))))) <> 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3597"  : int.
   ( ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) j)) <> 0) )) )} 
  ) ) && ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Stringextraction__intersection_str__second_string.second_string in (
    ()))
    end ;
   (Standard__string.first(Stringextraction__intersection_str__second_string.second_string)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = Stringextraction__intersection_str__second_string.second_string in (
    ()))
    end ;
   (Standard__string.last(Stringextraction__intersection_str__second_string.second_string)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__second_string.second_string))) ((  assert {  (#"stringextraction.ads" 39 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:stringextraction.ads:39:34" "GP_Id:101" "comment:                   Second_string(J) /= Character'Val(0)),
                                 ^ stringextraction.ads:39:34:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__second_string.second_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) )) };
    j ))))) <> 0) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3617"  : int.
   ( ( ((Standard__string.first Stringextraction__intersection_str__second_string.second_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__second_string.second_string) j)) <> 0) )) )} 
  ) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:32 *)
  ;
   assume {  ( ((Standard__string.length Stringextraction__intersection_str__first_string.first_string) = (Standard__string.length Stringextraction__intersection_str__second_string.second_string)) /\ ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) = (Standard__string.first Stringextraction__intersection_str__second_string.second_string)) /\ ( (forall j   "model" "name:J" "model_trace:3597"  : int.
   ( ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) j)) <> 0) )) /\ (forall j   "model" "name:J" "model_trace:3617"  : int.
   ( ( ((Standard__string.first Stringextraction__intersection_str__second_string.second_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) -> ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__second_string.second_string) j)) <> 0) )) ) ) ) };
   try
   ( (#"stringextraction.adb" 3 0 0# ());
   (#"stringextraction.adb" 3 0 0# ());
   (#"stringextraction.adb" 4 0 0# ( (let stringextraction__intersection_str__result__assume = Stringextraction__intersection_str__first_string.first_string in (
    ( #"stringextraction.adb" 4 0 0# Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(stringextraction__intersection_str__result__assume)) );
    #"stringextraction.adb" 4 0 0# assume { #"stringextraction.adb" 4 0 0# ((Standard__integer__rep.to_rep(Stringextraction__intersection_str__result.result____first)) = (Standard__string.first(stringextraction__intersection_str__result__assume))) };
    #"stringextraction.adb" 4 0 0# assume { #"stringextraction.adb" 4 0 0# ((Standard__integer__rep.to_rep(Stringextraction__intersection_str__result.result____last)) = (Standard__string.last(stringextraction__intersection_str__result__assume))) } )))
   ;
   #"stringextraction.adb" 4 0 0# assume { #"stringextraction.adb" 4 0 0# (if (False) then (
    true) else (
    (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)))) } ));
   (#"stringextraction.adb" 6 0 0# ());
   ( "GP_Sloc:stringextraction.adb:6:16" (#"stringextraction.adb" 6 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:6:29" (#"stringextraction.adb" 6 0 0# (let temp___342 = (Standard__integer__rep.to_rep(( #"stringextraction.adb" 6 0 0# abstract ensures {true}(let _ = Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content in (
    ()))
    end ;
   Stringextraction__intersection_str__result.result____first ))) in (
   (let temp___343 = (Standard__integer__rep.to_rep(( #"stringextraction.adb" 6 0 0# abstract ensures {true}(let _ = Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content in (
    ()))
    end ;
   Stringextraction__intersection_str__result.result____last ))) in (
    ( #"stringextraction.adb" 6 0 0# Stringextraction__intersection_str__L_1__j.j.int__content <- ( temp___342 );
    () (* Translation of an Ada loop from stringextraction.adb:6 *)
    ;
    (if ((Boolean.andb((temp___342 <= Stringextraction__intersection_str__L_1__j.j.int__content)) ((Stringextraction__intersection_str__L_1__j.j.int__content <= temp___343)))) then (
     #"stringextraction.adb" 6 0 0# try
      ( #"stringextraction.adb" 6 0 0# abstract ensures {true}(let _ = Stringextraction__intersection_str__L_1__j.j.int__content in (
       ()))
       end ;
      (let temp___347 = #"stringextraction.adb" 6 0 0# (any int
      ensures {#"stringextraction.adb" 6 0 0# (result = Stringextraction__intersection_str__L_1__j.j.int__content)} 
      ) in (
       ( #"stringextraction.adb" 6 0 0# abstract ensures {true}(let _ = Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content in (
        ()))
        end ;
       (let temp___345 = #"stringextraction.adb" 6 0 0# (any Array__Int__Standard__character.map
       ensures {#"stringextraction.adb" 6 0 0# (result = Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop stringextraction.adb:6 *)
        ;
        ( "GP_Sloc:stringextraction.adb:8:10" (#"stringextraction.adb" 8 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__first_string.first_string))) (( #"stringextraction.adb" 8 0 0# assert { #"stringextraction.adb" 8 0 0# (#"stringextraction.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:8:26" "GP_Id:88" "comment:         if First_string(J) /= Second_string(J) then
                         ^ stringextraction.adb:8:26:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__cmp__ixdcomp" ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= Stringextraction__intersection_str__L_1__j.j.int__content) /\ (Stringextraction__intersection_str__L_1__j.j.int__content <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) )) };
        Stringextraction__intersection_str__L_1__j.j.int__content ))))) <> (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__second_string.second_string))) ((  assert {  (#"stringextraction.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:8:46" "GP_Id:89" "comment:         if First_string(J) /= Second_string(J) then
                                             ^ stringextraction.adb:8:46:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__second_string.second_string) <= Stringextraction__intersection_str__L_1__j.j.int__content) /\ (Stringextraction__intersection_str__L_1__j.j.int__content <= (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) )) };
        Stringextraction__intersection_str__L_1__j.j.int__content ))))))) then (
         ( ( "GP_Sloc:stringextraction.adb:9:13" (#"stringextraction.adb" 9 0 0# ()) );
         ( "GP_Sloc:stringextraction.adb:9:23" (#"stringextraction.adb" 9 0 0# #"stringextraction.adb" 9 0 0# Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 9 0 0# assert { #"stringextraction.adb" 9 0 0# (#"stringextraction.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:9:20" "GP_Id:87" "comment:            result(J) := Character'Val(0);
                   ^ stringextraction.adb:9:20:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= Stringextraction__intersection_str__L_1__j.j.int__content) /\ (Stringextraction__intersection_str__L_1__j.j.int__content <= (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)) ) )) };
         Stringextraction__intersection_str__L_1__j.j.int__content )) ((Standard__character__rep.of_rep(0)))) )) ) )) else (
         ()))) );
        () (* While loop translating the Ada loop from stringextraction.adb:6 *)
        ;
         while True do
         invariant { 
          (#"stringextraction.adb" 12 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:stringextraction.adb:12:32" "GP_Id:95" "comment:         pragma Loop_Invariant(for all K in result'First .. J =>
                               ^ stringextraction.adb:12:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall k #"stringextraction.adb" 12 0 0#  "model" "name:K" "model_trace:2384"  : int.
           ( ( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= k) /\ (k <= Stringextraction__intersection_str__L_1__j.j.int__content) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__second_string.second_string) k)))) then (
            ( "GP_Pretty_Ada:2408" "GP_Sloc:stringextraction.adb:14:31" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) k))) )) else (
            ( "GP_Pretty_Ada:2415" "GP_Sloc:stringextraction.adb:16:31" ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content k)) = 0) ))) )) ))
          }
         ( () (* Assume implicit invariants from the loop stringextraction.adb:6 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)))) ) /\ (forall temp___346   : int.
          (if (( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= temp___346) /\ (temp___346 <= (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)) )) then (
           (if (( (temp___343 < temp___346) \/ ( (temp___346 < temp___342) \/ (Stringextraction__intersection_str__L_1__j.j.int__content < temp___346) ) )) then (
            ((Array__Int__Standard__character.get Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content temp___346) = (Array__Int__Standard__character.get temp___345 temp___346))) else (
            true))) else true)) ) /\ (if (((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last))) then (
          (Stringextraction__intersection_str__L_1__T3b.dynamic_property (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last) Stringextraction__intersection_str__L_1__j.j.int__content)) else true) ) /\ true )) (( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= Stringextraction__intersection_str__L_1__j.j.int__content) /\ (Stringextraction__intersection_str__L_1__j.j.int__content <= (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)) ))) };
         () (* Check for absence of RTE in the invariant of loop stringextraction.adb:6 *)
         ;
          abstract ensures {true}(let _ = ( (let k =  (any int
         ) in (
          (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content in (
           ()))
           end ;
          Stringextraction__intersection_str__result.result____first ))) <= k)) ((k <= Stringextraction__intersection_str__L_1__j.j.int__content)))) then (
            abstract ensures {true}(let _ = (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__first_string.first_string))) ((  assert {  (#"stringextraction.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:13:44" "GP_Id:93" "comment:                          (if First_string(K) = Second_string(K) then
                                           ^ stringextraction.adb:13:44:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= k) /\ (k <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) )) };
           k ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__second_string.second_string))) ((  assert {  (#"stringextraction.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:13:63" "GP_Id:94" "comment:                          (if First_string(K) = Second_string(K) then
                                                              ^ stringextraction.adb:13:63:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__second_string.second_string) <= k) /\ (k <= (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) )) };
           k ))))))) then (
            ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:14:38" "GP_Id:90" "comment:                              result(K) = First_string(K)
                                     ^ stringextraction.adb:14:38:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)) ) )) };
            k ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__first_string.first_string))) ((  assert {  (#"stringextraction.adb" 14 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:14:56" "GP_Id:91" "comment:                              result(K) = First_string(K)
                                                       ^ stringextraction.adb:14:56:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= k) /\ (k <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) )) };
            k ))))))) else (
            ((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content) ((  assert {  (#"stringextraction.adb" 16 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:16:38" "GP_Id:92" "comment:                              result(K) = Character'Val(0)));
                                     ^ stringextraction.adb:16:38:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)) ) )) };
            k ))))) = 0))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2384"  : int.
          ( ( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= k) /\ (k <= Stringextraction__intersection_str__L_1__j.j.int__content) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__second_string.second_string) k)))) then (
           ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content k)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) k)))) else (
           ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content k)) = 0))) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop stringextraction.adb:6 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop stringextraction.adb:6 *)
         ;
         (if ((Stringextraction__intersection_str__L_1__j.j.int__content = temp___343)) then (
           raise Stringextraction__intersection_str__L_1.L_1));
          Stringextraction__intersection_str__L_1__j.j.int__content <- ( (Stringextraction__intersection_str__L_1__j.j.int__content + 1) );
         ( "GP_Sloc:stringextraction.adb:8:10" (#"stringextraction.adb" 8 0 0# (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__first_string.first_string))) (( #"stringextraction.adb" 8 0 0# assert { #"stringextraction.adb" 8 0 0# (#"stringextraction.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:8:26" "GP_Id:88" "comment:         if First_string(J) /= Second_string(J) then
                         ^ stringextraction.adb:8:26:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__cmp__ixdcomp" ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= Stringextraction__intersection_str__L_1__j.j.int__content) /\ (Stringextraction__intersection_str__L_1__j.j.int__content <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) )) };
         Stringextraction__intersection_str__L_1__j.j.int__content ))))) <> (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__second_string.second_string))) ((  assert {  (#"stringextraction.adb" 8 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__cmp__ixdcomp" "GP_Sloc:stringextraction.adb:8:46" "GP_Id:89" "comment:         if First_string(J) /= Second_string(J) then
                                             ^ stringextraction.adb:8:46:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__second_string.second_string) <= Stringextraction__intersection_str__L_1__j.j.int__content) /\ (Stringextraction__intersection_str__L_1__j.j.int__content <= (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) )) };
         Stringextraction__intersection_str__L_1__j.j.int__content ))))))) then (
          ( ( "GP_Sloc:stringextraction.adb:9:13" (#"stringextraction.adb" 9 0 0# ()) );
          ( "GP_Sloc:stringextraction.adb:9:23" (#"stringextraction.adb" 9 0 0# #"stringextraction.adb" 9 0 0# Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content) (( #"stringextraction.adb" 9 0 0# assert { #"stringextraction.adb" 9 0 0# (#"stringextraction.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.adb:9:20" "GP_Id:87" "comment:            result(J) := Character'Val(0);
                   ^ stringextraction.adb:9:20:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____first) <= Stringextraction__intersection_str__L_1__j.j.int__content) /\ (Stringextraction__intersection_str__L_1__j.j.int__content <= (Standard__integer__rep.to_rep Stringextraction__intersection_str__result.result____last)) ) )) };
          Stringextraction__intersection_str__L_1__j.j.int__content )) ((Standard__character__rep.of_rep(0)))) )) ) )) else (
          ()))) ) )
        done )))
        )))
       )
     with
      Stringextraction__intersection_str__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:stringextraction.adb:19:14" (#"stringextraction.adb" 19 0 0# ()) );
   ( "GP_Sloc:stringextraction.adb:19:7" (#"stringextraction.adb" 19 0 0# ( #"stringextraction.adb" 19 0 0# stringextraction__intersection_str__result.Standard__string.string__content <- ( (Standard__string.of_array(Stringextraction__intersection_str__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Stringextraction__intersection_str__result.result____first))) ((Standard__integer__rep.to_rep(Stringextraction__intersection_str__result.result____last)))) );
   #"stringextraction.adb" 19 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = stringextraction__intersection_str__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.first(stringextraction__intersection_str__result.Standard__string.string__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = stringextraction__intersection_str__result.Standard__string.string__content in (
    ()))
    end ;
   (Standard__string.last(stringextraction__intersection_str__result.Standard__string.string__content)) ))))) then (
     abstract ensures {true}(let _ = (if (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(stringextraction__intersection_str__result.Standard__string.string__content))) ((  assert {  (#"stringextraction.ads" 41 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:41:38" "GP_Id:100" "comment:         (if Intersection_str'Result(J) /= Character'Val(0) then
                                     ^ stringextraction.ads:41:38:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__cmp__ixdcomp" ( ((Standard__string.first stringextraction__intersection_str__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__intersection_str__result.Standard__string.string__content)) ) )) };
    j ))))) <> 0)) then (
     ( ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(stringextraction__intersection_str__result.Standard__string.string__content))) ((  assert {  (#"stringextraction.ads" 42 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:42:38" "GP_Id:96" "comment:             Intersection_str'Result(J) = First_string(J)
                                     ^ stringextraction.ads:42:38:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__andthen__cmp__ixdcomp" ( ((Standard__string.first stringextraction__intersection_str__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__intersection_str__result.Standard__string.string__content)) ) )) };
     j ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__first_string.first_string))) ((  assert {  (#"stringextraction.ads" 42 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__andthen__cmp__ixdcomp" "GP_Sloc:stringextraction.ads:42:56" "GP_Id:97" "comment:             Intersection_str'Result(J) = First_string(J)
                                                       ^ stringextraction.ads:42:56:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__first_string.first_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__first_string.first_string)) ) )) };
     j )))))) && ((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(stringextraction__intersection_str__result.Standard__string.string__content))) ((  assert {  (#"stringextraction.ads" 44 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__andthen__cmp__ixdcomp" "GP_Sloc:stringextraction.ads:44:38" "GP_Id:98" "comment:             Intersection_str'Result(J) = Second_string(J)));
                                     ^ stringextraction.ads:44:38:VC_INDEX_CHECK" ( ((Standard__string.first stringextraction__intersection_str__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__intersection_str__result.Standard__string.string__content)) ) )) };
     j ))))) = (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__intersection_str__second_string.second_string))) ((  assert {  (#"stringextraction.ads" 44 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__andthen__cmp__ixdcomp" "GP_Sloc:stringextraction.ads:44:57" "GP_Id:99" "comment:             Intersection_str'Result(J) = Second_string(J)));
                                                        ^ stringextraction.ads:44:57:VC_INDEX_CHECK" ( ((Standard__string.first Stringextraction__intersection_str__second_string.second_string) <= j) /\ (j <= (Standard__string.last Stringextraction__intersection_str__second_string.second_string)) ) )) };
     j )))))) )) else (
     (Boolean.of_int(1)))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:3639"  : int.
   ( ( ((Standard__string.first stringextraction__intersection_str__result.Standard__string.string__content) <= j) /\ (j <= (Standard__string.last stringextraction__intersection_str__result.Standard__string.string__content)) ) -> (if (((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__intersection_str__result.Standard__string.string__content) j)) <> 0)) then (
    ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__intersection_str__result.Standard__string.string__content) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__first_string.first_string) j))) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array stringextraction__intersection_str__result.Standard__string.string__content) j)) = (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__intersection_str__second_string.second_string) j))) )) else (
    true)) )) )} 
  ) ) in (
   ()))
   end ;
  stringextraction__intersection_str__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "matches_some_char" defined at stringextraction.ads:50, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Stringextraction__matches_some_char__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Stringextraction__is_contained
 use        Stringextraction__is_contained___axiom
 use        Stringextraction__matches_some_char__given_string
 use        Stringextraction__matches_some_char__reference_string
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Stringextraction__is_contained___axiom
 use        Stringextraction__matches_some_char__given_string___axiom
 use        Stringextraction__matches_some_char__reference_string___axiom

 val stringextraction__matches_some_char__result "model_projected" "model_trace:3725@result" "name:Matches_Some_Char"  : bool__ref 
 
 let def #"stringextraction.ads" 50 0 0#"W:diverges:N" "GP_Subp:stringextraction.ads:50" 
   (__void_param : unit)
  requires { #"stringextraction.ads" 50 0 0# true }
  ensures { #"stringextraction.ads" 50 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram stringextraction.ads:50 *)
  ;
  #"stringextraction.ads" 50 0 0# assume { #"stringextraction.ads" 50 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__matches_some_char__given_string.given_string True False True True) };
  #"stringextraction.ads" 50 0 0# assume { #"stringextraction.ads" 50 0 0# (Standard__string___axiom.dynamic_invariant Stringextraction__matches_some_char__reference_string.reference_string True False True True) };
  #"stringextraction.ads" 50 0 0# assume { #"stringextraction.ads" 50 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram stringextraction.ads:50 *)
  ;
  () (* Check for RTE in the Pre of the subprogram stringextraction.ads:50 *)
  ;
  #"stringextraction.ads" 50 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram stringextraction.ads:50 *)
  ;
  #"stringextraction.ads" 50 0 0# assume { #"stringextraction.ads" 50 0 0# true };
  #"stringextraction.ads" 50 0 0# try
   ( ( "GP_Sloc:stringextraction.ads:51:7" (#"stringextraction.ads" 51 0 0# ( #"stringextraction.ads" 51 0 0# stringextraction__matches_some_char__result.bool__content <- ( ( (let k = #"stringextraction.ads" 51 0 0# (any int
   ) in (
    (if ((Boolean.andb((( #"stringextraction.ads" 51 0 0# abstract ensures {true}(let _ = Stringextraction__matches_some_char__given_string.given_string in (
     ()))
     end ;
    (Standard__string.first(Stringextraction__matches_some_char__given_string.given_string)) ) <= k)) ((k <= ( #"stringextraction.ads" 51 0 0# abstract ensures {true}(let _ = Stringextraction__matches_some_char__given_string.given_string in (
     ()))
     end ;
    (Standard__string.last(Stringextraction__matches_some_char__given_string.given_string)) ))))) then (
     #"stringextraction.ads" 51 0 0# abstract ensures {true}(let _ = (Stringextraction__is_contained___axiom.is_contained((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Stringextraction__matches_some_char__given_string.given_string))) (( #"stringextraction.ads" 51 0 0# assert { #"stringextraction.ads" 51 0 0# (#"stringextraction.ads" 52 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:stringextraction.ads:52:36" "GP_Id:104" "comment:         Is_Contained(Given_String(K), Reference_String));
                                   ^ stringextraction.ads:52:36:VC_INDEX_CHECK" "GP_Shape:return__forsome__call_is_contained__ixdcomp" ( ((Standard__string.first Stringextraction__matches_some_char__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__matches_some_char__given_string.given_string)) ) )) };
     k )))))) (Stringextraction__matches_some_char__reference_string.reference_string)) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists k  : int.
    ( ( ((Standard__string.first Stringextraction__matches_some_char__given_string.given_string) <= k) /\ (k <= (Standard__string.last Stringextraction__matches_some_char__given_string.given_string)) ) /\ ((epsilon temp___result_351 : bool.
     ( (temp___result_351 = (Stringextraction__is_contained.is_contained (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__matches_some_char__given_string.given_string) k)) Stringextraction__matches_some_char__reference_string.reference_string)) /\ (Stringextraction__is_contained.is_contained__function_guard temp___result_351 (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array Stringextraction__matches_some_char__given_string.given_string) k)) Stringextraction__matches_some_char__reference_string.reference_string) )) = True) )) )} 
   ) ) );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  stringextraction__matches_some_char__result.bool__content )
end
