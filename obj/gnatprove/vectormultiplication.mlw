(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "int_vector" defined at vectormultiplication.ads:3, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "int_vector" defined at vectormultiplication.ads:3, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "int_vector" defined at vectormultiplication.ads:3, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "int_vector" defined at vectormultiplication.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__int_vector
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type int_vector =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type int_vector__ref =
  { mutable int_vector__content "model_trace:" "name:" : int_vector }
 
 function int_vector__ref___projection 
   (a : int_vector__ref) : int_vector =
  a.int_vector__content
 
 meta "model_projection" function int_vector__ref___projection
 
 meta "inline : no" function int_vector__ref___projection
 
 val int_vector__havoc 
   (x : int_vector__ref) : unit
  writes {x}

end

(* Module for defining the constant "first_vector" defined at vectormultiplication.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Vectormultiplication__scalar_product__first_vector
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector

 function first_vector #"vectormultiplication.ads" 5 0 0#"model_projected" "model_trace:2567" "name:First_vector" 
   : Vectormultiplication__int_vector.int_vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "first_vector" defined at vectormultiplication.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__scalar_product__first_vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "second_vector" defined at vectormultiplication.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Vectormultiplication__scalar_product__second_vector
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector

 function second_vector #"vectormultiplication.ads" 5 0 0#"model_projected" "model_trace:2574" "name:Second_vector" 
   : Vectormultiplication__int_vector.int_vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "second_vector" defined at vectormultiplication.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__scalar_product__second_vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "scalar_product" defined at vectormultiplication.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Vectormultiplication__scalar_product
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector

 function scalar_product 
   (first_vector : Vectormultiplication__int_vector.int_vector) (second_vector : Vectormultiplication__int_vector.int_vector) : int
 
 predicate scalar_product__function_guard 
   (result : int) (first_vector : Vectormultiplication__int_vector.int_vector) (second_vector : Vectormultiplication__int_vector.int_vector) 

end

(* Module for defining the constant "given_vector" defined at vectormultiplication.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Vectormultiplication__constant_product__given_vector
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector

 function given_vector #"vectormultiplication.ads" 14 0 0#"model_projected" "model_trace:2636" "name:Given_vector" 
   : Vectormultiplication__int_vector.int_vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_vector" defined at vectormultiplication.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__constant_product__given_vector___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "given_constant" defined at vectormultiplication.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Vectormultiplication__constant_product__given_constant
 use import "_gnatprove_standard".Main

 function given_constant #"vectormultiplication.ads" 14 0 0#"model" "model_trace:2645" "name:Given_constant" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "given_constant" defined at vectormultiplication.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__constant_product__given_constant___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T12s" defined at vectormultiplication.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__L11s__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12s__ref =
  { mutable t12s__content "model_trace:" "name:" : t12s }
 
 function t12s__ref___projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref___projection
 
 meta "inline : no" function t12s__ref___projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14s" defined at vectormultiplication.ads:19, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__L13s__T14s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14s__ref =
  { mutable t14s__content "model_trace:" "name:" : t14s }
 
 function t14s__ref___projection 
   (a : t14s__ref) : t14s =
  a.t14s__content
 
 meta "model_projection" function t14s__ref___projection
 
 meta "inline : no" function t14s__ref___projection
 
 val t14s__havoc 
   (x : t14s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T16s" defined at vectormultiplication.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__L15s__T16s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16s__ref =
  { mutable t16s__content "model_trace:" "name:" : t16s }
 
 function t16s__ref___projection 
   (a : t16s__ref) : t16s =
  a.t16s__content
 
 meta "model_projection" function t16s__ref___projection
 
 meta "inline : no" function t16s__ref___projection
 
 val t16s__havoc 
   (x : t16s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T18s" defined at vectormultiplication.ads:23, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__L17s__T18s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content "model_trace:" "name:" : t18s }
 
 function t18s__ref___projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref___projection
 
 meta "inline : no" function t18s__ref___projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20s" defined at vectormultiplication.ads:25, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__L19s__T20s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20s__ref =
  { mutable t20s__content "model_trace:" "name:" : t20s }
 
 function t20s__ref___projection 
   (a : t20s__ref) : t20s =
  a.t20s__content
 
 meta "model_projection" function t20s__ref___projection
 
 meta "inline : no" function t20s__ref___projection
 
 val t20s__havoc 
   (x : t20s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "constant_product" defined at vectormultiplication.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Vectormultiplication__constant_product
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector

 function constant_product 
   (given_vector : Vectormultiplication__int_vector.int_vector) (given_constant : int) : Vectormultiplication__int_vector.int_vector
 
 predicate constant_product__function_guard 
   (result : Vectormultiplication__int_vector.int_vector) (given_vector : Vectormultiplication__int_vector.int_vector) (given_constant : int) 

end

(* Module for axiomatizing type "TS2bP1" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__scalar_product__TS2bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS2bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS2bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS2bP1__ref =
  { mutable tS2bP1__content "model_trace:" "name:" : tS2bP1 }
 
 function tS2bP1__ref___projection 
   (a : tS2bP1__ref) : tS2bP1 =
  a.tS2bP1__content
 
 meta "model_projection" function tS2bP1__ref___projection
 
 meta "inline : no" function tS2bP1__ref___projection
 
 val tS2bP1__havoc 
   (x : tS2bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S2b" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__scalar_product__S2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Vectormultiplication__scalar_product__TS2bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectormultiplication__scalar_product__TS2bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s2b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s2b__ref =
  { mutable s2b__content "model_trace:" "name:" : s2b }
 
 function s2b__ref___projection 
   (a : s2b__ref) : s2b =
  a.s2b__content
 
 meta "model_projection" function s2b__ref___projection
 
 meta "inline : no" function s2b__ref___projection
 
 val s2b__havoc 
   (x : s2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__scalar_product__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__scalar_product__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Vectormultiplication__scalar_product__TS1bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectormultiplication__scalar_product__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at vectormultiplication.adb:6, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__scalar_product__L_1__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t3b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS5bP1" defined at vectormultiplication.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__TS5bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS5bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS5bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS5bP1__ref =
  { mutable tS5bP1__content "model_trace:" "name:" : tS5bP1 }
 
 function tS5bP1__ref___projection 
   (a : tS5bP1__ref) : tS5bP1 =
  a.tS5bP1__content
 
 meta "model_projection" function tS5bP1__ref___projection
 
 meta "inline : no" function tS5bP1__ref___projection
 
 val tS5bP1__havoc 
   (x : tS5bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S5b" defined at vectormultiplication.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__S5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Vectormultiplication__constant_product__TS5bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectormultiplication__constant_product__TS5bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s5b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s5b__ref =
  { mutable s5b__content "model_trace:" "name:" : s5b }
 
 function s5b__ref___projection 
   (a : s5b__ref) : s5b =
  a.s5b__content
 
 meta "model_projection" function s5b__ref___projection
 
 meta "inline : no" function s5b__ref___projection
 
 val s5b__havoc 
   (x : s5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at vectormultiplication.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__L_2__L8b__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t9b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t9b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at vectormultiplication.adb:21, created in Gnat2Why.Types.Translate_Type *)
module Vectormultiplication__constant_product__L_2__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "result" defined at vectormultiplication.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Vectormultiplication__scalar_product__result
 use import "_gnatprove_standard".Main

 val result__ #"vectormultiplication.adb" 4 0 0#"model_projected" "model_trace:2336" "name:result"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at vectormultiplication.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__scalar_product__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at vectormultiplication.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Vectormultiplication__scalar_product__L_1__i
 use import "_gnatprove_standard".Main

 val i #"vectormultiplication.adb" 6 0 0#"model_projected" "model_trace:2349" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at vectormultiplication.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__scalar_product__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "result" defined at vectormultiplication.adb:13, created in Gnat2Why.Decls.Translate_Variable *)
module Vectormultiplication__constant_product__result
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val result__ #"vectormultiplication.adb" 13 0 0#"model_projected" "name:result" "model_trace:2405"  : Array__Int__Standard__integer.map__ref 
 
 function result____first #"vectormultiplication.adb" 13 0 0#"model_projected" "name:result" "model_trace:2405'First" 
   : Standard__integer.integer
 
 function result____last #"vectormultiplication.adb" 13 0 0#"model_projected" "name:result" "model_trace:2405'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "result" defined at vectormultiplication.adb:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__constant_product__result___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "count" defined at vectormultiplication.adb:14, created in Gnat2Why.Decls.Translate_Variable *)
module Vectormultiplication__constant_product__count
 use import "_gnatprove_standard".Main

 val count #"vectormultiplication.adb" 14 0 0#"model_projected" "model_trace:2415" "name:count"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "count" defined at vectormultiplication.adb:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__constant_product__count___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at vectormultiplication.adb:6, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Vectormultiplication__scalar_product__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at vectormultiplication.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__scalar_product__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at vectormultiplication.adb:16, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Vectormultiplication__constant_product__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at vectormultiplication.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectormultiplication__constant_product__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "int_vector" defined at vectormultiplication.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__int_vector___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Vectormultiplication__int_vector

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : Vectormultiplication__int_vector.int_vector) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (temp___skip_constant_156) then (
   true) else (
   (Vectormultiplication__int_vector.dynamic_property Standard__positive.first Standard__positive.last (Vectormultiplication__int_vector.first temp___expr_159) (Vectormultiplication__int_vector.last temp___expr_159))))

end

(* Module giving axioms for type "T12s" defined at vectormultiplication.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__L11s__T12s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14s" defined at vectormultiplication.ads:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__L13s__T14s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T16s" defined at vectormultiplication.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__L15s__T16s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18s" defined at vectormultiplication.ads:23, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__L17s__T18s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20s" defined at vectormultiplication.ads:25, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__L19s__T20s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS2bP1" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__scalar_product__TS2bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S2b" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__scalar_product__S2b___axiom
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector
 use        Vectormultiplication__scalar_product__second_vector
 use        Vectormultiplication__scalar_product__S2b

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : Vectormultiplication__scalar_product__S2b.s2b) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  (if (temp___skip_constant_170) then (
   true) else (
   ( (Vectormultiplication__scalar_product__S2b.dynamic_property (Vectormultiplication__int_vector.first Vectormultiplication__scalar_product__second_vector.second_vector) (Vectormultiplication__int_vector.last Vectormultiplication__scalar_product__second_vector.second_vector) (Vectormultiplication__scalar_product__S2b.first temp___expr_173) (Vectormultiplication__scalar_product__S2b.last temp___expr_173)) /\ ( ((Vectormultiplication__scalar_product__S2b.first temp___expr_173) = (Vectormultiplication__int_vector.first Vectormultiplication__scalar_product__second_vector.second_vector)) /\ ((Vectormultiplication__scalar_product__S2b.last temp___expr_173) = (Vectormultiplication__int_vector.last Vectormultiplication__scalar_product__second_vector.second_vector)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_175 : Vectormultiplication__scalar_product__S2b.s2b) (temp___skip_top_level_176 : bool)  =
  true

end

(* Module giving axioms for type "TS1bP1" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__scalar_product__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at vectormultiplication.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__scalar_product__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector
 use        Vectormultiplication__scalar_product__first_vector
 use        Vectormultiplication__scalar_product__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_183 : Vectormultiplication__scalar_product__S1b.s1b) (temp___is_init_179 : bool) (temp___skip_constant_180 : bool) (temp___do_toplevel_181 : bool) (temp___do_typ_inv_182 : bool)  =
  (if (temp___skip_constant_180) then (
   true) else (
   ( (Vectormultiplication__scalar_product__S1b.dynamic_property (Vectormultiplication__int_vector.first Vectormultiplication__scalar_product__first_vector.first_vector) (Vectormultiplication__int_vector.last Vectormultiplication__scalar_product__first_vector.first_vector) (Vectormultiplication__scalar_product__S1b.first temp___expr_183) (Vectormultiplication__scalar_product__S1b.last temp___expr_183)) /\ ( ((Vectormultiplication__scalar_product__S1b.first temp___expr_183) = (Vectormultiplication__int_vector.first Vectormultiplication__scalar_product__first_vector.first_vector)) /\ ((Vectormultiplication__scalar_product__S1b.last temp___expr_183) = (Vectormultiplication__int_vector.last Vectormultiplication__scalar_product__first_vector.first_vector)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_185 : Vectormultiplication__scalar_product__S1b.s1b) (temp___skip_top_level_186 : bool)  =
  true

end

(* Module giving axioms for type "T3b" defined at vectormultiplication.adb:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__scalar_product__L_1__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS5bP1" defined at vectormultiplication.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__TS5bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S5b" defined at vectormultiplication.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__S5b___axiom
 use import "_gnatprove_standard".Main
 use        Vectormultiplication__int_vector
 use        Vectormultiplication__constant_product__given_vector
 use        Vectormultiplication__constant_product__S5b

 predicate dynamic_invariant "inline" 
   (temp___expr_193 : Vectormultiplication__constant_product__S5b.s5b) (temp___is_init_189 : bool) (temp___skip_constant_190 : bool) (temp___do_toplevel_191 : bool) (temp___do_typ_inv_192 : bool)  =
  (if (temp___skip_constant_190) then (
   true) else (
   ( (Vectormultiplication__constant_product__S5b.dynamic_property (Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector) (Vectormultiplication__constant_product__S5b.first temp___expr_193) (Vectormultiplication__constant_product__S5b.last temp___expr_193)) /\ ( ((Vectormultiplication__constant_product__S5b.first temp___expr_193) = (Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector)) /\ ((Vectormultiplication__constant_product__S5b.last temp___expr_193) = (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_195 : Vectormultiplication__constant_product__S5b.s5b) (temp___skip_top_level_196 : bool)  =
  true

end

(* Module giving axioms for type "T9b" defined at vectormultiplication.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__L_2__L8b__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at vectormultiplication.adb:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectormultiplication__constant_product__L_2__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "scalar_product" defined at vectormultiplication.ads:5, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Vectormultiplication__scalar_product___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer___axiom
 use        Vectormultiplication__scalar_product
 use        Vectormultiplication__int_vector
 use        Vectormultiplication__int_vector___axiom

 val scalar_product 
   (first_vector : Vectormultiplication__int_vector.int_vector) (second_vector : Vectormultiplication__int_vector.int_vector) : int
  requires {  ( ( ((Vectormultiplication__int_vector.length first_vector) = (Vectormultiplication__int_vector.length second_vector)) /\ ((Vectormultiplication__int_vector.length first_vector) <> 0) ) /\ ((Vectormultiplication__int_vector.length second_vector) <> 0) ) }
  ensures {  ( ( (result = (Vectormultiplication__scalar_product.scalar_product first_vector second_vector)) /\ (Vectormultiplication__scalar_product.scalar_product__function_guard result first_vector second_vector) ) /\ ( (Standard__integer___axiom.dynamic_invariant result True False True True) /\ ( (result <= 2147483647) /\ (result >= ( -2147483648 )) ) ) ) }
 
 axiom scalar_product__post_axiom :
  (forall first_vector   second_vector   : Vectormultiplication__int_vector.int_vector [(Vectormultiplication__scalar_product.scalar_product first_vector second_vector)].
   ( ( ( (Vectormultiplication__int_vector___axiom.dynamic_invariant first_vector True True True True) /\ (Vectormultiplication__int_vector___axiom.dynamic_invariant second_vector True True True True) ) /\ ( ( ((Vectormultiplication__int_vector.length first_vector) = (Vectormultiplication__int_vector.length second_vector)) /\ ((Vectormultiplication__int_vector.length first_vector) <> 0) ) /\ ((Vectormultiplication__int_vector.length second_vector) <> 0) ) ) -> (let result = (Vectormultiplication__scalar_product.scalar_product first_vector second_vector) in (
    (if ((Vectormultiplication__scalar_product.scalar_product__function_guard result first_vector second_vector)) then (
     ( ( ( (result <= 2147483647) /\ (result >= ( -2147483648 )) ) /\ (Standard__integer___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "constant_product" defined at vectormultiplication.ads:14, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Vectormultiplication__constant_product___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Int_Abs
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Vectormultiplication__int_vector
 use        Vectormultiplication__constant_product
 use        Array__Int__Standard__integer
 use        Vectormultiplication__int_vector___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val constant_product 
   (given_vector : Vectormultiplication__int_vector.int_vector) (given_constant : int) : Vectormultiplication__int_vector.int_vector
  requires {  ( ((Vectormultiplication__int_vector.length given_vector) <> 0) /\ ( ((Vectormultiplication__int_vector.first given_vector) < (2147483647 - (Vectormultiplication__int_vector.length given_vector))) /\ ( (given_constant > ( -2147483648 )) /\ ( (forall l   "model" "model_trace:2686" "name:L"  : int.
   ( ( ((Vectormultiplication__int_vector.first given_vector) <= l) /\ (l <= (Vectormultiplication__int_vector.last given_vector)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array given_vector) l)) > ( -2147483648 )) )) /\ (if ((given_constant <> 0)) then (
   (forall k   "model" "model_trace:2708" "name:K"  : int.
    ( ( ((Vectormultiplication__int_vector.first given_vector) <= k) /\ (k <= (Vectormultiplication__int_vector.last given_vector)) ) -> ((Int_Division.div 2147483647 (Int_Abs.abs given_constant)) >= (Int_Abs.abs (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array given_vector) k)))) ))) else (
   true)) ) ) ) ) }
  ensures {  ( ( (result = (Vectormultiplication__constant_product.constant_product given_vector given_constant)) /\ (Vectormultiplication__constant_product.constant_product__function_guard result given_vector given_constant) ) /\ ( (Vectormultiplication__int_vector___axiom.dynamic_invariant result True False True True) /\ ( ( ( (forall j   "model" "model_trace:2734" "name:J"  : int.
   ( ( ((Vectormultiplication__int_vector.first result) <= j) /\ (j <= (Vectormultiplication__int_vector.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array result) j)) <= 2147483647) )) /\ (forall j   "model" "name:J" "model_trace:2757"  : int.
   ( ( ((Vectormultiplication__int_vector.first result) <= j) /\ (j <= (Vectormultiplication__int_vector.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array result) j)) > ( -2147483648 )) )) ) /\ (forall j   "model" "name:J" "model_trace:2780"  : int.
   ( ( ((Vectormultiplication__int_vector.first result) <= j) /\ (j <= (Vectormultiplication__int_vector.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array result) j)) = (given_constant * (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array given_vector) ((Vectormultiplication__int_vector.first given_vector) + (j - (Vectormultiplication__int_vector.first result))))))) )) ) /\ ((Vectormultiplication__int_vector.length given_vector) = (Vectormultiplication__int_vector.length result)) ) ) ) }
 
 axiom constant_product__post_axiom :
  (forall given_vector   : Vectormultiplication__int_vector.int_vector.
  (forall given_constant   : int [(Vectormultiplication__constant_product.constant_product given_vector given_constant)].
   ( ( ( (Vectormultiplication__int_vector___axiom.dynamic_invariant given_vector True True True True) /\ (Standard__integer___axiom.dynamic_invariant given_constant True True True True) ) /\ ( ((Vectormultiplication__int_vector.length given_vector) <> 0) /\ ( ((Vectormultiplication__int_vector.first given_vector) < (2147483647 - (Vectormultiplication__int_vector.length given_vector))) /\ ( (given_constant > ( -2147483648 )) /\ ( (forall l   "model" "model_trace:2686" "name:L"  : int.
    ( ( ((Vectormultiplication__int_vector.first given_vector) <= l) /\ (l <= (Vectormultiplication__int_vector.last given_vector)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array given_vector) l)) > ( -2147483648 )) )) /\ (if ((given_constant <> 0)) then (
    (forall k   "model" "model_trace:2708" "name:K"  : int.
     ( ( ((Vectormultiplication__int_vector.first given_vector) <= k) /\ (k <= (Vectormultiplication__int_vector.last given_vector)) ) -> ((Int_Division.div 2147483647 (Int_Abs.abs given_constant)) >= (Int_Abs.abs (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array given_vector) k)))) ))) else (
    true)) ) ) ) ) ) -> (let result = (Vectormultiplication__constant_product.constant_product given_vector given_constant) in (
    (if ((Vectormultiplication__constant_product.constant_product__function_guard result given_vector given_constant)) then (
     ( ( ( ( ( (forall j   "model" "model_trace:2734" "name:J"  : int.
      ( ( ((Vectormultiplication__int_vector.first result) <= j) /\ (j <= (Vectormultiplication__int_vector.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array result) j)) <= 2147483647) )) /\ (forall j   "model" "name:J" "model_trace:2757"  : int.
      ( ( ((Vectormultiplication__int_vector.first result) <= j) /\ (j <= (Vectormultiplication__int_vector.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array result) j)) > ( -2147483648 )) )) ) /\ (forall j   "model" "name:J" "model_trace:2780"  : int.
      ( ( ((Vectormultiplication__int_vector.first result) <= j) /\ (j <= (Vectormultiplication__int_vector.last result)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array result) j)) = (given_constant * (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array given_vector) ((Vectormultiplication__int_vector.first given_vector) + (j - (Vectormultiplication__int_vector.first result))))))) )) ) /\ ((Vectormultiplication__int_vector.length given_vector) = (Vectormultiplication__int_vector.length result)) ) /\ (Vectormultiplication__int_vector___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    )))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "vectormultiplication" defined at vectormultiplication.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Vectormultiplication__package_def
 use import "_gnatprove_standard".Main

 let def #"vectormultiplication.ads" 1 0 0#"GP_Subp:vectormultiplication.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"vectormultiplication.ads" 1 0 0# true }
  ensures { #"vectormultiplication.ads" 1 0 0# true }
   =
  ( (#"vectormultiplication.ads" 1 0 0# ());
  (#"vectormultiplication.ads" 3 0 0# ());
  (#"vectormultiplication.ads" 5 0 0# ());
  (#"vectormultiplication.ads" 10 0 0# ());
  (#"vectormultiplication.ads" 7 0 0# ());
  (#"vectormultiplication.ads" 14 0 0# ());
  (#"vectormultiplication.ads" 21 0 0# ());
  (#"vectormultiplication.ads" 16 0 0# ());
  (#"vectormultiplication.ads" 17 0 0# ());
  (#"vectormultiplication.ads" 18 0 0# ());
  (#"vectormultiplication.ads" 19 0 0# ());
  (#"vectormultiplication.ads" 16 0 0# ());
  (#"vectormultiplication.ads" 16 0 0# ());
  (#"vectormultiplication.ads" 16 0 0# ());
  (#"vectormultiplication.ads" 16 0 0# ());
  (#"vectormultiplication.adb" 1 0 0# ());
  (#"vectormultiplication.adb" 3 0 0# ());
  (#"vectormultiplication.adb" 12 0 0# ());
  ( "GP_Sloc:vectormultiplication.adb:28:1" (#"vectormultiplication.adb" 28 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "scalar_product" defined at vectormultiplication.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Vectormultiplication__scalar_product__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Vectormultiplication__int_vector
 use        Array__Int__Standard__integer
 use        Vectormultiplication__int_vector___axiom
 use        Vectormultiplication__scalar_product__first_vector
 use        Vectormultiplication__scalar_product__second_vector
 use        Vectormultiplication__scalar_product__result
 use        Vectormultiplication__scalar_product__L_1
 use        Vectormultiplication__scalar_product__L_1__i
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Vectormultiplication__scalar_product__result___axiom
 use        Vectormultiplication__scalar_product__L_1__i___axiom
 use        Vectormultiplication__scalar_product__L_1___axiom
 use        Vectormultiplication__int_vector___axiom
 use        Vectormultiplication__scalar_product__first_vector___axiom
 use        Vectormultiplication__scalar_product__second_vector___axiom

 val vectormultiplication__scalar_product__result "model_projected" "model_trace:2560@result" "name:Scalar_Product"  : int__ref 
 
 let def #"vectormultiplication.ads" 5 0 0#"W:diverges:N" "GP_Subp:vectormultiplication.ads:5" 
   (__void_param : unit)
  requires { #"vectormultiplication.ads" 5 0 0# true }
  ensures { #"vectormultiplication.ads" 5 0 0# (#"vectormultiplication.ads" 10 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:vectormultiplication.ads:10:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:3" "comment:       Post => Scalar_Product'Result <= Integer'Last
               ^ vectormultiplication.ads:10:16:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( "GP_Pretty_Ada:2618" "GP_Sloc:vectormultiplication.ads:10:16" (vectormultiplication__scalar_product__result.int__content <= 2147483647) ) /\ ( "GP_Pretty_Ada:2626" "GP_Sloc:vectormultiplication.ads:11:12" (vectormultiplication__scalar_product__result.int__content >= ( -2147483648 )) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram vectormultiplication.ads:5 *)
  ;
   assume {  (Vectormultiplication__int_vector___axiom.dynamic_invariant Vectormultiplication__scalar_product__first_vector.first_vector True False True True) };
   assume {  (Vectormultiplication__int_vector___axiom.dynamic_invariant Vectormultiplication__scalar_product__second_vector.second_vector True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram vectormultiplication.ads:5 *)
  ;
  () (* Check for RTE in the Pre of the subprogram vectormultiplication.ads:5 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb(((  abstract ensures {true}(let _ = Vectormultiplication__scalar_product__first_vector.first_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(Vectormultiplication__scalar_product__first_vector.first_vector)) ) = (  abstract ensures {true}(let _ = Vectormultiplication__scalar_product__second_vector.second_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(Vectormultiplication__scalar_product__second_vector.second_vector)) ))) (((  abstract ensures {true}(let _ = Vectormultiplication__scalar_product__first_vector.first_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(Vectormultiplication__scalar_product__first_vector.first_vector)) ) <> 0)))) (((  abstract ensures {true}(let _ = Vectormultiplication__scalar_product__second_vector.second_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(Vectormultiplication__scalar_product__second_vector.second_vector)) ) <> 0))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram vectormultiplication.ads:5 *)
  ;
   assume {  ( ( ((Vectormultiplication__int_vector.length Vectormultiplication__scalar_product__first_vector.first_vector) = (Vectormultiplication__int_vector.length Vectormultiplication__scalar_product__second_vector.second_vector)) /\ ((Vectormultiplication__int_vector.length Vectormultiplication__scalar_product__first_vector.first_vector) <> 0) ) /\ ((Vectormultiplication__int_vector.length Vectormultiplication__scalar_product__second_vector.second_vector) <> 0) ) };
   try
   ( (#"vectormultiplication.adb" 3 0 0# ());
   (#"vectormultiplication.adb" 3 0 0# ());
   (#"vectormultiplication.adb" 4 0 0# ( #"vectormultiplication.adb" 4 0 0# Vectormultiplication__scalar_product__result.result__.int__content <- ( 0 );
   #"vectormultiplication.adb" 4 0 0# assume { #"vectormultiplication.adb" 4 0 0# (Standard__integer___axiom.dynamic_invariant Vectormultiplication__scalar_product__result.result__.int__content True False True True) } ));
   (#"vectormultiplication.adb" 6 0 0# ());
   ( "GP_Sloc:vectormultiplication.adb:6:35" (#"vectormultiplication.adb" 6 0 0# (let temp___199 = ( #"vectormultiplication.adb" 6 0 0# abstract ensures {true}(let _ = Vectormultiplication__scalar_product__first_vector.first_vector in (
    ()))
    end ;
   (Vectormultiplication__int_vector.first(Vectormultiplication__scalar_product__first_vector.first_vector)) ) in (
   (let temp___200 = ( #"vectormultiplication.adb" 6 0 0# abstract ensures {true}(let _ = Vectormultiplication__scalar_product__first_vector.first_vector in (
    ()))
    end ;
   (Vectormultiplication__int_vector.last(Vectormultiplication__scalar_product__first_vector.first_vector)) ) in (
    ( #"vectormultiplication.adb" 6 0 0# Vectormultiplication__scalar_product__L_1__i.i.int__content <- ( temp___199 );
    () (* Translation of an Ada loop from vectormultiplication.adb:6 *)
    ;
    (if ((Boolean.andb((temp___199 <= Vectormultiplication__scalar_product__L_1__i.i.int__content)) ((Vectormultiplication__scalar_product__L_1__i.i.int__content <= temp___200)))) then (
     #"vectormultiplication.adb" 6 0 0# try
      ( #"vectormultiplication.adb" 6 0 0# abstract ensures {true}(let _ = Vectormultiplication__scalar_product__result.result__.int__content in (
       ()))
       end ;
      (let temp___201 = #"vectormultiplication.adb" 6 0 0# (any int
      ensures {#"vectormultiplication.adb" 6 0 0# (result = Vectormultiplication__scalar_product__result.result__.int__content)} 
      ) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop vectormultiplication.adb:6 *)
       ;
       () (* While loop translating the Ada loop from vectormultiplication.adb:6 *)
       ;
       #"vectormultiplication.adb" 6 0 0# while True do
        ( () (* Assume implicit invariants from the loop vectormultiplication.adb:6 *)
        ;
        #"vectormultiplication.adb" 6 0 0# assume { #"vectormultiplication.adb" 6 0 0# (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Vectormultiplication__scalar_product__result.result__.int__content False True True True) ) /\ true )) (( ((Vectormultiplication__int_vector.first Vectormultiplication__scalar_product__first_vector.first_vector) <= Vectormultiplication__scalar_product__L_1__i.i.int__content) /\ (Vectormultiplication__scalar_product__L_1__i.i.int__content <= (Vectormultiplication__int_vector.last Vectormultiplication__scalar_product__first_vector.first_vector)) ))) };
        () (* Check for absence of RTE in the invariant of loop vectormultiplication.adb:6 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop vectormultiplication.adb:6 *)
        ;
        ( "GP_Sloc:vectormultiplication.adb:7:10" (#"vectormultiplication.adb" 7 0 0# ()) );
        ( "GP_Sloc:vectormultiplication.adb:7:20" (#"vectormultiplication.adb" 7 0 0# ()) );
        ( "GP_Sloc:vectormultiplication.adb:7:17" (#"vectormultiplication.adb" 7 0 0# #"vectormultiplication.adb" 7 0 0# Vectormultiplication__scalar_product__result.result__.int__content <- ( (#"vectormultiplication.adb" 7 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:7:27" "GP_Id:2" "comment:         result := result + First_vector (I) * Second_vector (I);
                          ^ vectormultiplication.adb:7:27:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__result_assign__add" (Standard__integer.range_check_((Vectormultiplication__scalar_product__result.result__.int__content + (#"vectormultiplication.adb" 7 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectormultiplication.adb:7:46" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:1" "comment:         result := result + First_vector (I) * Second_vector (I);
                                             ^ vectormultiplication.adb:7:46:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__result_assign__add__mult" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__scalar_product__first_vector.first_vector))) (Vectormultiplication__scalar_product__L_1__i.i.int__content)))) * (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__scalar_product__second_vector.second_vector))) (( #"vectormultiplication.adb" 7 0 0# assert { #"vectormultiplication.adb" 7 0 0# (#"vectormultiplication.adb" 7 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectormultiplication.adb:7:63" "GP_Reason:VC_INDEX_CHECK" "GP_Id:0" "comment:         result := result + First_vector (I) * Second_vector (I);
                                                              ^ vectormultiplication.adb:7:63:VC_INDEX_CHECK" "GP_Shape:L_1_while__result_assign__add__mult__ixdcomp" ( ((Vectormultiplication__int_vector.first Vectormultiplication__scalar_product__second_vector.second_vector) <= Vectormultiplication__scalar_product__L_1__i.i.int__content) /\ (Vectormultiplication__scalar_product__L_1__i.i.int__content <= (Vectormultiplication__int_vector.last Vectormultiplication__scalar_product__second_vector.second_vector)) ) )) };
        Vectormultiplication__scalar_product__L_1__i.i.int__content )))))))) ))))) )) )) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop vectormultiplication.adb:6 *)
        ;
        (if ((Vectormultiplication__scalar_product__L_1__i.i.int__content = temp___200)) then (
          raise Vectormultiplication__scalar_product__L_1.L_1));
         Vectormultiplication__scalar_product__L_1__i.i.int__content <- ( (Vectormultiplication__scalar_product__L_1__i.i.int__content + 1) ) )
       done )))
       )
     with
      Vectormultiplication__scalar_product__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:vectormultiplication.adb:9:14" (#"vectormultiplication.adb" 9 0 0# ()) );
   ( "GP_Sloc:vectormultiplication.adb:9:7" (#"vectormultiplication.adb" 9 0 0# ( #"vectormultiplication.adb" 9 0 0# vectormultiplication__scalar_product__result.int__content <- ( Vectormultiplication__scalar_product__result.result__.int__content );
   #"vectormultiplication.adb" 9 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((vectormultiplication__scalar_product__result.int__content <= 2147483647)) ((vectormultiplication__scalar_product__result.int__content >= ( -2147483648 )))) in (
   ()))
   end ;
  vectormultiplication__scalar_product__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "constant_product" defined at vectormultiplication.ads:14, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Vectormultiplication__constant_product__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Int_Abs
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Standard__positive
 use        Standard__integer__rep
 use        Vectormultiplication__int_vector
 use        Array__Int__Standard__integer
 use        Vectormultiplication__int_vector___axiom
 use        Vectormultiplication__constant_product__given_vector
 use        Vectormultiplication__constant_product__given_constant
 use        Array__Int__Standard__integer
 use        Vectormultiplication__constant_product__result
 use        Vectormultiplication__constant_product__count
 use        Vectormultiplication__constant_product__L_2
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Vectormultiplication__constant_product__result___axiom
 use        Vectormultiplication__constant_product__count___axiom
 use        Vectormultiplication__constant_product__L_2___axiom
 use        Vectormultiplication__int_vector___axiom
 use        Vectormultiplication__constant_product__given_vector___axiom
 use        Vectormultiplication__constant_product__given_constant___axiom

 val vectormultiplication__constant_product__result "model_projected" "model_trace:2629@result" "name:Constant_Product"  : Vectormultiplication__int_vector.int_vector__ref 
 
 let def #"vectormultiplication.ads" 14 0 0#"W:diverges:N" "GP_Subp:vectormultiplication.ads:14" 
   (__void_param : unit)
  requires { #"vectormultiplication.ads" 14 0 0# true }
  ensures { #"vectormultiplication.ads" 14 0 0# (#"vectormultiplication.ads" 21 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__and" "GP_Sloc:vectormultiplication.ads:21:16" "GP_Id:32" "comment:       Post => (for all J in Constant_Product'Result'Range =>
               ^ vectormultiplication.ads:21:16:VC_POSTCONDITION" ( ( ( (forall j #"vectormultiplication.ads" 21 0 0#  "model" "model_trace:2734" "name:J"  : int.
   ( ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) -> ( "GP_Pretty_Ada:2752" "GP_Sloc:vectormultiplication.ads:22:19" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) j)) <= 2147483647) ) )) /\ (forall j #"vectormultiplication.ads" 21 0 0#  "model" "name:J" "model_trace:2757"  : int.
   ( ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) -> ( "GP_Pretty_Ada:2775" "GP_Sloc:vectormultiplication.ads:24:15" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) j)) > ( -2147483648 )) ) )) ) /\ (forall j #"vectormultiplication.ads" 21 0 0#  "model" "name:J" "model_trace:2780"  : int.
   ( ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) -> ( "GP_Pretty_Ada:2798" "GP_Sloc:vectormultiplication.ads:26:15" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) j)) = (Vectormultiplication__constant_product__given_constant.given_constant * (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) + (j - (Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content))))))) ) )) ) /\ ( "GP_Pretty_Ada:2818" "GP_Sloc:vectormultiplication.ads:27:12" ((Vectormultiplication__int_vector.length Vectormultiplication__constant_product__given_vector.given_vector) = (Vectormultiplication__int_vector.length vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram vectormultiplication.ads:14 *)
  ;
   assume {  (Vectormultiplication__int_vector___axiom.dynamic_invariant Vectormultiplication__constant_product__given_vector.given_vector True False True True) };
   assume {  (Standard__integer___axiom.dynamic_invariant Vectormultiplication__constant_product__given_constant.given_constant True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram vectormultiplication.ads:14 *)
  ;
  () (* Check for RTE in the Pre of the subprogram vectormultiplication.ads:14 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(Vectormultiplication__constant_product__given_vector.given_vector)) ) <> 0) && ( ((  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.first(Vectormultiplication__constant_product__given_vector.given_vector)) ) < (#"vectormultiplication.ads" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.ads:17:51" "GP_Id:31" "comment:       and then Given_vector'First < Integer'Last - Given_vector'Length
                                                  ^ vectormultiplication.ads:17:51:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__cmp__sub" (Standard__integer.range_check_((2147483647 - (#"vectormultiplication.ads" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectormultiplication.ads:17:65" "GP_Reason:VC_RANGE_CHECK" "GP_Id:30" "comment:       and then Given_vector'First < Integer'Last - Given_vector'Length
                                                                ^ vectormultiplication.ads:17:65:VC_RANGE_CHECK" "GP_Shape:pragargs__cmp__sub__typeconv__length_ref" (Standard__integer.range_check_(( #"vectormultiplication.ads" 17 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(Vectormultiplication__constant_product__given_vector.given_vector)) ))) ))))) ))) && ( (Vectormultiplication__constant_product__given_constant.given_constant > ( -2147483648 )) && ( ( (let l =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
    ()))
    end ;
   (Vectormultiplication__int_vector.first(Vectormultiplication__constant_product__given_vector.given_vector)) ) <= l)) ((l <= (  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
    ()))
    end ;
   (Vectormultiplication__int_vector.last(Vectormultiplication__constant_product__given_vector.given_vector)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__constant_product__given_vector.given_vector))) ((  assert {  (#"vectormultiplication.ads" 19 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.ads:19:66" "GP_Id:29" "comment:       and then (for all L in Given_vector'Range => Given_vector(L) > Integer'First)
                                                                 ^ vectormultiplication.ads:19:66:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= l) /\ (l <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) )) };
    l ))))) > ( -2147483648 )) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall l   "model" "model_trace:2686" "name:L"  : int.
   ( ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= l) /\ (l <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) l)) > ( -2147483648 )) )) )} 
  ) ) && (if ((Vectormultiplication__constant_product__given_constant.given_constant <> 0)) then (
   ( (let k =  (any int
   ) in (
    (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
     ()))
     end ;
    (Vectormultiplication__int_vector.first(Vectormultiplication__constant_product__given_vector.given_vector)) ) <= k)) ((k <= (  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
     ()))
     end ;
    (Vectormultiplication__int_vector.last(Vectormultiplication__constant_product__given_vector.given_vector)) ))))) then (
      abstract ensures {true}(let _ = ((#"vectormultiplication.ads" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectormultiplication.ads:20:94" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:26" "comment:       and then (if Given_constant /= 0 then (for all K in Given_vector'Range => Integer'Last/abs Given_constant >= abs Given_vector(K))),
                                                                                             ^ vectormultiplication.ads:20:94:VC_DIVISION_CHECK" "GP_Shape:pragargs__if__forall__cmp__div" (Int_Division.div_(2147483647) ((#"vectormultiplication.ads" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.ads:20:95" "GP_Id:25" "comment:       and then (if Given_constant /= 0 then (for all K in Given_vector'Range => Integer'Last/abs Given_constant >= abs Given_vector(K))),
                                                                                              ^ vectormultiplication.ads:20:95:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__if__forall__cmp__div__abs" (Standard__integer.range_check_((Int_Abs.abs(Vectormultiplication__constant_product__given_constant.given_constant)))) )))) )) >= (#"vectormultiplication.ads" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.ads:20:117" "GP_Id:28" "comment:       and then (if Given_constant /= 0 then (for all K in Given_vector'Range => Integer'Last/abs Given_constant >= abs Given_vector(K))),
                                                                                                                    ^ vectormultiplication.ads:20:117:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__if__forall__cmp__abs" (Standard__integer.range_check_((Int_Abs.abs((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__constant_product__given_vector.given_vector))) (( #"vectormultiplication.ads" 20 0 0# assert { #"vectormultiplication.ads" 20 0 0# (#"vectormultiplication.ads" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.ads:20:134" "GP_Id:27" "comment:       and then (if Given_constant /= 0 then (for all K in Given_vector'Range => Integer'Last/abs Given_constant >= abs Given_vector(K))),
                                                                                                                                     ^ vectormultiplication.ads:20:134:VC_INDEX_CHECK" "GP_Shape:pragargs__if__forall__cmp__abs__ixdcomp" ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= k) /\ (k <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) )) };
     k ))))))))) ))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall k   "model" "model_trace:2708" "name:K"  : int.
    ( ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= k) /\ (k <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) -> ((Int_Division.div 2147483647 (Int_Abs.abs Vectormultiplication__constant_product__given_constant.given_constant)) >= (Int_Abs.abs (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) k)))) )) )} 
   ) )) else (
   (Boolean.of_int(1)))) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram vectormultiplication.ads:14 *)
  ;
   assume {  ( ((Vectormultiplication__int_vector.length Vectormultiplication__constant_product__given_vector.given_vector) <> 0) /\ ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) < (2147483647 - (Vectormultiplication__int_vector.length Vectormultiplication__constant_product__given_vector.given_vector))) /\ ( (Vectormultiplication__constant_product__given_constant.given_constant > ( -2147483648 )) /\ ( (forall l   "model" "model_trace:2686" "name:L"  : int.
   ( ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= l) /\ (l <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) l)) > ( -2147483648 )) )) /\ (if ((Vectormultiplication__constant_product__given_constant.given_constant <> 0)) then (
   (forall k   "model" "model_trace:2708" "name:K"  : int.
    ( ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= k) /\ (k <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) -> ((Int_Division.div 2147483647 (Int_Abs.abs Vectormultiplication__constant_product__given_constant.given_constant)) >= (Int_Abs.abs (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) k)))) ))) else (
   true)) ) ) ) ) };
   try
   ( (#"vectormultiplication.adb" 12 0 0# ());
   (#"vectormultiplication.adb" 13 0 0# ( (let vectormultiplication__constant_product__result__assume = Vectormultiplication__constant_product__given_vector.given_vector in (
    ( #"vectormultiplication.adb" 13 0 0# Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content <- ( (Vectormultiplication__int_vector.to_array(vectormultiplication__constant_product__result__assume)) );
    #"vectormultiplication.adb" 13 0 0# assume { #"vectormultiplication.adb" 13 0 0# ((Standard__integer__rep.to_rep(Vectormultiplication__constant_product__result.result____first)) = (Vectormultiplication__int_vector.first(vectormultiplication__constant_product__result__assume))) };
    #"vectormultiplication.adb" 13 0 0# assume { #"vectormultiplication.adb" 13 0 0# ((Standard__integer__rep.to_rep(Vectormultiplication__constant_product__result.result____last)) = (Vectormultiplication__int_vector.last(vectormultiplication__constant_product__result__assume))) } )))
   ;
   #"vectormultiplication.adb" 13 0 0# assume { #"vectormultiplication.adb" 13 0 0# (if (False) then (
    true) else (
    (Vectormultiplication__int_vector.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____first) (Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____last)))) } ));
   (#"vectormultiplication.adb" 14 0 0# ( #"vectormultiplication.adb" 14 0 0# Vectormultiplication__constant_product__count.count.int__content <- ( ( #"vectormultiplication.adb" 14 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
    ()))
    end ;
   (Vectormultiplication__int_vector.first(Vectormultiplication__constant_product__given_vector.given_vector)) ) );
   #"vectormultiplication.adb" 14 0 0# assume { #"vectormultiplication.adb" 14 0 0# (Standard__integer___axiom.dynamic_invariant Vectormultiplication__constant_product__count.count.int__content True False True True) } ));
   (#"vectormultiplication.adb" 16 0 0# ());
   ( "GP_Sloc:vectormultiplication.adb:16:40" (#"vectormultiplication.adb" 16 0 0# ( () (* Translation of an Ada loop from vectormultiplication.adb:16 *)
   ;
   (if ((Vectormultiplication__constant_product__count.count.int__content <= ( #"vectormultiplication.adb" 16 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
    ()))
    end ;
   (Vectormultiplication__int_vector.last(Vectormultiplication__constant_product__given_vector.given_vector)) ))) then (
    #"vectormultiplication.adb" 16 0 0# try
     ( #"vectormultiplication.adb" 16 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__count.count.int__content in (
      ()))
      end ;
     (let temp___208 = #"vectormultiplication.adb" 16 0 0# (any int
     ensures {#"vectormultiplication.adb" 16 0 0# (result = Vectormultiplication__constant_product__count.count.int__content)} 
     ) in (
      ( #"vectormultiplication.adb" 16 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content in (
       ()))
       end ;
      (let temp___206 = #"vectormultiplication.adb" 16 0 0# (any Array__Int__Standard__integer.map
      ensures {#"vectormultiplication.adb" 16 0 0# (result = Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content)} 
      ) in (
       #"vectormultiplication.adb" 16 0 0# let temp___210 = { int__content = 0 } in 
       #"vectormultiplication.adb" 16 0 0# let temp___209 = { int__content = 0 } in 
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop vectormultiplication.adb:16 *)
        ;
        ( "GP_Sloc:vectormultiplication.adb:17:10" (#"vectormultiplication.adb" 17 0 0# ()) );
        ( "GP_Sloc:vectormultiplication.adb:17:18" (#"vectormultiplication.adb" 17 0 0# ()) );
        ( "GP_Sloc:vectormultiplication.adb:17:42" (#"vectormultiplication.adb" 17 0 0# ()) );
        ( "GP_Sloc:vectormultiplication.adb:17:25" (#"vectormultiplication.adb" 17 0 0# #"vectormultiplication.adb" 17 0 0# Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content) (( #"vectormultiplication.adb" 17 0 0# assert { #"vectormultiplication.adb" 17 0 0# (#"vectormultiplication.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.adb:17:18" "GP_Id:6" "comment:         result (count) := Given_vector (count) * Given_constant;
                 ^ vectormultiplication.adb:17:18:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____first) <= Vectormultiplication__constant_product__count.count.int__content) /\ (Vectormultiplication__constant_product__count.count.int__content <= (Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____last)) ) )) };
        Vectormultiplication__constant_product__count.count.int__content )) ((Standard__integer__rep.of_rep((#"vectormultiplication.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:17:49" "GP_Id:5" "comment:         result (count) := Given_vector (count) * Given_constant;
                                                ^ vectormultiplication.adb:17:49:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__result_assign__mult" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__constant_product__given_vector.given_vector))) (( #"vectormultiplication.adb" 17 0 0# assert { #"vectormultiplication.adb" 17 0 0# (#"vectormultiplication.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.adb:17:42" "GP_Id:4" "comment:         result (count) := Given_vector (count) * Given_constant;
                                         ^ vectormultiplication.adb:17:42:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__mult__ixdcomp" ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= Vectormultiplication__constant_product__count.count.int__content) /\ (Vectormultiplication__constant_product__count.count.int__content <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) )) };
        Vectormultiplication__constant_product__count.count.int__content ))))) * Vectormultiplication__constant_product__given_constant.given_constant))) )))))) )) );
        ( "GP_Sloc:vectormultiplication.adb:18:10" (#"vectormultiplication.adb" 18 0 0# ()) );
        ( "GP_Sloc:vectormultiplication.adb:18:19" (#"vectormultiplication.adb" 18 0 0# ()) );
        ( "GP_Sloc:vectormultiplication.adb:18:16" (#"vectormultiplication.adb" 18 0 0# #"vectormultiplication.adb" 18 0 0# Vectormultiplication__constant_product__count.count.int__content <- ( (#"vectormultiplication.adb" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:18:25" "GP_Id:7" "comment:         count := count + 1;
                        ^ vectormultiplication.adb:18:25:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__count_assign__add" (Standard__integer.range_check_((Vectormultiplication__constant_product__count.count.int__content + 1))) )) )) );
        () (* While loop translating the Ada loop from vectormultiplication.adb:16 *)
        ;
         while True do
         invariant { 
          (#"vectormultiplication.adb" 21 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectormultiplication.adb:21:32" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:12" "comment:         pragma Loop_Invariant(for all K in result'First .. count - 1 =>
                               ^ vectormultiplication.adb:21:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" (forall k #"vectormultiplication.adb" 21 0 0#  "model" "name:K" "model_trace:2468"  : int.
           ( ( ((Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____first) <= k) /\ (k <= (Vectormultiplication__constant_product__count.count.int__content - 1)) ) -> ( "GP_Pretty_Ada:2489" "GP_Sloc:vectormultiplication.adb:22:37" (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) k)) * Vectormultiplication__constant_product__given_constant.given_constant) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content k))) ) )) ))
          }
         invariant { 
          (#"vectormultiplication.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:vectormultiplication.adb:23:32" "GP_Id:14" "comment:         pragma Loop_Invariant(count in Given_vector'First .. Given_vector'Last + 1);
                               ^ vectormultiplication.adb:23:32:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__in" ( "GP_Pretty_Ada:2497" "GP_Sloc:vectormultiplication.adb:23:32" ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= Vectormultiplication__constant_product__count.count.int__content) /\ (Vectormultiplication__constant_product__count.count.int__content <= ((Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector) + 1)) ) ) ))
          }
         ( () (* Assume implicit invariants from the loop vectormultiplication.adb:16 *)
         ;
          assume {  ( ( ( ( true /\ (if (True) then (
          true) else (
          (Vectormultiplication__int_vector.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____first) (Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____last)))) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Vectormultiplication__constant_product__count.count.int__content False True True True) ) /\ true ) };
         () (* Check for absence of RTE in the invariant of loop vectormultiplication.adb:16 *)
         ;
          abstract ensures {true}(let _ = ( (let k =  (any int
         ) in (
          (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content in (
           ()))
           end ;
          Vectormultiplication__constant_product__result.result____first ))) <= k)) ((k <= (#"vectormultiplication.adb" 21 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:21:67" "GP_Id:8" "comment:         pragma Loop_Invariant(for all K in result'First .. count - 1 =>
                                                                  ^ vectormultiplication.adb:21:67:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__forall__range__sub" (Standard__integer.range_check_((Vectormultiplication__constant_product__count.count.int__content - 1))) )))))) then (
            abstract ensures {true}(let _ = ((#"vectormultiplication.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:22:53" "GP_Id:10" "comment:                                    Given_vector(K) * Given_constant = result(K));
                                                    ^ vectormultiplication.adb:22:53:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__mult" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__constant_product__given_vector.given_vector))) (( #"vectormultiplication.adb" 22 0 0# assert { #"vectormultiplication.adb" 22 0 0# (#"vectormultiplication.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.adb:22:50" "GP_Id:9" "comment:                                    Given_vector(K) * Given_constant = result(K));
                                                 ^ vectormultiplication.adb:22:50:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__mult__ixdcomp" ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= k) /\ (k <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) )) };
           k ))))) * Vectormultiplication__constant_product__given_constant.given_constant))) )) = (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content) ((  assert {  (#"vectormultiplication.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.adb:22:79" "GP_Id:11" "comment:                                    Given_vector(K) * Given_constant = result(K));
                                                                              ^ vectormultiplication.adb:22:79:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____first) <= k) /\ (k <= (Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____last)) ) )) };
           k )))))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2468"  : int.
          ( ( ((Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____first) <= k) /\ (k <= (Vectormultiplication__constant_product__count.count.int__content - 1)) ) -> (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) k)) * Vectormultiplication__constant_product__given_constant.given_constant) = (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content k))) )) )} 
         ) ) in (
          ()))
          end ;
          abstract ensures {true}(let _ = (Boolean.andb(((  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
          ()))
          end ;
         (Vectormultiplication__int_vector.first(Vectormultiplication__constant_product__given_vector.given_vector)) ) <= Vectormultiplication__constant_product__count.count.int__content)) ((Vectormultiplication__constant_product__count.count.int__content <= (#"vectormultiplication.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:23:81" "GP_Id:13" "comment:         pragma Loop_Invariant(count in Given_vector'First .. Given_vector'Last + 1);
                                                                                ^ vectormultiplication.adb:23:81:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__in__range__add" (Standard__integer.range_check_((( #"vectormultiplication.adb" 23 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
          ()))
          end ;
         (Vectormultiplication__int_vector.last(Vectormultiplication__constant_product__given_vector.given_vector)) ) + 1))) ))))) in (
          ()))
          end ;
          temp___209.int__content <- ( Vectormultiplication__constant_product__count.count.int__content );
          temp___210.int__content <- ( ((Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector) - Vectormultiplication__constant_product__count.count.int__content) );
         () (* Loop statements appearing after the loop invariant of loop vectormultiplication.adb:16 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop vectormultiplication.adb:16 *)
         ;
         (if (not ( (Vectormultiplication__constant_product__count.count.int__content <= (  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
          ()))
          end ;
         (Vectormultiplication__int_vector.last(Vectormultiplication__constant_product__given_vector.given_vector)) )) )) then (
           raise Vectormultiplication__constant_product__L_2.L_2));
         ( "GP_Sloc:vectormultiplication.adb:17:10" (#"vectormultiplication.adb" 17 0 0# ()) );
         ( "GP_Sloc:vectormultiplication.adb:17:18" (#"vectormultiplication.adb" 17 0 0# ()) );
         ( "GP_Sloc:vectormultiplication.adb:17:42" (#"vectormultiplication.adb" 17 0 0# ()) );
         ( "GP_Sloc:vectormultiplication.adb:17:25" (#"vectormultiplication.adb" 17 0 0# #"vectormultiplication.adb" 17 0 0# Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content) (( #"vectormultiplication.adb" 17 0 0# assert { #"vectormultiplication.adb" 17 0 0# (#"vectormultiplication.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.adb:17:18" "GP_Id:6" "comment:         result (count) := Given_vector (count) * Given_constant;
                 ^ vectormultiplication.adb:17:18:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____first) <= Vectormultiplication__constant_product__count.count.int__content) /\ (Vectormultiplication__constant_product__count.count.int__content <= (Standard__integer__rep.to_rep Vectormultiplication__constant_product__result.result____last)) ) )) };
         Vectormultiplication__constant_product__count.count.int__content )) ((Standard__integer__rep.of_rep((#"vectormultiplication.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:17:49" "GP_Id:5" "comment:         result (count) := Given_vector (count) * Given_constant;
                                                ^ vectormultiplication.adb:17:49:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__result_assign__mult" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__constant_product__given_vector.given_vector))) (( #"vectormultiplication.adb" 17 0 0# assert { #"vectormultiplication.adb" 17 0 0# (#"vectormultiplication.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.adb:17:42" "GP_Id:4" "comment:         result (count) := Given_vector (count) * Given_constant;
                                         ^ vectormultiplication.adb:17:42:VC_INDEX_CHECK" "GP_Shape:L_2_while__result_assign__mult__ixdcomp" ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= Vectormultiplication__constant_product__count.count.int__content) /\ (Vectormultiplication__constant_product__count.count.int__content <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) )) };
         Vectormultiplication__constant_product__count.count.int__content ))))) * Vectormultiplication__constant_product__given_constant.given_constant))) )))))) )) );
         ( "GP_Sloc:vectormultiplication.adb:18:10" (#"vectormultiplication.adb" 18 0 0# ()) );
         ( "GP_Sloc:vectormultiplication.adb:18:19" (#"vectormultiplication.adb" 18 0 0# ()) );
         ( "GP_Sloc:vectormultiplication.adb:18:16" (#"vectormultiplication.adb" 18 0 0# #"vectormultiplication.adb" 18 0 0# Vectormultiplication__constant_product__count.count.int__content <- ( (#"vectormultiplication.adb" 18 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:18:25" "GP_Id:7" "comment:         count := count + 1;
                        ^ vectormultiplication.adb:18:25:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__count_assign__add" (Standard__integer.range_check_((Vectormultiplication__constant_product__count.count.int__content + 1))) )) )) );
          abstract ensures {true}(let _ =  abstract ensures {true}(let _ = Vectormultiplication__constant_product__count.count.int__content in (
          ()))
          end  in (
          ()))
          end ;
          check {  (#"vectormultiplication.adb" 19 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectormultiplication.adb:19:10" "GP_Reason:VC_LOOP_VARIANT" "GP_Id:15" "comment:         pragma Loop_Variant(Increases => count);
         ^ vectormultiplication.adb:19:10:VC_LOOP_VARIANT" "GP_Shape:L_2_while" (Vectormultiplication__constant_product__count.count.int__content > temp___209.int__content) )) };
          abstract ensures {true}(let _ =  abstract ensures {true}(let _ = (#"vectormultiplication.adb" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.adb:20:61" "GP_Id:16" "comment:         pragma Loop_Variant(Decreases => Given_vector'Last - count);
                                                            ^ vectormultiplication.adb:20:61:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__sub" (Standard__integer.range_check_((( #"vectormultiplication.adb" 20 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
          ()))
          end ;
         (Vectormultiplication__int_vector.last(Vectormultiplication__constant_product__given_vector.given_vector)) ) - Vectormultiplication__constant_product__count.count.int__content))) )) in (
          ()))
          end  in (
          ()))
          end ;
          check {  (#"vectormultiplication.adb" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_VARIANT" "GP_Shape:L_2_while" "GP_Sloc:vectormultiplication.adb:20:10" "GP_Id:17" "comment:         pragma Loop_Variant(Decreases => Given_vector'Last - count);
         ^ vectormultiplication.adb:20:10:VC_LOOP_VARIANT" (((Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector) - Vectormultiplication__constant_product__count.count.int__content) < temp___210.int__content) )) } )
        done )))
       )))
      )
    with
     Vectormultiplication__constant_product__L_2.L_2 -> ()
    end)) )) );
   ( "GP_Sloc:vectormultiplication.adb:25:14" (#"vectormultiplication.adb" 25 0 0# ()) );
   ( "GP_Sloc:vectormultiplication.adb:25:7" (#"vectormultiplication.adb" 25 0 0# ( #"vectormultiplication.adb" 25 0 0# vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content <- ( (Vectormultiplication__int_vector.of_array(Vectormultiplication__constant_product__result.result__.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(Vectormultiplication__constant_product__result.result____first))) ((Standard__integer__rep.to_rep(Vectormultiplication__constant_product__result.result____last)))) );
   #"vectormultiplication.adb" 25 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb(( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
    ()))
    end ;
   (Vectormultiplication__int_vector.first(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
    ()))
    end ;
   (Vectormultiplication__int_vector.last(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content))) ((  assert {  (#"vectormultiplication.ads" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.ads:22:44" "GP_Id:18" "comment:                  Constant_Product'Result (J) <= Integer'Last)
                                           ^ vectormultiplication.ads:22:44:VC_INDEX_CHECK" "GP_Shape:pragargs__and__and__and__forall__cmp__ixdcomp" ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) )) };
    j ))))) <= 2147483647) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "model_trace:2734" "name:J"  : int.
   ( ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) j)) <= 2147483647) )) )} 
  ) )) (( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
    ()))
    end ;
   (Vectormultiplication__int_vector.first(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
    ()))
    end ;
   (Vectormultiplication__int_vector.last(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content))) ((  assert {  (#"vectormultiplication.ads" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__and__and__and__forall__cmp__ixdcomp" "GP_Sloc:vectormultiplication.ads:24:40" "GP_Id:19" "comment:              Constant_Product'Result (J) > Integer'First)
                                       ^ vectormultiplication.ads:24:40:VC_INDEX_CHECK" ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) )) };
    j ))))) > ( -2147483648 )) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2757"  : int.
   ( ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) j)) > ( -2147483648 )) )) )} 
  ) )))) (( (let j =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
    ()))
    end ;
   (Vectormultiplication__int_vector.first(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) <= j)) ((j <= (  abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
    ()))
    end ;
   (Vectormultiplication__int_vector.last(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content))) ((  assert {  (#"vectormultiplication.ads" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.ads:26:40" "GP_Id:20" "comment:              Constant_Product'Result (J) = Given_constant * Given_vector (Given_vector'First + (J - Constant_Product'Result'First)))
                                       ^ vectormultiplication.ads:26:40:VC_INDEX_CHECK" "GP_Shape:pragargs__and__and__forall__cmp__ixdcomp" ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) )) };
    j ))))) = (#"vectormultiplication.ads" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.ads:26:60" "GP_Id:24" "comment:              Constant_Product'Result (J) = Given_constant * Given_vector (Given_vector'First + (J - Constant_Product'Result'First)))
                                                           ^ vectormultiplication.ads:26:60:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__and__and__forall__cmp__mult" (Standard__integer.range_check_((Vectormultiplication__constant_product__given_constant.given_constant * (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectormultiplication__int_vector.to_array(Vectormultiplication__constant_product__given_vector.given_vector))) ((let temp___212 = (#"vectormultiplication.ads" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.ads:26:95" "GP_Id:22" "comment:              Constant_Product'Result (J) = Given_constant * Given_vector (Given_vector'First + (J - Constant_Product'Result'First)))
                                                                                              ^ vectormultiplication.ads:26:95:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__and__and__forall__cmp__mult__ixdcomp__add" (Standard__integer.range_check_((( #"vectormultiplication.ads" 26 0 0# abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
     ()))
     end ;
    (Vectormultiplication__int_vector.first(Vectormultiplication__constant_product__given_vector.given_vector)) ) + (#"vectormultiplication.ads" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectormultiplication.ads:26:100" "GP_Id:21" "comment:              Constant_Product'Result (J) = Given_constant * Given_vector (Given_vector'First + (J - Constant_Product'Result'First)))
                                                                                                   ^ vectormultiplication.ads:26:100:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__and__and__forall__cmp__mult__ixdcomp__add__sub" (Standard__integer.range_check_((j - ( #"vectormultiplication.ads" 26 0 0# abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
     ()))
     end ;
    (Vectormultiplication__int_vector.first(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) )))) ))))) )) in (
     (  assert {  (#"vectormultiplication.ads" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectormultiplication.ads:26:95" "GP_Shape:pragargs__and__and__forall__cmp__mult__ixdcomp__add" "GP_Id:23" "comment:              Constant_Product'Result (J) = Given_constant * Given_vector (Given_vector'First + (J - Constant_Product'Result'First)))
                                                                                              ^ vectormultiplication.ads:26:95:VC_INDEX_CHECK" ( ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) <= temp___212) /\ (temp___212 <= (Vectormultiplication__int_vector.last Vectormultiplication__constant_product__given_vector.given_vector)) ) )) };
     temp___212 )))
    ))))))) ))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2780"  : int.
   ( ( ((Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) <= j) /\ (j <= (Vectormultiplication__int_vector.last vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content) j)) = (Vectormultiplication__constant_product__given_constant.given_constant * (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectormultiplication__int_vector.to_array Vectormultiplication__constant_product__given_vector.given_vector) ((Vectormultiplication__int_vector.first Vectormultiplication__constant_product__given_vector.given_vector) + (j - (Vectormultiplication__int_vector.first vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content))))))) )) )} 
  ) )))) (((  abstract ensures {true}(let _ = Vectormultiplication__constant_product__given_vector.given_vector in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(Vectormultiplication__constant_product__given_vector.given_vector)) ) = (  abstract ensures {true}(let _ = vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content in (
   ()))
   end ;
  (Vectormultiplication__int_vector.length(vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content)) )))) in (
   ()))
   end ;
  vectormultiplication__constant_product__result.Vectormultiplication__int_vector.int_vector__content )
end
